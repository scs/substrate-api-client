/*
    Copyright 2019 Supercomputing Systems AG
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

//! This example shows how to decode a runtime value that is a custom struct.
//!
//! *Note*: The runtime module here is not in the generic substrate node. Hence, this example
//! must run against the customized node found in `https://github.com/scs/substrate-test-nodes`.
//!

use clap::{load_yaml, App};
use codec::{Decode, Encode};
use sp_keyring::AccountKeyring;
use log::*;
use sp_core::{crypto::Pair, H256};
use substrate_api_client::{
    compose_extrinsic, extrinsic::xt_primitives::UncheckedExtrinsicV4, Api, XtStatus
};

// The custom struct that is to be decoded. The user must know the structure for this to work, which can fortunately
// be looked up from the node metadata and printed with the `example_print_metadata`.
#[derive(Encode, Decode, Debug, Clone)]
struct Kitty {
    id: H256,
    price: u128,
}

fn main() {
    env_logger::init();
    let url = get_node_url_from_cli();

    // initialize api and set the signer (sender) that is used to sign the extrinsics
    let from = AccountKeyring::Alice.pair();
    let api = Api::new(format!("ws://{}", url)).set_signer(from.clone());

    let xt: UncheckedExtrinsicV4<_> =
        compose_extrinsic!(api.clone(), "KittyModule", "create_kitty", 10 as u128);

    println!("[+] Composed extrinsic to create Kitty:\n\n {:?}", xt);

    // send and watch extrinsic until finalized
    let tx_hash = api.send_extrinsic(xt.hex_encode(), XtStatus::Finalized).unwrap();
    println!("[+] Transaction got finalized. Hash: {:?}\n", tx_hash);

    // Get the index at which Alice's Kitty resides. Alternatively, we could listen to the StoredKitty
    // event similar to what we do in the example_contract.
    let index: u64 = api
        .get_storage_map("Kitty", "KittyIndex", from.public())
        .unwrap();
    println!("[+] Alice's Kitty is at index : {}\n", index);

    // get the Kitty
    let kitty: Kitty = api
        .get_storage_map("Kitty", "Kitties", index)
        .unwrap();
    println!("[+] Cute decoded Kitty: {:?}\n", kitty);
}

pub fn get_node_url_from_cli() -> String {
    let yml = load_yaml!("cli.yml");
    let matches = App::from_yaml(yml).get_matches();

    let node_ip = matches.value_of("node-server").unwrap_or("127.0.0.1");
    let node_port = matches.value_of("node-port").unwrap_or("9944");
    let url = format!("{}:{}", node_ip, node_port);
    println!("Interacting with node on {}\n", url);
    url
}
