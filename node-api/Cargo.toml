[package]
name = "ac-node-api"
version = "1.18.0"
authors = ["Supercomputing Systems AG <info@scs.ch>"]
license = "Apache-2.0"
edition = "2021"
repository = "https://github.com/scs/substrate-api-client"
description = "Substrate node type definitions and helpers for the substrate-api-client"
readme = "README.md"
categories = ["no-std"]

[dependencies]
bitvec = { workspace = true }
codec = { workspace = true }
derive_more = { workspace = true }
either = { workspace = true }
frame-metadata = { workspace = true, features = ["current", "serde_full", "decode"] }
hex = { workspace = true }
log = { workspace = true }
scale-decode = { workspace = true, features = ["primitive-types", "derive"] }
scale-encode = { workspace = true, features = ["bits", "primitive-types", "derive"] }
scale-info = { workspace = true, features = ["derive", "decode", "bitvec"] }
scale-value = { workspace = true }
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true, features = ["alloc"] }

# substrate
sp-core = { workspace = true, features = ["full_crypto", "serde"] }
sp-crypto-hashing = { workspace = true }
sp-runtime = { workspace = true, features = ["serde"] }
sp-storage = { workspace = true, features = ["serde"] }

# need to add this for `no_std`
sp-application-crypto = { workspace = true, features = ["full_crypto"] }
sp-runtime-interface = { workspace = true }

[dev-dependencies]
test-case = { workspace = true }

[features]
default = ["std"]
# To support `no_std` builds in non-32 bit environments.
disable_target_static_assertions = [
    "sp-runtime-interface/disable_target_static_assertions",
]
std = [
    "bitvec/std",
    "codec/std",
    "either/default",
    "frame-metadata/std",
    "hex/std",
    "log/std",
    "scale-info/std",
    "serde/std",
    "serde_json/std",
    # substrate
    "sp-core/std",
    "sp-runtime/std",
    # no_std support
    "sp-application-crypto/std",
    "sp-runtime-interface/std",
    "sp-storage/std",
]
# Enable import of test_utils also outside of crate (feature test does not allow to do so).
mocks = []
