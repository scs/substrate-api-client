RuntimeMetadataV15 { types: PortableRegistry { types: [PortableType { id: 0, ty: Type { path: Path { segments: ["sp_core", "crypto", "AccountId32"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }] }), docs: [] } }, PortableType { id: 1, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 32, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 2, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Primitive(U8), docs: [] } }, PortableType { id: 3, ty: Type { path: Path { segments: ["frame_system", "AccountInfo"] }, type_params: [TypeParameter { name: "Nonce", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "AccountData", ty: Some(UntrackedSymbol { id: 5, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("nonce"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Nonce"), docs: [] }, Field { name: Some("consumers"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RefCount"), docs: [] }, Field { name: Some("providers"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RefCount"), docs: [] }, Field { name: Some("sufficients"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RefCount"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 5, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountData"), docs: [] }] }), docs: [] } }, PortableType { id: 4, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Primitive(U32), docs: [] } }, PortableType { id: 5, ty: Type { path: Path { segments: ["pallet_balances", "types", "AccountData"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("free"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("reserved"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("frozen"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("flags"), ty: UntrackedSymbol { id: 7, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ExtraFlags"), docs: [] }] }), docs: [] } }, PortableType { id: 6, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Primitive(U128), docs: [] } }, PortableType { id: 7, ty: Type { path: Path { segments: ["pallet_balances", "types", "ExtraFlags"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }] }), docs: [] } }, PortableType { id: 8, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Primitive(Bool), docs: [] } }, PortableType { id: 9, ty: Type { path: Path { segments: ["frame_support", "dispatch", "PerDispatchClass"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("normal"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }, Field { name: Some("operational"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }, Field { name: Some("mandatory"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }] }), docs: [] } }, PortableType { id: 10, ty: Type { path: Path { segments: ["sp_weights", "weight_v2", "Weight"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("ref_time"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("proof_size"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }] }), docs: [] } }, PortableType { id: 11, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Compact(TypeDefCompact { type_param: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 12, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Primitive(U64), docs: [] } }, PortableType { id: 13, ty: Type { path: Path { segments: ["primitive_types", "H256"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }] }), docs: [] } }, PortableType { id: 14, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 15, ty: Type { path: Path { segments: ["sp_runtime", "generic", "digest", "Digest"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("logs"), ty: UntrackedSymbol { id: 16, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<DigestItem>"), docs: [] }] }), docs: [] } }, PortableType { id: 16, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 17, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 17, ty: Type { path: Path { segments: ["sp_runtime", "generic", "digest", "DigestItem"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "PreRuntime", fields: [Field { name: None, ty: UntrackedSymbol { id: 18, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ConsensusEngineId"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 6, docs: [] }, Variant { name: "Consensus", fields: [Field { name: None, ty: UntrackedSymbol { id: 18, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ConsensusEngineId"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 4, docs: [] }, Variant { name: "Seal", fields: [Field { name: None, ty: UntrackedSymbol { id: 18, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ConsensusEngineId"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 5, docs: [] }, Variant { name: "Other", fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 0, docs: [] }, Variant { name: "RuntimeEnvironmentUpdated", fields: [], index: 8, docs: [] }] }), docs: [] } }, PortableType { id: 18, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 4, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 19, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 20, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 20, ty: Type { path: Path { segments: ["frame_system", "EventRecord"] }, type_params: [TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 21, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("phase"), ty: UntrackedSymbol { id: 496, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Phase"), docs: [] }, Field { name: Some("event"), ty: UntrackedSymbol { id: 21, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("E"), docs: [] }, Field { name: Some("topics"), ty: UntrackedSymbol { id: 234, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 21, ty: Type { path: Path { segments: ["rococo_runtime", "RuntimeEvent"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "System", fields: [Field { name: None, ty: UntrackedSymbol { id: 22, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("frame_system::Event<Runtime>"), docs: [] }], index: 0, docs: [] }, Variant { name: "Indices", fields: [Field { name: None, ty: UntrackedSymbol { id: 32, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_indices::Event<Runtime>"), docs: [] }], index: 3, docs: [] }, Variant { name: "Balances", fields: [Field { name: None, ty: UntrackedSymbol { id: 33, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_balances::Event<Runtime>"), docs: [] }], index: 4, docs: [] }, Variant { name: "Parameters", fields: [Field { name: None, ty: UntrackedSymbol { id: 35, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_parameters::Event<Runtime>"), docs: [] }], index: 6, docs: [] }, Variant { name: "TransactionPayment", fields: [Field { name: None, ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_transaction_payment::Event<Runtime>"), docs: [] }], index: 33, docs: [] }, Variant { name: "Offences", fields: [Field { name: None, ty: UntrackedSymbol { id: 49, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_offences::Event"), docs: [] }], index: 7, docs: [] }, Variant { name: "Session", fields: [Field { name: None, ty: UntrackedSymbol { id: 51, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_session::Event"), docs: [] }], index: 8, docs: [] }, Variant { name: "Grandpa", fields: [Field { name: None, ty: UntrackedSymbol { id: 52, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_grandpa::Event"), docs: [] }], index: 10, docs: [] }, Variant { name: "Treasury", fields: [Field { name: None, ty: UntrackedSymbol { id: 56, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_treasury::Event<Runtime>"), docs: [] }], index: 18, docs: [] }, Variant { name: "ConvictionVoting", fields: [Field { name: None, ty: UntrackedSymbol { id: 98, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_conviction_voting::Event<Runtime>"), docs: [] }], index: 20, docs: [] }, Variant { name: "Referenda", fields: [Field { name: None, ty: UntrackedSymbol { id: 102, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_referenda::Event<Runtime>"), docs: [] }], index: 21, docs: [] }, Variant { name: "FellowshipCollective", fields: [Field { name: None, ty: UntrackedSymbol { id: 442, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_ranked_collective::Event<Runtime, pallet_ranked_collective::\nInstance1>"), docs: [] }], index: 22, docs: [] }, Variant { name: "FellowshipReferenda", fields: [Field { name: None, ty: UntrackedSymbol { id: 445, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_referenda::Event<Runtime, pallet_referenda::Instance2>"), docs: [] }], index: 23, docs: [] }, Variant { name: "Whitelist", fields: [Field { name: None, ty: UntrackedSymbol { id: 446, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_whitelist::Event<Runtime>"), docs: [] }], index: 44, docs: [] }, Variant { name: "Claims", fields: [Field { name: None, ty: UntrackedSymbol { id: 450, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("claims::Event<Runtime>"), docs: [] }], index: 19, docs: [] }, Variant { name: "Utility", fields: [Field { name: None, ty: UntrackedSymbol { id: 451, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_utility::Event"), docs: [] }], index: 24, docs: [] }, Variant { name: "Identity", fields: [Field { name: None, ty: UntrackedSymbol { id: 453, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_identity::Event<Runtime>"), docs: [] }], index: 25, docs: [] }, Variant { name: "Society", fields: [Field { name: None, ty: UntrackedSymbol { id: 454, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_society::Event<Runtime>"), docs: [] }], index: 26, docs: [] }, Variant { name: "Recovery", fields: [Field { name: None, ty: UntrackedSymbol { id: 456, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_recovery::Event<Runtime>"), docs: [] }], index: 27, docs: [] }, Variant { name: "Vesting", fields: [Field { name: None, ty: UntrackedSymbol { id: 457, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_vesting::Event<Runtime>"), docs: [] }], index: 28, docs: [] }, Variant { name: "Scheduler", fields: [Field { name: None, ty: UntrackedSymbol { id: 458, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_scheduler::Event<Runtime>"), docs: [] }], index: 29, docs: [] }, Variant { name: "Proxy", fields: [Field { name: None, ty: UntrackedSymbol { id: 460, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_proxy::Event<Runtime>"), docs: [] }], index: 30, docs: [] }, Variant { name: "Multisig", fields: [Field { name: None, ty: UntrackedSymbol { id: 461, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_multisig::Event<Runtime>"), docs: [] }], index: 31, docs: [] }, Variant { name: "Preimage", fields: [Field { name: None, ty: UntrackedSymbol { id: 462, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_preimage::Event<Runtime>"), docs: [] }], index: 32, docs: [] }, Variant { name: "AssetRate", fields: [Field { name: None, ty: UntrackedSymbol { id: 463, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_asset_rate::Event<Runtime>"), docs: [] }], index: 39, docs: [] }, Variant { name: "Bounties", fields: [Field { name: None, ty: UntrackedSymbol { id: 464, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_bounties::Event<Runtime>"), docs: [] }], index: 35, docs: [] }, Variant { name: "ChildBounties", fields: [Field { name: None, ty: UntrackedSymbol { id: 465, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_child_bounties::Event<Runtime>"), docs: [] }], index: 40, docs: [] }, Variant { name: "Nis", fields: [Field { name: None, ty: UntrackedSymbol { id: 466, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_nis::Event<Runtime>"), docs: [] }], index: 38, docs: [] }, Variant { name: "NisCounterpartBalances", fields: [Field { name: None, ty: UntrackedSymbol { id: 467, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_balances::Event<Runtime, pallet_balances::Instance2>"), docs: [] }], index: 45, docs: [] }, Variant { name: "ParaInclusion", fields: [Field { name: None, ty: UntrackedSymbol { id: 468, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("parachains_inclusion::Event<Runtime>"), docs: [] }], index: 53, docs: [] }, Variant { name: "Paras", fields: [Field { name: None, ty: UntrackedSymbol { id: 472, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("parachains_paras::Event"), docs: [] }], index: 56, docs: [] }, Variant { name: "Hrmp", fields: [Field { name: None, ty: UntrackedSymbol { id: 473, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("parachains_hrmp::Event<Runtime>"), docs: [] }], index: 60, docs: [] }, Variant { name: "ParasDisputes", fields: [Field { name: None, ty: UntrackedSymbol { id: 474, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("parachains_disputes::Event<Runtime>"), docs: [] }], index: 62, docs: [] }, Variant { name: "MessageQueue", fields: [Field { name: None, ty: UntrackedSymbol { id: 477, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_message_queue::Event<Runtime>"), docs: [] }], index: 64, docs: [] }, Variant { name: "OnDemandAssignmentProvider", fields: [Field { name: None, ty: UntrackedSymbol { id: 479, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("parachains_on_demand::Event<Runtime>"), docs: [] }], index: 66, docs: [] }, Variant { name: "Registrar", fields: [Field { name: None, ty: UntrackedSymbol { id: 480, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("paras_registrar::Event<Runtime>"), docs: [] }], index: 70, docs: [] }, Variant { name: "Slots", fields: [Field { name: None, ty: UntrackedSymbol { id: 481, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("slots::Event<Runtime>"), docs: [] }], index: 71, docs: [] }, Variant { name: "Auctions", fields: [Field { name: None, ty: UntrackedSymbol { id: 482, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("auctions::Event<Runtime>"), docs: [] }], index: 72, docs: [] }, Variant { name: "Crowdloan", fields: [Field { name: None, ty: UntrackedSymbol { id: 483, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("crowdloan::Event<Runtime>"), docs: [] }], index: 73, docs: [] }, Variant { name: "Coretime", fields: [Field { name: None, ty: UntrackedSymbol { id: 484, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("coretime::Event<Runtime>"), docs: [] }], index: 74, docs: [] }, Variant { name: "MultiBlockMigrations", fields: [Field { name: None, ty: UntrackedSymbol { id: 485, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_migrations::Event<Runtime>"), docs: [] }], index: 98, docs: [] }, Variant { name: "XcmPallet", fields: [Field { name: None, ty: UntrackedSymbol { id: 486, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_xcm::Event<Runtime>"), docs: [] }], index: 99, docs: [] }, Variant { name: "IdentityMigrator", fields: [Field { name: None, ty: UntrackedSymbol { id: 488, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("identity_migrator::Event<Runtime>"), docs: [] }], index: 248, docs: [] }, Variant { name: "AssignedSlots", fields: [Field { name: None, ty: UntrackedSymbol { id: 489, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("assigned_slots::Event<Runtime>"), docs: [] }], index: 251, docs: [] }, Variant { name: "ValidatorManager", fields: [Field { name: None, ty: UntrackedSymbol { id: 490, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("validator_manager::Event<Runtime>"), docs: [] }], index: 252, docs: [] }, Variant { name: "StateTrieMigration", fields: [Field { name: None, ty: UntrackedSymbol { id: 491, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_state_trie_migration::Event<Runtime>"), docs: [] }], index: 254, docs: [] }, Variant { name: "RootTesting", fields: [Field { name: None, ty: UntrackedSymbol { id: 494, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_root_testing::Event<Runtime>"), docs: [] }], index: 249, docs: [] }, Variant { name: "Sudo", fields: [Field { name: None, ty: UntrackedSymbol { id: 495, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_sudo::Event<Runtime>"), docs: [] }], index: 255, docs: [] }] }), docs: [] } }, PortableType { id: 22, ty: Type { path: Path { segments: ["frame_system", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "ExtrinsicSuccess", fields: [Field { name: Some("dispatch_info"), ty: UntrackedSymbol { id: 23, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchEventInfo"), docs: [] }], index: 0, docs: ["An extrinsic completed successfully."] }, Variant { name: "ExtrinsicFailed", fields: [Field { name: Some("dispatch_error"), ty: UntrackedSymbol { id: 26, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchError"), docs: [] }, Field { name: Some("dispatch_info"), ty: UntrackedSymbol { id: 23, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchEventInfo"), docs: [] }], index: 1, docs: ["An extrinsic failed."] }, Variant { name: "CodeUpdated", fields: [], index: 2, docs: ["`:code` was updated."] }, Variant { name: "NewAccount", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 3, docs: ["A new account was created."] }, Variant { name: "KilledAccount", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 4, docs: ["An account was reaped."] }, Variant { name: "Remarked", fields: [Field { name: Some("sender"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 5, docs: ["On on-chain remark happened."] }, Variant { name: "UpgradeAuthorized", fields: [Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("check_version"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 6, docs: ["An upgrade was authorized."] }] }), docs: ["Event for the System pallet."] } }, PortableType { id: 23, ty: Type { path: Path { segments: ["frame_system", "DispatchEventInfo"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("weight"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("class"), ty: UntrackedSymbol { id: 24, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchClass"), docs: [] }, Field { name: Some("pays_fee"), ty: UntrackedSymbol { id: 25, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Pays"), docs: [] }] }), docs: [] } }, PortableType { id: 24, ty: Type { path: Path { segments: ["frame_support", "dispatch", "DispatchClass"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Normal", fields: [], index: 0, docs: [] }, Variant { name: "Operational", fields: [], index: 1, docs: [] }, Variant { name: "Mandatory", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 25, ty: Type { path: Path { segments: ["frame_support", "dispatch", "Pays"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Yes", fields: [], index: 0, docs: [] }, Variant { name: "No", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 26, ty: Type { path: Path { segments: ["sp_runtime", "DispatchError"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Other", fields: [], index: 0, docs: [] }, Variant { name: "CannotLookup", fields: [], index: 1, docs: [] }, Variant { name: "BadOrigin", fields: [], index: 2, docs: [] }, Variant { name: "Module", fields: [Field { name: None, ty: UntrackedSymbol { id: 27, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ModuleError"), docs: [] }], index: 3, docs: [] }, Variant { name: "ConsumerRemaining", fields: [], index: 4, docs: [] }, Variant { name: "NoProviders", fields: [], index: 5, docs: [] }, Variant { name: "TooManyConsumers", fields: [], index: 6, docs: [] }, Variant { name: "Token", fields: [Field { name: None, ty: UntrackedSymbol { id: 28, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TokenError"), docs: [] }], index: 7, docs: [] }, Variant { name: "Arithmetic", fields: [Field { name: None, ty: UntrackedSymbol { id: 29, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ArithmeticError"), docs: [] }], index: 8, docs: [] }, Variant { name: "Transactional", fields: [Field { name: None, ty: UntrackedSymbol { id: 30, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TransactionalError"), docs: [] }], index: 9, docs: [] }, Variant { name: "Exhausted", fields: [], index: 10, docs: [] }, Variant { name: "Corruption", fields: [], index: 11, docs: [] }, Variant { name: "Unavailable", fields: [], index: 12, docs: [] }, Variant { name: "RootNotAllowed", fields: [], index: 13, docs: [] }, Variant { name: "Trie", fields: [Field { name: None, ty: UntrackedSymbol { id: 31, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TrieError"), docs: [] }], index: 14, docs: [] }] }), docs: [] } }, PortableType { id: 27, ty: Type { path: Path { segments: ["sp_runtime", "ModuleError"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("error"), ty: UntrackedSymbol { id: 18, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; MAX_MODULE_ERROR_ENCODED_SIZE]"), docs: [] }] }), docs: [] } }, PortableType { id: 28, ty: Type { path: Path { segments: ["sp_runtime", "TokenError"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "FundsUnavailable", fields: [], index: 0, docs: [] }, Variant { name: "OnlyProvider", fields: [], index: 1, docs: [] }, Variant { name: "BelowMinimum", fields: [], index: 2, docs: [] }, Variant { name: "CannotCreate", fields: [], index: 3, docs: [] }, Variant { name: "UnknownAsset", fields: [], index: 4, docs: [] }, Variant { name: "Frozen", fields: [], index: 5, docs: [] }, Variant { name: "Unsupported", fields: [], index: 6, docs: [] }, Variant { name: "CannotCreateHold", fields: [], index: 7, docs: [] }, Variant { name: "NotExpendable", fields: [], index: 8, docs: [] }, Variant { name: "Blocked", fields: [], index: 9, docs: [] }] }), docs: [] } }, PortableType { id: 29, ty: Type { path: Path { segments: ["sp_arithmetic", "ArithmeticError"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Underflow", fields: [], index: 0, docs: [] }, Variant { name: "Overflow", fields: [], index: 1, docs: [] }, Variant { name: "DivisionByZero", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 30, ty: Type { path: Path { segments: ["sp_runtime", "TransactionalError"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "LimitReached", fields: [], index: 0, docs: [] }, Variant { name: "NoLayer", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 31, ty: Type { path: Path { segments: ["sp_runtime", "proving_trie", "TrieError"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "InvalidStateRoot", fields: [], index: 0, docs: [] }, Variant { name: "IncompleteDatabase", fields: [], index: 1, docs: [] }, Variant { name: "ValueAtIncompleteKey", fields: [], index: 2, docs: [] }, Variant { name: "DecoderError", fields: [], index: 3, docs: [] }, Variant { name: "InvalidHash", fields: [], index: 4, docs: [] }, Variant { name: "DuplicateKey", fields: [], index: 5, docs: [] }, Variant { name: "ExtraneousNode", fields: [], index: 6, docs: [] }, Variant { name: "ExtraneousValue", fields: [], index: 7, docs: [] }, Variant { name: "ExtraneousHashReference", fields: [], index: 8, docs: [] }, Variant { name: "InvalidChildReference", fields: [], index: 9, docs: [] }, Variant { name: "ValueMismatch", fields: [], index: 10, docs: [] }, Variant { name: "IncompleteProof", fields: [], index: 11, docs: [] }, Variant { name: "RootMismatch", fields: [], index: 12, docs: [] }, Variant { name: "DecodeError", fields: [], index: 13, docs: [] }] }), docs: [] } }, PortableType { id: 32, ty: Type { path: Path { segments: ["pallet_indices", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "IndexAssigned", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountIndex"), docs: [] }], index: 0, docs: ["A account index was assigned."] }, Variant { name: "IndexFreed", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountIndex"), docs: [] }], index: 1, docs: ["A account index has been freed up (unassigned)."] }, Variant { name: "IndexFrozen", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountIndex"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 2, docs: ["A account index has been frozen to its current account ID."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 33, ty: Type { path: Path { segments: ["pallet_balances", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Endowed", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("free_balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 0, docs: ["An account was created with some free balance."] }, Variant { name: "DustLost", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 1, docs: ["An account was removed whose balance was non-zero but below ExistentialDeposit,", "resulting in an outright loss."] }, Variant { name: "Transfer", fields: [Field { name: Some("from"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("to"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 2, docs: ["Transfer succeeded."] }, Variant { name: "BalanceSet", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("free"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 3, docs: ["A balance was set by root."] }, Variant { name: "Reserved", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 4, docs: ["Some balance was reserved (moved from free to reserved)."] }, Variant { name: "Unreserved", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 5, docs: ["Some balance was unreserved (moved from reserved to free)."] }, Variant { name: "ReserveRepatriated", fields: [Field { name: Some("from"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("to"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }, Field { name: Some("destination_status"), ty: UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Status"), docs: [] }], index: 6, docs: ["Some balance was moved from the reserve of the first account to the second account.", "Final argument indicates the destination balance type."] }, Variant { name: "Deposit", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 7, docs: ["Some amount was deposited (e.g. for transaction fees)."] }, Variant { name: "Withdraw", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 8, docs: ["Some amount was withdrawn from the account (e.g. for transaction fees)."] }, Variant { name: "Slashed", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 9, docs: ["Some amount was removed from the account (e.g. for misbehavior)."] }, Variant { name: "Minted", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 10, docs: ["Some amount was minted into an account."] }, Variant { name: "Burned", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 11, docs: ["Some amount was burned from an account."] }, Variant { name: "Suspended", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 12, docs: ["Some amount was suspended from an account (it can be restored later)."] }, Variant { name: "Restored", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 13, docs: ["Some amount was restored into an account."] }, Variant { name: "Upgraded", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 14, docs: ["An account was upgraded."] }, Variant { name: "Issued", fields: [Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 15, docs: ["Total issuance was increased by `amount`, creating a credit to be balanced."] }, Variant { name: "Rescinded", fields: [Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 16, docs: ["Total issuance was decreased by `amount`, creating a debt to be balanced."] }, Variant { name: "Locked", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 17, docs: ["Some balance was locked."] }, Variant { name: "Unlocked", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 18, docs: ["Some balance was unlocked."] }, Variant { name: "Frozen", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 19, docs: ["Some balance was frozen."] }, Variant { name: "Thawed", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 20, docs: ["Some balance was thawed."] }, Variant { name: "TotalIssuanceForced", fields: [Field { name: Some("old"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }, Field { name: Some("new"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 21, docs: ["The `TotalIssuance` was forcefully changed."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 34, ty: Type { path: Path { segments: ["frame_support", "traits", "tokens", "misc", "BalanceStatus"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Free", fields: [], index: 0, docs: [] }, Variant { name: "Reserved", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 35, ty: Type { path: Path { segments: ["pallet_parameters", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Updated", fields: [Field { name: Some("key"), ty: UntrackedSymbol { id: 36, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<T::RuntimeParameters as AggregatedKeyValue>::Key"), docs: ["The key that was updated."] }, Field { name: Some("old_value"), ty: UntrackedSymbol { id: 43, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<<T::RuntimeParameters as AggregatedKeyValue>::Value>"), docs: ["The old value before this call."] }, Field { name: Some("new_value"), ty: UntrackedSymbol { id: 43, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<<T::RuntimeParameters as AggregatedKeyValue>::Value>"), docs: ["The new value after this call."] }], index: 0, docs: ["A Parameter was set.", "", "Is also emitted when the value was not changed."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 36, ty: Type { path: Path { segments: ["rococo_runtime", "RuntimeParametersKey"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Nis", fields: [Field { name: None, ty: UntrackedSymbol { id: 37, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<dynamic_params::nis::Parameters as frame_support::traits::\ndynamic_params::AggregatedKeyValue>::Key"), docs: [] }], index: 0, docs: [] }, Variant { name: "Preimage", fields: [Field { name: None, ty: UntrackedSymbol { id: 40, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<dynamic_params::preimage::Parameters as frame_support::traits::\ndynamic_params::AggregatedKeyValue>::Key"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 37, ty: Type { path: Path { segments: ["rococo_runtime", "dynamic_params", "nis", "ParametersKey"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Target", fields: [Field { name: None, ty: UntrackedSymbol { id: 38, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Target"), docs: [] }], index: 0, docs: [] }, Variant { name: "MinBid", fields: [Field { name: None, ty: UntrackedSymbol { id: 39, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MinBid"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 38, ty: Type { path: Path { segments: ["rococo_runtime", "dynamic_params", "nis", "Target"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 39, ty: Type { path: Path { segments: ["rococo_runtime", "dynamic_params", "nis", "MinBid"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 40, ty: Type { path: Path { segments: ["rococo_runtime", "dynamic_params", "preimage", "ParametersKey"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "BaseDeposit", fields: [Field { name: None, ty: UntrackedSymbol { id: 41, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BaseDeposit"), docs: [] }], index: 0, docs: [] }, Variant { name: "ByteDeposit", fields: [Field { name: None, ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ByteDeposit"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 41, ty: Type { path: Path { segments: ["rococo_runtime", "dynamic_params", "preimage", "BaseDeposit"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 42, ty: Type { path: Path { segments: ["rococo_runtime", "dynamic_params", "preimage", "ByteDeposit"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 43, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 44, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 44, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 44, ty: Type { path: Path { segments: ["rococo_runtime", "RuntimeParametersValue"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Nis", fields: [Field { name: None, ty: UntrackedSymbol { id: 45, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<dynamic_params::nis::Parameters as frame_support::traits::\ndynamic_params::AggregatedKeyValue>::Value"), docs: [] }], index: 0, docs: [] }, Variant { name: "Preimage", fields: [Field { name: None, ty: UntrackedSymbol { id: 47, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<dynamic_params::preimage::Parameters as frame_support::traits::\ndynamic_params::AggregatedKeyValue>::Value"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 45, ty: Type { path: Path { segments: ["rococo_runtime", "dynamic_params", "nis", "ParametersValue"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Target", fields: [Field { name: None, ty: UntrackedSymbol { id: 46, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Perquintill"), docs: [] }], index: 0, docs: [] }, Variant { name: "MinBid", fields: [Field { name: None, ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 46, ty: Type { path: Path { segments: ["sp_arithmetic", "per_things", "Perquintill"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }] }), docs: [] } }, PortableType { id: 47, ty: Type { path: Path { segments: ["rococo_runtime", "dynamic_params", "preimage", "ParametersValue"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "BaseDeposit", fields: [Field { name: None, ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }], index: 0, docs: [] }, Variant { name: "ByteDeposit", fields: [Field { name: None, ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 48, ty: Type { path: Path { segments: ["pallet_transaction_payment", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "TransactionFeePaid", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("actual_fee"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("tip"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 0, docs: ["A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,", "has been paid by `who`."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 49, ty: Type { path: Path { segments: ["pallet_offences", "pallet", "Event"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Offence", fields: [Field { name: Some("kind"), ty: UntrackedSymbol { id: 50, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Kind"), docs: [] }, Field { name: Some("timeslot"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OpaqueTimeSlot"), docs: [] }], index: 0, docs: ["There is an offence reported of the given `kind` happened at the `session_index` and", "(kind-specific) time slot. This event is not deposited for duplicate slashes.", "\\[kind, timeslot\\]."] }] }), docs: ["Events type."] } }, PortableType { id: 50, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 16, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 51, ty: Type { path: Path { segments: ["pallet_session", "pallet", "Event"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NewSession", fields: [Field { name: Some("session_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SessionIndex"), docs: [] }], index: 0, docs: ["New session has happened. Note that the argument is the session index, not the", "block number as the type might suggest."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 52, ty: Type { path: Path { segments: ["pallet_grandpa", "pallet", "Event"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NewAuthorities", fields: [Field { name: Some("authority_set"), ty: UntrackedSymbol { id: 53, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AuthorityList"), docs: [] }], index: 0, docs: ["New authority set has been applied."] }, Variant { name: "Paused", fields: [], index: 1, docs: ["Current authority set has been paused."] }, Variant { name: "Resumed", fields: [], index: 2, docs: ["Current authority set has been resumed."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 53, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 54, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 54, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 55, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 55, ty: Type { path: Path { segments: ["sp_consensus_grandpa", "app", "Public"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ed25519::Public"), docs: [] }] }), docs: [] } }, PortableType { id: 56, ty: Type { path: Path { segments: ["pallet_treasury", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Spending", fields: [Field { name: Some("budget_remaining"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], index: 0, docs: ["We have ended a spend period and will now allocate funds."] }, Variant { name: "Awarded", fields: [Field { name: Some("proposal_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }, Field { name: Some("award"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }, Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 1, docs: ["Some funds have been allocated."] }, Variant { name: "Burnt", fields: [Field { name: Some("burnt_funds"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], index: 2, docs: ["Some of our funds have been burnt."] }, Variant { name: "Rollover", fields: [Field { name: Some("rollover_balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], index: 3, docs: ["Spending has finished; this is the amount that rolls over until next spend."] }, Variant { name: "Deposit", fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], index: 4, docs: ["Some funds have been deposited."] }, Variant { name: "SpendApproved", fields: [Field { name: Some("proposal_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 5, docs: ["A new spend proposal has been approved."] }, Variant { name: "UpdatedInactive", fields: [Field { name: Some("reactivated"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }, Field { name: Some("deactivated"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], index: 6, docs: ["The inactive funds of the pallet have been updated."] }, Variant { name: "AssetSpendApproved", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SpendIndex"), docs: [] }, Field { name: Some("asset_kind"), ty: UntrackedSymbol { id: 57, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetKind"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetBalanceOf<T, I>"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Beneficiary"), docs: [] }, Field { name: Some("valid_from"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T, I>"), docs: [] }, Field { name: Some("expire_at"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T, I>"), docs: [] }], index: 7, docs: ["A new asset spend proposal has been approved."] }, Variant { name: "AssetSpendVoided", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SpendIndex"), docs: [] }], index: 8, docs: ["An approved spend was voided."] }, Variant { name: "Paid", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SpendIndex"), docs: [] }, Field { name: Some("payment_id"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<T::Paymaster as Pay>::Id"), docs: [] }], index: 9, docs: ["A payment happened."] }, Variant { name: "PaymentFailed", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SpendIndex"), docs: [] }, Field { name: Some("payment_id"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<T::Paymaster as Pay>::Id"), docs: [] }], index: 10, docs: ["A payment failed and can be retried."] }, Variant { name: "SpendProcessed", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SpendIndex"), docs: [] }], index: 11, docs: ["A spend was processed and removed from the storage. It might have been successfully", "paid or it may have expired."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 57, ty: Type { path: Path { segments: ["polkadot_runtime_common", "impls", "VersionedLocatableAsset"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "V3", fields: [Field { name: Some("location"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("xcm::v3::Location"), docs: [] }, Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 68, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("xcm::v3::AssetId"), docs: [] }], index: 3, docs: [] }, Variant { name: "V4", fields: [Field { name: Some("location"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("xcm::v4::Location"), docs: [] }, Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 82, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("xcm::v4::AssetId"), docs: [] }], index: 4, docs: [] }, Variant { name: "V5", fields: [Field { name: Some("location"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("xcm::v5::Location"), docs: [] }, Field { name: Some("asset_id"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("xcm::v5::AssetId"), docs: [] }], index: 5, docs: [] }] }), docs: [] } }, PortableType { id: 58, ty: Type { path: Path { segments: ["staging_xcm", "v3", "multilocation", "MultiLocation"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("parents"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("interior"), ty: UntrackedSymbol { id: 59, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junctions"), docs: [] }] }), docs: [] } }, PortableType { id: 59, ty: Type { path: Path { segments: ["xcm", "v3", "junctions", "Junctions"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Here", fields: [], index: 0, docs: [] }, Variant { name: "X1", fields: [Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }], index: 1, docs: [] }, Variant { name: "X2", fields: [Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }], index: 2, docs: [] }, Variant { name: "X3", fields: [Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }], index: 3, docs: [] }, Variant { name: "X4", fields: [Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }], index: 4, docs: [] }, Variant { name: "X5", fields: [Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }], index: 5, docs: [] }, Variant { name: "X6", fields: [Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }], index: 6, docs: [] }, Variant { name: "X7", fields: [Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }], index: 7, docs: [] }, Variant { name: "X8", fields: [Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }], index: 8, docs: [] }] }), docs: [] } }, PortableType { id: 60, ty: Type { path: Path { segments: ["xcm", "v3", "junction", "Junction"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Parachain", fields: [Field { name: None, ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 0, docs: [] }, Variant { name: "AccountId32", fields: [Field { name: Some("network"), ty: UntrackedSymbol { id: 62, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<NetworkId>"), docs: [] }, Field { name: Some("id"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 1, docs: [] }, Variant { name: "AccountIndex64", fields: [Field { name: Some("network"), ty: UntrackedSymbol { id: 62, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<NetworkId>"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }], index: 2, docs: [] }, Variant { name: "AccountKey20", fields: [Field { name: Some("network"), ty: UntrackedSymbol { id: 62, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<NetworkId>"), docs: [] }, Field { name: Some("key"), ty: UntrackedSymbol { id: 64, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 20]"), docs: [] }], index: 3, docs: [] }, Variant { name: "PalletInstance", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }], index: 4, docs: [] }, Variant { name: "GeneralIndex", fields: [Field { name: None, ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }], index: 5, docs: [] }, Variant { name: "GeneralKey", fields: [Field { name: Some("length"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 6, docs: [] }, Variant { name: "OnlyChild", fields: [], index: 7, docs: [] }, Variant { name: "Plurality", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 66, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BodyId"), docs: [] }, Field { name: Some("part"), ty: UntrackedSymbol { id: 67, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BodyPart"), docs: [] }], index: 8, docs: [] }, Variant { name: "GlobalConsensus", fields: [Field { name: None, ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("NetworkId"), docs: [] }], index: 9, docs: [] }] }), docs: [] } }, PortableType { id: 61, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Compact(TypeDefCompact { type_param: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 62, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 63, ty: Type { path: Path { segments: ["xcm", "v3", "junction", "NetworkId"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "ByGenesis", fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 0, docs: [] }, Variant { name: "ByFork", fields: [Field { name: Some("block_number"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("block_hash"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 1, docs: [] }, Variant { name: "Polkadot", fields: [], index: 2, docs: [] }, Variant { name: "Kusama", fields: [], index: 3, docs: [] }, Variant { name: "Westend", fields: [], index: 4, docs: [] }, Variant { name: "Rococo", fields: [], index: 5, docs: [] }, Variant { name: "Wococo", fields: [], index: 6, docs: [] }, Variant { name: "Ethereum", fields: [Field { name: Some("chain_id"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }], index: 7, docs: [] }, Variant { name: "BitcoinCore", fields: [], index: 8, docs: [] }, Variant { name: "BitcoinCash", fields: [], index: 9, docs: [] }, Variant { name: "PolkadotBulletin", fields: [], index: 10, docs: [] }] }), docs: [] } }, PortableType { id: 64, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 20, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 65, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Compact(TypeDefCompact { type_param: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 66, ty: Type { path: Path { segments: ["xcm", "v3", "junction", "BodyId"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Unit", fields: [], index: 0, docs: [] }, Variant { name: "Moniker", fields: [Field { name: None, ty: UntrackedSymbol { id: 18, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 4]"), docs: [] }], index: 1, docs: [] }, Variant { name: "Index", fields: [Field { name: None, ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 2, docs: [] }, Variant { name: "Executive", fields: [], index: 3, docs: [] }, Variant { name: "Technical", fields: [], index: 4, docs: [] }, Variant { name: "Legislative", fields: [], index: 5, docs: [] }, Variant { name: "Judicial", fields: [], index: 6, docs: [] }, Variant { name: "Defense", fields: [], index: 7, docs: [] }, Variant { name: "Administration", fields: [], index: 8, docs: [] }, Variant { name: "Treasury", fields: [], index: 9, docs: [] }] }), docs: [] } }, PortableType { id: 67, ty: Type { path: Path { segments: ["xcm", "v3", "junction", "BodyPart"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Voice", fields: [], index: 0, docs: [] }, Variant { name: "Members", fields: [Field { name: Some("count"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 1, docs: [] }, Variant { name: "Fraction", fields: [Field { name: Some("nom"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("denom"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 2, docs: [] }, Variant { name: "AtLeastProportion", fields: [Field { name: Some("nom"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("denom"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 3, docs: [] }, Variant { name: "MoreThanProportion", fields: [Field { name: Some("nom"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("denom"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 4, docs: [] }] }), docs: [] } }, PortableType { id: 68, ty: Type { path: Path { segments: ["xcm", "v3", "multiasset", "AssetId"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Concrete", fields: [Field { name: None, ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }], index: 0, docs: [] }, Variant { name: "Abstract", fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 69, ty: Type { path: Path { segments: ["staging_xcm", "v4", "location", "Location"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("parents"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("interior"), ty: UntrackedSymbol { id: 70, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junctions"), docs: [] }] }), docs: [] } }, PortableType { id: 70, ty: Type { path: Path { segments: ["staging_xcm", "v4", "junctions", "Junctions"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Here", fields: [], index: 0, docs: [] }, Variant { name: "X1", fields: [Field { name: None, ty: UntrackedSymbol { id: 71, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Arc<[Junction; 1]>"), docs: [] }], index: 1, docs: [] }, Variant { name: "X2", fields: [Field { name: None, ty: UntrackedSymbol { id: 75, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Arc<[Junction; 2]>"), docs: [] }], index: 2, docs: [] }, Variant { name: "X3", fields: [Field { name: None, ty: UntrackedSymbol { id: 76, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Arc<[Junction; 3]>"), docs: [] }], index: 3, docs: [] }, Variant { name: "X4", fields: [Field { name: None, ty: UntrackedSymbol { id: 77, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Arc<[Junction; 4]>"), docs: [] }], index: 4, docs: [] }, Variant { name: "X5", fields: [Field { name: None, ty: UntrackedSymbol { id: 78, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Arc<[Junction; 5]>"), docs: [] }], index: 5, docs: [] }, Variant { name: "X6", fields: [Field { name: None, ty: UntrackedSymbol { id: 79, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Arc<[Junction; 6]>"), docs: [] }], index: 6, docs: [] }, Variant { name: "X7", fields: [Field { name: None, ty: UntrackedSymbol { id: 80, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Arc<[Junction; 7]>"), docs: [] }], index: 7, docs: [] }, Variant { name: "X8", fields: [Field { name: None, ty: UntrackedSymbol { id: 81, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Arc<[Junction; 8]>"), docs: [] }], index: 8, docs: [] }] }), docs: [] } }, PortableType { id: 71, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 1, type_param: UntrackedSymbol { id: 72, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 72, ty: Type { path: Path { segments: ["staging_xcm", "v4", "junction", "Junction"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Parachain", fields: [Field { name: None, ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 0, docs: [] }, Variant { name: "AccountId32", fields: [Field { name: Some("network"), ty: UntrackedSymbol { id: 73, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<NetworkId>"), docs: [] }, Field { name: Some("id"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 1, docs: [] }, Variant { name: "AccountIndex64", fields: [Field { name: Some("network"), ty: UntrackedSymbol { id: 73, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<NetworkId>"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }], index: 2, docs: [] }, Variant { name: "AccountKey20", fields: [Field { name: Some("network"), ty: UntrackedSymbol { id: 73, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<NetworkId>"), docs: [] }, Field { name: Some("key"), ty: UntrackedSymbol { id: 64, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 20]"), docs: [] }], index: 3, docs: [] }, Variant { name: "PalletInstance", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }], index: 4, docs: [] }, Variant { name: "GeneralIndex", fields: [Field { name: None, ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }], index: 5, docs: [] }, Variant { name: "GeneralKey", fields: [Field { name: Some("length"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 6, docs: [] }, Variant { name: "OnlyChild", fields: [], index: 7, docs: [] }, Variant { name: "Plurality", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 66, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BodyId"), docs: [] }, Field { name: Some("part"), ty: UntrackedSymbol { id: 67, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BodyPart"), docs: [] }], index: 8, docs: [] }, Variant { name: "GlobalConsensus", fields: [Field { name: None, ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("NetworkId"), docs: [] }], index: 9, docs: [] }] }), docs: [] } }, PortableType { id: 73, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 74, ty: Type { path: Path { segments: ["staging_xcm", "v4", "junction", "NetworkId"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "ByGenesis", fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 0, docs: [] }, Variant { name: "ByFork", fields: [Field { name: Some("block_number"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("block_hash"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 1, docs: [] }, Variant { name: "Polkadot", fields: [], index: 2, docs: [] }, Variant { name: "Kusama", fields: [], index: 3, docs: [] }, Variant { name: "Westend", fields: [], index: 4, docs: [] }, Variant { name: "Rococo", fields: [], index: 5, docs: [] }, Variant { name: "Wococo", fields: [], index: 6, docs: [] }, Variant { name: "Ethereum", fields: [Field { name: Some("chain_id"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }], index: 7, docs: [] }, Variant { name: "BitcoinCore", fields: [], index: 8, docs: [] }, Variant { name: "BitcoinCash", fields: [], index: 9, docs: [] }, Variant { name: "PolkadotBulletin", fields: [], index: 10, docs: [] }] }), docs: [] } }, PortableType { id: 75, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 2, type_param: UntrackedSymbol { id: 72, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 76, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 3, type_param: UntrackedSymbol { id: 72, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 77, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 4, type_param: UntrackedSymbol { id: 72, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 78, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 5, type_param: UntrackedSymbol { id: 72, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 79, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 6, type_param: UntrackedSymbol { id: 72, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 80, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 7, type_param: UntrackedSymbol { id: 72, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 81, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 8, type_param: UntrackedSymbol { id: 72, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 82, ty: Type { path: Path { segments: ["staging_xcm", "v4", "asset", "AssetId"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }] }), docs: [] } }, PortableType { id: 83, ty: Type { path: Path { segments: ["staging_xcm", "v5", "location", "Location"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("parents"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("interior"), ty: UntrackedSymbol { id: 84, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junctions"), docs: [] }] }), docs: [] } }, PortableType { id: 84, ty: Type { path: Path { segments: ["staging_xcm", "v5", "junctions", "Junctions"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Here", fields: [], index: 0, docs: [] }, Variant { name: "X1", fields: [Field { name: None, ty: UntrackedSymbol { id: 85, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Arc<[Junction; 1]>"), docs: [] }], index: 1, docs: [] }, Variant { name: "X2", fields: [Field { name: None, ty: UntrackedSymbol { id: 89, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Arc<[Junction; 2]>"), docs: [] }], index: 2, docs: [] }, Variant { name: "X3", fields: [Field { name: None, ty: UntrackedSymbol { id: 90, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Arc<[Junction; 3]>"), docs: [] }], index: 3, docs: [] }, Variant { name: "X4", fields: [Field { name: None, ty: UntrackedSymbol { id: 91, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Arc<[Junction; 4]>"), docs: [] }], index: 4, docs: [] }, Variant { name: "X5", fields: [Field { name: None, ty: UntrackedSymbol { id: 92, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Arc<[Junction; 5]>"), docs: [] }], index: 5, docs: [] }, Variant { name: "X6", fields: [Field { name: None, ty: UntrackedSymbol { id: 93, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Arc<[Junction; 6]>"), docs: [] }], index: 6, docs: [] }, Variant { name: "X7", fields: [Field { name: None, ty: UntrackedSymbol { id: 94, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Arc<[Junction; 7]>"), docs: [] }], index: 7, docs: [] }, Variant { name: "X8", fields: [Field { name: None, ty: UntrackedSymbol { id: 95, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Arc<[Junction; 8]>"), docs: [] }], index: 8, docs: [] }] }), docs: [] } }, PortableType { id: 85, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 1, type_param: UntrackedSymbol { id: 86, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 86, ty: Type { path: Path { segments: ["staging_xcm", "v5", "junction", "Junction"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Parachain", fields: [Field { name: None, ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 0, docs: [] }, Variant { name: "AccountId32", fields: [Field { name: Some("network"), ty: UntrackedSymbol { id: 87, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<NetworkId>"), docs: [] }, Field { name: Some("id"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 1, docs: [] }, Variant { name: "AccountIndex64", fields: [Field { name: Some("network"), ty: UntrackedSymbol { id: 87, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<NetworkId>"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }], index: 2, docs: [] }, Variant { name: "AccountKey20", fields: [Field { name: Some("network"), ty: UntrackedSymbol { id: 87, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<NetworkId>"), docs: [] }, Field { name: Some("key"), ty: UntrackedSymbol { id: 64, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 20]"), docs: [] }], index: 3, docs: [] }, Variant { name: "PalletInstance", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }], index: 4, docs: [] }, Variant { name: "GeneralIndex", fields: [Field { name: None, ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }], index: 5, docs: [] }, Variant { name: "GeneralKey", fields: [Field { name: Some("length"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 6, docs: [] }, Variant { name: "OnlyChild", fields: [], index: 7, docs: [] }, Variant { name: "Plurality", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 66, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BodyId"), docs: [] }, Field { name: Some("part"), ty: UntrackedSymbol { id: 67, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BodyPart"), docs: [] }], index: 8, docs: [] }, Variant { name: "GlobalConsensus", fields: [Field { name: None, ty: UntrackedSymbol { id: 88, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("NetworkId"), docs: [] }], index: 9, docs: [] }] }), docs: [] } }, PortableType { id: 87, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 88, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 88, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 88, ty: Type { path: Path { segments: ["staging_xcm", "v5", "junction", "NetworkId"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "ByGenesis", fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 0, docs: [] }, Variant { name: "ByFork", fields: [Field { name: Some("block_number"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("block_hash"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 1, docs: [] }, Variant { name: "Polkadot", fields: [], index: 2, docs: [] }, Variant { name: "Kusama", fields: [], index: 3, docs: [] }, Variant { name: "Ethereum", fields: [Field { name: Some("chain_id"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }], index: 7, docs: [] }, Variant { name: "BitcoinCore", fields: [], index: 8, docs: [] }, Variant { name: "BitcoinCash", fields: [], index: 9, docs: [] }, Variant { name: "PolkadotBulletin", fields: [], index: 10, docs: [] }] }), docs: [] } }, PortableType { id: 89, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 2, type_param: UntrackedSymbol { id: 86, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 90, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 3, type_param: UntrackedSymbol { id: 86, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 91, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 4, type_param: UntrackedSymbol { id: 86, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 92, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 5, type_param: UntrackedSymbol { id: 86, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 93, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 6, type_param: UntrackedSymbol { id: 86, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 94, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 7, type_param: UntrackedSymbol { id: 86, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 95, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 8, type_param: UntrackedSymbol { id: 86, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 96, ty: Type { path: Path { segments: ["staging_xcm", "v5", "asset", "AssetId"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }] }), docs: [] } }, PortableType { id: 97, ty: Type { path: Path { segments: ["xcm", "VersionedLocation"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "V3", fields: [Field { name: None, ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("v3::MultiLocation"), docs: [] }], index: 3, docs: [] }, Variant { name: "V4", fields: [Field { name: None, ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("v4::Location"), docs: [] }], index: 4, docs: [] }, Variant { name: "V5", fields: [Field { name: None, ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("v5::Location"), docs: [] }], index: 5, docs: [] }] }), docs: [] } }, PortableType { id: 98, ty: Type { path: Path { segments: ["pallet_conviction_voting", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Delegated", fields: [Field { name: None, ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 0, docs: ["An account has delegated their vote to another account. \\[who, target\\]"] }, Variant { name: "Undelegated", fields: [Field { name: None, ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 1, docs: ["An \\[account\\] has cancelled a previous delegation operation."] }, Variant { name: "Voted", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("vote"), ty: UntrackedSymbol { id: 99, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountVote<BalanceOf<T, I>>"), docs: [] }], index: 2, docs: ["An account has voted"] }, Variant { name: "VoteRemoved", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("vote"), ty: UntrackedSymbol { id: 99, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountVote<BalanceOf<T, I>>"), docs: [] }], index: 3, docs: ["A vote has been removed"] }, Variant { name: "VoteUnlocked", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("class"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ClassOf<T, I>"), docs: [] }], index: 4, docs: ["The lockup period of a conviction vote expired, and the funds have been unlocked."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 99, ty: Type { path: Path { segments: ["pallet_conviction_voting", "vote", "AccountVote"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Standard", fields: [Field { name: Some("vote"), ty: UntrackedSymbol { id: 100, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vote"), docs: [] }, Field { name: Some("balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }], index: 0, docs: [] }, Variant { name: "Split", fields: [Field { name: Some("aye"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("nay"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }], index: 1, docs: [] }, Variant { name: "SplitAbstain", fields: [Field { name: Some("aye"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("nay"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("abstain"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 100, ty: Type { path: Path { segments: ["pallet_conviction_voting", "vote", "Vote"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }] }), docs: [] } }, PortableType { id: 101, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Primitive(U16), docs: [] } }, PortableType { id: 102, ty: Type { path: Path { segments: ["pallet_referenda", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Submitted", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }, Field { name: Some("track"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TrackIdOf<T, I>"), docs: ["The track (and by extension proposal dispatch origin) of this referendum."] }, Field { name: Some("proposal"), ty: UntrackedSymbol { id: 103, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedCallOf<T, I>"), docs: ["The proposal for the referendum."] }], index: 0, docs: ["A referendum has been submitted."] }, Variant { name: "DecisionDepositPlaced", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The account who placed the deposit."] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: ["The amount placed by the account."] }], index: 1, docs: ["The decision deposit has been placed."] }, Variant { name: "DecisionDepositRefunded", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The account who placed the deposit."] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: ["The amount placed by the account."] }], index: 2, docs: ["The decision deposit has been refunded."] }, Variant { name: "DepositSlashed", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The account who placed the deposit."] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: ["The amount placed by the account."] }], index: 3, docs: ["A deposit has been slashed."] }, Variant { name: "DecisionStarted", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }, Field { name: Some("track"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TrackIdOf<T, I>"), docs: ["The track (and by extension proposal dispatch origin) of this referendum."] }, Field { name: Some("proposal"), ty: UntrackedSymbol { id: 103, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedCallOf<T, I>"), docs: ["The proposal for the referendum."] }, Field { name: Some("tally"), ty: UntrackedSymbol { id: 441, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Tally"), docs: ["The current tally of votes in this referendum."] }], index: 4, docs: ["A referendum has moved into the deciding phase."] }, Variant { name: "ConfirmStarted", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }], index: 5, docs: [] }, Variant { name: "ConfirmAborted", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }], index: 6, docs: [] }, Variant { name: "Confirmed", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }, Field { name: Some("tally"), ty: UntrackedSymbol { id: 441, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Tally"), docs: ["The final tally of votes in this referendum."] }], index: 7, docs: ["A referendum has ended its confirmation phase and is ready for approval."] }, Variant { name: "Approved", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }], index: 8, docs: ["A referendum has been approved and its proposal has been scheduled."] }, Variant { name: "Rejected", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }, Field { name: Some("tally"), ty: UntrackedSymbol { id: 441, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Tally"), docs: ["The final tally of votes in this referendum."] }], index: 9, docs: ["A proposal has been rejected by referendum."] }, Variant { name: "TimedOut", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }, Field { name: Some("tally"), ty: UntrackedSymbol { id: 441, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Tally"), docs: ["The final tally of votes in this referendum."] }], index: 10, docs: ["A referendum has been timed out without being decided."] }, Variant { name: "Cancelled", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }, Field { name: Some("tally"), ty: UntrackedSymbol { id: 441, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Tally"), docs: ["The final tally of votes in this referendum."] }], index: 11, docs: ["A referendum has been cancelled."] }, Variant { name: "Killed", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }, Field { name: Some("tally"), ty: UntrackedSymbol { id: 441, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Tally"), docs: ["The final tally of votes in this referendum."] }], index: 12, docs: ["A referendum has been killed."] }, Variant { name: "SubmissionDepositRefunded", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The account who placed the deposit."] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: ["The amount placed by the account."] }], index: 13, docs: ["The submission deposit has been refunded."] }, Variant { name: "MetadataSet", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }, Field { name: Some("hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: ["Preimage hash."] }], index: 14, docs: ["Metadata for a referendum has been set."] }, Variant { name: "MetadataCleared", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }, Field { name: Some("hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: ["Preimage hash."] }], index: 15, docs: ["Metadata for a referendum has been cleared."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 103, ty: Type { path: Path { segments: ["frame_support", "traits", "preimages", "Bounded"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 104, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "H", ty: Some(UntrackedSymbol { id: 439, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Legacy", fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H::Output"), docs: [] }], index: 0, docs: [] }, Variant { name: "Inline", fields: [Field { name: None, ty: UntrackedSymbol { id: 440, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedInline"), docs: [] }], index: 1, docs: [] }, Variant { name: "Lookup", fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H::Output"), docs: [] }, Field { name: Some("len"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 104, ty: Type { path: Path { segments: ["rococo_runtime", "RuntimeCall"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "System", fields: [Field { name: None, ty: UntrackedSymbol { id: 105, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>"), docs: [] }], index: 0, docs: [] }, Variant { name: "Babe", fields: [Field { name: None, ty: UntrackedSymbol { id: 109, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Babe, Runtime>"), docs: [] }], index: 1, docs: [] }, Variant { name: "Timestamp", fields: [Field { name: None, ty: UntrackedSymbol { id: 118, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>"), docs: [] }], index: 2, docs: [] }, Variant { name: "Indices", fields: [Field { name: None, ty: UntrackedSymbol { id: 119, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Indices, Runtime>"), docs: [] }], index: 3, docs: [] }, Variant { name: "Balances", fields: [Field { name: None, ty: UntrackedSymbol { id: 123, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>"), docs: [] }], index: 4, docs: [] }, Variant { name: "Parameters", fields: [Field { name: None, ty: UntrackedSymbol { id: 126, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Parameters, Runtime>"), docs: [] }], index: 6, docs: [] }, Variant { name: "Session", fields: [Field { name: None, ty: UntrackedSymbol { id: 132, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>"), docs: [] }], index: 8, docs: [] }, Variant { name: "Grandpa", fields: [Field { name: None, ty: UntrackedSymbol { id: 139, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>"), docs: [] }], index: 10, docs: [] }, Variant { name: "Treasury", fields: [Field { name: None, ty: UntrackedSymbol { id: 150, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>"), docs: [] }], index: 18, docs: [] }, Variant { name: "ConvictionVoting", fields: [Field { name: None, ty: UntrackedSymbol { id: 152, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ConvictionVoting, Runtime>"), docs: [] }], index: 20, docs: [] }, Variant { name: "Referenda", fields: [Field { name: None, ty: UntrackedSymbol { id: 155, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Referenda, Runtime>"), docs: [] }], index: 21, docs: [] }, Variant { name: "FellowshipCollective", fields: [Field { name: None, ty: UntrackedSymbol { id: 164, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FellowshipCollective, Runtime>"), docs: [] }], index: 22, docs: [] }, Variant { name: "FellowshipReferenda", fields: [Field { name: None, ty: UntrackedSymbol { id: 165, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FellowshipReferenda, Runtime>"), docs: [] }], index: 23, docs: [] }, Variant { name: "Whitelist", fields: [Field { name: None, ty: UntrackedSymbol { id: 166, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Whitelist, Runtime>"), docs: [] }], index: 44, docs: [] }, Variant { name: "Claims", fields: [Field { name: None, ty: UntrackedSymbol { id: 167, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Claims, Runtime>"), docs: [] }], index: 19, docs: [] }, Variant { name: "Utility", fields: [Field { name: None, ty: UntrackedSymbol { id: 176, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>"), docs: [] }], index: 24, docs: [] }, Variant { name: "Identity", fields: [Field { name: None, ty: UntrackedSymbol { id: 178, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>"), docs: [] }], index: 25, docs: [] }, Variant { name: "Society", fields: [Field { name: None, ty: UntrackedSymbol { id: 220, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Society, Runtime>"), docs: [] }], index: 26, docs: [] }, Variant { name: "Recovery", fields: [Field { name: None, ty: UntrackedSymbol { id: 221, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Recovery, Runtime>"), docs: [] }], index: 27, docs: [] }, Variant { name: "Vesting", fields: [Field { name: None, ty: UntrackedSymbol { id: 222, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>"), docs: [] }], index: 28, docs: [] }, Variant { name: "Scheduler", fields: [Field { name: None, ty: UntrackedSymbol { id: 224, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>"), docs: [] }], index: 29, docs: [] }, Variant { name: "Proxy", fields: [Field { name: None, ty: UntrackedSymbol { id: 227, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>"), docs: [] }], index: 30, docs: [] }, Variant { name: "Multisig", fields: [Field { name: None, ty: UntrackedSymbol { id: 230, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>"), docs: [] }], index: 31, docs: [] }, Variant { name: "Preimage", fields: [Field { name: None, ty: UntrackedSymbol { id: 233, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>"), docs: [] }], index: 32, docs: [] }, Variant { name: "AssetRate", fields: [Field { name: None, ty: UntrackedSymbol { id: 235, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AssetRate, Runtime>"), docs: [] }], index: 39, docs: [] }, Variant { name: "Bounties", fields: [Field { name: None, ty: UntrackedSymbol { id: 237, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Bounties, Runtime>"), docs: [] }], index: 35, docs: [] }, Variant { name: "ChildBounties", fields: [Field { name: None, ty: UntrackedSymbol { id: 238, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ChildBounties, Runtime>"), docs: [] }], index: 40, docs: [] }, Variant { name: "Nis", fields: [Field { name: None, ty: UntrackedSymbol { id: 239, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Nis, Runtime>"), docs: [] }], index: 38, docs: [] }, Variant { name: "NisCounterpartBalances", fields: [Field { name: None, ty: UntrackedSymbol { id: 240, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<NisCounterpartBalances, Runtime>"), docs: [] }], index: 45, docs: [] }, Variant { name: "Configuration", fields: [Field { name: None, ty: UntrackedSymbol { id: 241, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Configuration, Runtime>"), docs: [] }], index: 51, docs: [] }, Variant { name: "ParasShared", fields: [Field { name: None, ty: UntrackedSymbol { id: 251, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasShared, Runtime>"), docs: [] }], index: 52, docs: [] }, Variant { name: "ParaInclusion", fields: [Field { name: None, ty: UntrackedSymbol { id: 252, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParaInclusion, Runtime>"), docs: [] }], index: 53, docs: [] }, Variant { name: "ParaInherent", fields: [Field { name: None, ty: UntrackedSymbol { id: 253, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParaInherent, Runtime>"), docs: [] }], index: 54, docs: [] }, Variant { name: "Paras", fields: [Field { name: None, ty: UntrackedSymbol { id: 287, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Paras, Runtime>"), docs: [] }], index: 56, docs: [] }, Variant { name: "Initializer", fields: [Field { name: None, ty: UntrackedSymbol { id: 289, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Initializer, Runtime>"), docs: [] }], index: 57, docs: [] }, Variant { name: "Hrmp", fields: [Field { name: None, ty: UntrackedSymbol { id: 290, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Hrmp, Runtime>"), docs: [] }], index: 60, docs: [] }, Variant { name: "ParasDisputes", fields: [Field { name: None, ty: UntrackedSymbol { id: 292, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasDisputes, Runtime>"), docs: [] }], index: 62, docs: [] }, Variant { name: "ParasSlashing", fields: [Field { name: None, ty: UntrackedSymbol { id: 293, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasSlashing, Runtime>"), docs: [] }], index: 63, docs: [] }, Variant { name: "MessageQueue", fields: [Field { name: None, ty: UntrackedSymbol { id: 297, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MessageQueue, Runtime>"), docs: [] }], index: 64, docs: [] }, Variant { name: "OnDemandAssignmentProvider", fields: [Field { name: None, ty: UntrackedSymbol { id: 300, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<OnDemandAssignmentProvider, Runtime>"), docs: [] }], index: 66, docs: [] }, Variant { name: "Registrar", fields: [Field { name: None, ty: UntrackedSymbol { id: 301, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Registrar, Runtime>"), docs: [] }], index: 70, docs: [] }, Variant { name: "Slots", fields: [Field { name: None, ty: UntrackedSymbol { id: 302, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Slots, Runtime>"), docs: [] }], index: 71, docs: [] }, Variant { name: "Auctions", fields: [Field { name: None, ty: UntrackedSymbol { id: 303, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Auctions, Runtime>"), docs: [] }], index: 72, docs: [] }, Variant { name: "Crowdloan", fields: [Field { name: None, ty: UntrackedSymbol { id: 305, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Crowdloan, Runtime>"), docs: [] }], index: 73, docs: [] }, Variant { name: "Coretime", fields: [Field { name: None, ty: UntrackedSymbol { id: 308, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Coretime, Runtime>"), docs: [] }], index: 74, docs: [] }, Variant { name: "MultiBlockMigrations", fields: [Field { name: None, ty: UntrackedSymbol { id: 313, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MultiBlockMigrations, Runtime>"), docs: [] }], index: 98, docs: [] }, Variant { name: "XcmPallet", fields: [Field { name: None, ty: UntrackedSymbol { id: 323, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmPallet, Runtime>"), docs: [] }], index: 99, docs: [] }, Variant { name: "Beefy", fields: [Field { name: None, ty: UntrackedSymbol { id: 412, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Beefy, Runtime>"), docs: [] }], index: 240, docs: [] }, Variant { name: "IdentityMigrator", fields: [Field { name: None, ty: UntrackedSymbol { id: 425, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<IdentityMigrator, Runtime>"), docs: [] }], index: 248, docs: [] }, Variant { name: "ParasSudoWrapper", fields: [Field { name: None, ty: UntrackedSymbol { id: 426, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasSudoWrapper, Runtime>"), docs: [] }], index: 250, docs: [] }, Variant { name: "AssignedSlots", fields: [Field { name: None, ty: UntrackedSymbol { id: 428, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AssignedSlots, Runtime>"), docs: [] }], index: 251, docs: [] }, Variant { name: "ValidatorManager", fields: [Field { name: None, ty: UntrackedSymbol { id: 430, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ValidatorManager, Runtime>"), docs: [] }], index: 252, docs: [] }, Variant { name: "StateTrieMigration", fields: [Field { name: None, ty: UntrackedSymbol { id: 431, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<StateTrieMigration, Runtime>"), docs: [] }], index: 254, docs: [] }, Variant { name: "RootTesting", fields: [Field { name: None, ty: UntrackedSymbol { id: 437, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<RootTesting, Runtime>"), docs: [] }], index: 249, docs: [] }, Variant { name: "Sudo", fields: [Field { name: None, ty: UntrackedSymbol { id: 438, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>"), docs: [] }], index: 255, docs: [] }] }), docs: [] } }, PortableType { id: 105, ty: Type { path: Path { segments: ["frame_system", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "remark", fields: [Field { name: Some("remark"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 0, docs: ["Make some on-chain remark.", "", "Can be executed by every `origin`."] }, Variant { name: "set_heap_pages", fields: [Field { name: Some("pages"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }], index: 1, docs: ["Set the number of pages in the WebAssembly environment's heap."] }, Variant { name: "set_code", fields: [Field { name: Some("code"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 2, docs: ["Set the new runtime code."] }, Variant { name: "set_code_without_checks", fields: [Field { name: Some("code"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 3, docs: ["Set the new runtime code without doing any checks of the given `code`.", "", "Note that runtime upgrades will not run if this is called with a not-increasing spec", "version!"] }, Variant { name: "set_storage", fields: [Field { name: Some("items"), ty: UntrackedSymbol { id: 106, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<KeyValue>"), docs: [] }], index: 4, docs: ["Set some items of storage."] }, Variant { name: "kill_storage", fields: [Field { name: Some("keys"), ty: UntrackedSymbol { id: 108, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Key>"), docs: [] }], index: 5, docs: ["Kill some items from storage."] }, Variant { name: "kill_prefix", fields: [Field { name: Some("prefix"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Key"), docs: [] }, Field { name: Some("subkeys"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 6, docs: ["Kill all storage items with a key that starts with the given prefix.", "", "**NOTE:** We rely on the Root origin to provide us the number of subkeys under", "the prefix we are removing to accurately calculate the weight of this function."] }, Variant { name: "remark_with_event", fields: [Field { name: Some("remark"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 7, docs: ["Make some on-chain remark and emit event."] }, Variant { name: "authorize_upgrade", fields: [Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 9, docs: ["Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied", "later.", "", "This call requires Root origin."] }, Variant { name: "authorize_upgrade_without_checks", fields: [Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 10, docs: ["Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied", "later.", "", "WARNING: This authorizes an upgrade that will take place without any safety checks, for", "example that the spec name remains the same and that the version number increases. Not", "recommended for normal use. Use `authorize_upgrade` instead.", "", "This call requires Root origin."] }, Variant { name: "apply_authorized_upgrade", fields: [Field { name: Some("code"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 11, docs: ["Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.", "", "If the authorization required a version check, this call will ensure the spec name", "remains unchanged and that the spec version has increased.", "", "Depending on the runtime's `OnSetCode` configuration, this function may directly apply", "the new `code` in the same block or attempt to schedule the upgrade.", "", "All origins are allowed."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 106, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 107, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 107, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 108, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 109, ty: Type { path: Path { segments: ["pallet_babe", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "report_equivocation", fields: [Field { name: Some("equivocation_proof"), ty: UntrackedSymbol { id: 110, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<EquivocationProof<HeaderFor<T>>>"), docs: [] }, Field { name: Some("key_owner_proof"), ty: UntrackedSymbol { id: 114, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::KeyOwnerProof"), docs: [] }], index: 0, docs: ["Report authority equivocation/misbehavior. This method will verify", "the equivocation proof and validate the given key ownership proof", "against the extracted offender. If both are valid, the offence will", "be reported."] }, Variant { name: "report_equivocation_unsigned", fields: [Field { name: Some("equivocation_proof"), ty: UntrackedSymbol { id: 110, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<EquivocationProof<HeaderFor<T>>>"), docs: [] }, Field { name: Some("key_owner_proof"), ty: UntrackedSymbol { id: 114, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::KeyOwnerProof"), docs: [] }], index: 1, docs: ["Report authority equivocation/misbehavior. This method will verify", "the equivocation proof and validate the given key ownership proof", "against the extracted offender. If both are valid, the offence will", "be reported.", "This extrinsic must be called unsigned and it is expected that only", "block authors will call it (validated in `ValidateUnsigned`), as such", "if the block author is defined it will be defined as the equivocation", "reporter."] }, Variant { name: "plan_config_change", fields: [Field { name: Some("config"), ty: UntrackedSymbol { id: 115, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("NextConfigDescriptor"), docs: [] }], index: 2, docs: ["Plan an epoch config change. The epoch config change is recorded and will be enacted on", "the next call to `enact_epoch_change`. The config will be activated one epoch after.", "Multiple calls to this method will replace any existing planned config change that had", "not been enacted yet."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 110, ty: Type { path: Path { segments: ["sp_consensus_slots", "EquivocationProof"] }, type_params: [TypeParameter { name: "Header", ty: Some(UntrackedSymbol { id: 111, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Id", ty: Some(UntrackedSymbol { id: 112, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("offender"), ty: UntrackedSymbol { id: 112, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Id"), docs: [] }, Field { name: Some("slot"), ty: UntrackedSymbol { id: 113, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Slot"), docs: [] }, Field { name: Some("first_header"), ty: UntrackedSymbol { id: 111, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Header"), docs: [] }, Field { name: Some("second_header"), ty: UntrackedSymbol { id: 111, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Header"), docs: [] }] }), docs: [] } }, PortableType { id: 111, ty: Type { path: Path { segments: ["sp_runtime", "generic", "header", "Header"] }, type_params: [TypeParameter { name: "Number", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Hash", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("parent_hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash::Output"), docs: [] }, Field { name: Some("number"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Number"), docs: [] }, Field { name: Some("state_root"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash::Output"), docs: [] }, Field { name: Some("extrinsics_root"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash::Output"), docs: [] }, Field { name: Some("digest"), ty: UntrackedSymbol { id: 15, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Digest"), docs: [] }] }), docs: [] } }, PortableType { id: 112, ty: Type { path: Path { segments: ["sp_consensus_babe", "app", "Public"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("sr25519::Public"), docs: [] }] }), docs: [] } }, PortableType { id: 113, ty: Type { path: Path { segments: ["sp_consensus_slots", "Slot"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }] }), docs: [] } }, PortableType { id: 114, ty: Type { path: Path { segments: ["sp_session", "MembershipProof"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("session"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SessionIndex"), docs: [] }, Field { name: Some("trie_nodes"), ty: UntrackedSymbol { id: 108, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Vec<u8>>"), docs: [] }, Field { name: Some("validator_count"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidatorCount"), docs: [] }] }), docs: [] } }, PortableType { id: 115, ty: Type { path: Path { segments: ["sp_consensus_babe", "digests", "NextConfigDescriptor"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "V1", fields: [Field { name: Some("c"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("(u64, u64)"), docs: [] }, Field { name: Some("allowed_slots"), ty: UntrackedSymbol { id: 117, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AllowedSlots"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 116, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 117, ty: Type { path: Path { segments: ["sp_consensus_babe", "AllowedSlots"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "PrimarySlots", fields: [], index: 0, docs: [] }, Variant { name: "PrimaryAndSecondaryPlainSlots", fields: [], index: 1, docs: [] }, Variant { name: "PrimaryAndSecondaryVRFSlots", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 118, ty: Type { path: Path { segments: ["pallet_timestamp", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "set", fields: [Field { name: Some("now"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Moment"), docs: [] }], index: 0, docs: ["Set the current time.", "", "This call should be invoked exactly once per block. It will panic at the finalization", "phase, if this call hasn't been invoked by that time.", "", "The timestamp should be greater than the previous one by the amount specified by", "[`Config::MinimumPeriod`].", "", "The dispatch origin for this call must be _None_.", "", "This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware", "that changing the complexity of this call could result exhausting the resources in a", "block to execute any other calls.", "", "## Complexity", "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)", "- 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in", "  `on_finalize`)", "- 1 event handler `on_timestamp_set`. Must be `O(1)`."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 119, ty: Type { path: Path { segments: ["pallet_indices", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "claim", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountIndex"), docs: [] }], index: 0, docs: ["Assign an previously unassigned index.", "", "Payment: `Deposit` is reserved from the sender account.", "", "The dispatch origin for this call must be _Signed_.", "", "- `index`: the index to be claimed. This must not be in use.", "", "Emits `IndexAssigned` if successful.", "", "## Complexity", "- `O(1)`."] }, Variant { name: "transfer", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountIndex"), docs: [] }], index: 1, docs: ["Assign an index already owned by the sender to another account. The balance reservation", "is effectively transferred to the new account.", "", "The dispatch origin for this call must be _Signed_.", "", "- `index`: the index to be re-assigned. This must be owned by the sender.", "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.", "", "Emits `IndexAssigned` if successful.", "", "## Complexity", "- `O(1)`."] }, Variant { name: "free", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountIndex"), docs: [] }], index: 2, docs: ["Free up an index owned by the sender.", "", "Payment: Any previous deposit placed for the index is unreserved in the sender account.", "", "The dispatch origin for this call must be _Signed_ and the sender must own the index.", "", "- `index`: the index to be freed. This must be owned by the sender.", "", "Emits `IndexFreed` if successful.", "", "## Complexity", "- `O(1)`."] }, Variant { name: "force_transfer", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountIndex"), docs: [] }, Field { name: Some("freeze"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 3, docs: ["Force an index to an account. This doesn't require a deposit. If the index is already", "held, then any deposit is reimbursed to its current owner.", "", "The dispatch origin for this call must be _Root_.", "", "- `index`: the index to be (re-)assigned.", "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.", "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred.", "", "Emits `IndexAssigned` if successful.", "", "## Complexity", "- `O(1)`."] }, Variant { name: "freeze", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountIndex"), docs: [] }], index: 4, docs: ["Freeze an index so it will always point to the sender account. This consumes the", "deposit.", "", "The dispatch origin for this call must be _Signed_ and the signing account must have a", "non-frozen account `index`.", "", "- `index`: the index to be frozen in place.", "", "Emits `IndexFrozen` if successful.", "", "## Complexity", "- `O(1)`."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 120, ty: Type { path: Path { segments: ["sp_runtime", "multiaddress", "MultiAddress"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "AccountIndex", ty: Some(UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Id", fields: [Field { name: None, ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }], index: 0, docs: [] }, Variant { name: "Index", fields: [Field { name: None, ty: UntrackedSymbol { id: 122, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIndex"), docs: [] }], index: 1, docs: [] }, Variant { name: "Raw", fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 2, docs: [] }, Variant { name: "Address32", fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 3, docs: [] }, Variant { name: "Address20", fields: [Field { name: None, ty: UntrackedSymbol { id: 64, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 20]"), docs: [] }], index: 4, docs: [] }] }), docs: [] } }, PortableType { id: 121, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [] }), docs: [] } }, PortableType { id: 122, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Compact(TypeDefCompact { type_param: UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 123, ty: Type { path: Path { segments: ["pallet_balances", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "transfer_allow_death", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 0, docs: ["Transfer some liquid free balance to another account.", "", "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.", "If the sender's account is below the existential deposit as a result", "of the transfer, the account will be reaped.", "", "The dispatch origin for this call must be `Signed` by the transactor."] }, Variant { name: "force_transfer", fields: [Field { name: Some("source"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 2, docs: ["Exactly as `transfer_allow_death`, except the origin must be root and the source account", "may be specified."] }, Variant { name: "transfer_keep_alive", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 3, docs: ["Same as the [`transfer_allow_death`] call, but with a check that the transfer will not", "kill the origin account.", "", "99% of the time you want [`transfer_allow_death`] instead.", "", "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"] }, Variant { name: "transfer_all", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("keep_alive"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 4, docs: ["Transfer the entire transferable balance from the caller account.", "", "NOTE: This function only attempts to transfer _transferable_ balances. This means that", "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be", "transferred by this function. To ensure that this function results in a killed account,", "you might need to prepare the account by removing any reference counters, storage", "deposits, etc...", "", "The dispatch origin of this call must be Signed.", "", "- `dest`: The recipient of the transfer.", "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all", "  of the funds the account has, causing the sender account to be killed (false), or", "  transfer everything except at least the existential deposit, which will guarantee to", "  keep the sender account alive (true)."] }, Variant { name: "force_unreserve", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 5, docs: ["Unreserve some balance from a user by force.", "", "Can only be called by ROOT."] }, Variant { name: "upgrade_accounts", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 124, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T::AccountId>"), docs: [] }], index: 6, docs: ["Upgrade a specified account.", "", "- `origin`: Must be `Signed`.", "- `who`: The account to be upgraded.", "", "This will waive the transaction fee if at least all but 10% of the accounts needed to", "be upgraded. (We let some not have to be upgraded just in order to allow for the", "possibility of churn)."] }, Variant { name: "force_set_balance", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("new_free"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 8, docs: ["Set the regular balance of a given account.", "", "The dispatch origin for this call is `root`."] }, Variant { name: "force_adjust_total_issuance", fields: [Field { name: Some("direction"), ty: UntrackedSymbol { id: 125, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AdjustmentDirection"), docs: [] }, Field { name: Some("delta"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 9, docs: ["Adjust the total issuance in a saturating way.", "", "Can only be called by root and always needs a positive `delta`.", "", "# Example"] }, Variant { name: "burn", fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }, Field { name: Some("keep_alive"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 10, docs: ["Burn the specified liquid free balance from the origin account.", "", "If the origin's account ends up below the existential deposit as a result", "of the burn and `keep_alive` is false, the account will be reaped.", "", "Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,", "this `burn` operation will reduce total issuance by the amount _burned_."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 124, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 125, ty: Type { path: Path { segments: ["pallet_balances", "types", "AdjustmentDirection"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Increase", fields: [], index: 0, docs: [] }, Variant { name: "Decrease", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 126, ty: Type { path: Path { segments: ["pallet_parameters", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "set_parameter", fields: [Field { name: Some("key_value"), ty: UntrackedSymbol { id: 127, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::RuntimeParameters"), docs: [] }], index: 0, docs: ["Set the value of a parameter.", "", "The dispatch origin of this call must be `AdminOrigin` for the given `key`. Values be", "deleted by setting them to `None`."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 127, ty: Type { path: Path { segments: ["rococo_runtime", "RuntimeParameters"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Nis", fields: [Field { name: None, ty: UntrackedSymbol { id: 128, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("dynamic_params::nis::Parameters"), docs: [] }], index: 0, docs: [] }, Variant { name: "Preimage", fields: [Field { name: None, ty: UntrackedSymbol { id: 131, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("dynamic_params::preimage::Parameters"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 128, ty: Type { path: Path { segments: ["rococo_runtime", "dynamic_params", "nis", "Parameters"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Target", fields: [Field { name: None, ty: UntrackedSymbol { id: 38, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Target"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 129, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Perquintill>"), docs: [] }], index: 0, docs: [] }, Variant { name: "MinBid", fields: [Field { name: None, ty: UntrackedSymbol { id: 39, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MinBid"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 130, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Balance>"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 129, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 46, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 46, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 130, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 131, ty: Type { path: Path { segments: ["rococo_runtime", "dynamic_params", "preimage", "Parameters"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "BaseDeposit", fields: [Field { name: None, ty: UntrackedSymbol { id: 41, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BaseDeposit"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 130, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Balance>"), docs: [] }], index: 0, docs: [] }, Variant { name: "ByteDeposit", fields: [Field { name: None, ty: UntrackedSymbol { id: 42, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ByteDeposit"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 130, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Balance>"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 132, ty: Type { path: Path { segments: ["pallet_session", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "set_keys", fields: [Field { name: Some("keys"), ty: UntrackedSymbol { id: 133, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Keys"), docs: [] }, Field { name: Some("proof"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 0, docs: ["Sets the session key(s) of the function caller to `keys`.", "Allows an account to set its session key prior to becoming a validator.", "This doesn't take effect until the next session.", "", "The dispatch origin of this function must be signed.", "", "## Complexity", "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is", "  fixed."] }, Variant { name: "purge_keys", fields: [], index: 1, docs: ["Removes any session key(s) of the function caller.", "", "This doesn't take effect until the next session.", "", "The dispatch origin of this function must be Signed and the account must be either be", "convertible to a validator ID using the chain's typical addressing system (this usually", "means being a controller account) or directly convertible into a validator ID (which", "usually means being a stash account).", "", "## Complexity", "- `O(1)` in number of key types. Actual cost depends on the number of length of", "  `T::Keys::key_ids()` which is fixed."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 133, ty: Type { path: Path { segments: ["rococo_runtime", "SessionKeys"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("grandpa"), ty: UntrackedSymbol { id: 55, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<Grandpa as $crate::BoundToRuntimeAppPublic>::Public"), docs: [] }, Field { name: Some("babe"), ty: UntrackedSymbol { id: 112, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<Babe as $crate::BoundToRuntimeAppPublic>::Public"), docs: [] }, Field { name: Some("para_validator"), ty: UntrackedSymbol { id: 134, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<Initializer as $crate::BoundToRuntimeAppPublic>::Public"), docs: [] }, Field { name: Some("para_assignment"), ty: UntrackedSymbol { id: 135, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<ParaSessionInfo as $crate::BoundToRuntimeAppPublic>::Public"), docs: [] }, Field { name: Some("authority_discovery"), ty: UntrackedSymbol { id: 136, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<AuthorityDiscovery as $crate::BoundToRuntimeAppPublic>::Public"), docs: [] }, Field { name: Some("beefy"), ty: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<Beefy as $crate::BoundToRuntimeAppPublic>::Public"), docs: [] }] }), docs: [] } }, PortableType { id: 134, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "validator_app", "Public"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("sr25519::Public"), docs: [] }] }), docs: [] } }, PortableType { id: 135, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "assignment_app", "Public"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("sr25519::Public"), docs: [] }] }), docs: [] } }, PortableType { id: 136, ty: Type { path: Path { segments: ["sp_authority_discovery", "app", "Public"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("sr25519::Public"), docs: [] }] }), docs: [] } }, PortableType { id: 137, ty: Type { path: Path { segments: ["sp_consensus_beefy", "ecdsa_crypto", "Public"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 138, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ecdsa::Public"), docs: [] }] }), docs: [] } }, PortableType { id: 138, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 33, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 139, ty: Type { path: Path { segments: ["pallet_grandpa", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "report_equivocation", fields: [Field { name: Some("equivocation_proof"), ty: UntrackedSymbol { id: 140, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<EquivocationProof<T::Hash, BlockNumberFor<T>>>"), docs: [] }, Field { name: Some("key_owner_proof"), ty: UntrackedSymbol { id: 114, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::KeyOwnerProof"), docs: [] }], index: 0, docs: ["Report voter equivocation/misbehavior. This method will verify the", "equivocation proof and validate the given key ownership proof", "against the extracted offender. If both are valid, the offence", "will be reported."] }, Variant { name: "report_equivocation_unsigned", fields: [Field { name: Some("equivocation_proof"), ty: UntrackedSymbol { id: 140, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<EquivocationProof<T::Hash, BlockNumberFor<T>>>"), docs: [] }, Field { name: Some("key_owner_proof"), ty: UntrackedSymbol { id: 114, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::KeyOwnerProof"), docs: [] }], index: 1, docs: ["Report voter equivocation/misbehavior. This method will verify the", "equivocation proof and validate the given key ownership proof", "against the extracted offender. If both are valid, the offence", "will be reported.", "", "This extrinsic must be called unsigned and it is expected that only", "block authors will call it (validated in `ValidateUnsigned`), as such", "if the block author is defined it will be defined as the equivocation", "reporter."] }, Variant { name: "note_stalled", fields: [Field { name: Some("delay"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }, Field { name: Some("best_finalized_block_number"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }], index: 2, docs: ["Note that the current authority set of the GRANDPA finality gadget has stalled.", "", "This will trigger a forced authority set change at the beginning of the next session, to", "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume", "that the block signalling the forced change will not be re-orged e.g. 1000 blocks.", "The block production rate (which may be slowed down because of finality lagging) should", "be taken into account when choosing the `delay`. The GRANDPA voters based on the new", "authority will start voting on top of `best_finalized_block_number` for new finalized", "blocks. `best_finalized_block_number` should be the highest of the latest finalized", "block of all validators of the new authority set.", "", "Only callable by root."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 140, ty: Type { path: Path { segments: ["sp_consensus_grandpa", "EquivocationProof"] }, type_params: [TypeParameter { name: "H", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("set_id"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SetId"), docs: [] }, Field { name: Some("equivocation"), ty: UntrackedSymbol { id: 141, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Equivocation<H, N>"), docs: [] }] }), docs: [] } }, PortableType { id: 141, ty: Type { path: Path { segments: ["sp_consensus_grandpa", "Equivocation"] }, type_params: [TypeParameter { name: "H", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Prevote", fields: [Field { name: None, ty: UntrackedSymbol { id: 142, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("finality_grandpa::Equivocation<AuthorityId, finality_grandpa::Prevote<\nH, N>, AuthoritySignature,>"), docs: [] }], index: 0, docs: [] }, Variant { name: "Precommit", fields: [Field { name: None, ty: UntrackedSymbol { id: 147, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("finality_grandpa::Equivocation<AuthorityId, finality_grandpa::Precommit\n<H, N>, AuthoritySignature,>"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 142, ty: Type { path: Path { segments: ["finality_grandpa", "Equivocation"] }, type_params: [TypeParameter { name: "Id", ty: Some(UntrackedSymbol { id: 55, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "V", ty: Some(UntrackedSymbol { id: 143, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: Some(UntrackedSymbol { id: 144, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("round_number"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("identity"), ty: UntrackedSymbol { id: 55, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Id"), docs: [] }, Field { name: Some("first"), ty: UntrackedSymbol { id: 146, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("(V, S)"), docs: [] }, Field { name: Some("second"), ty: UntrackedSymbol { id: 146, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("(V, S)"), docs: [] }] }), docs: [] } }, PortableType { id: 143, ty: Type { path: Path { segments: ["finality_grandpa", "Prevote"] }, type_params: [TypeParameter { name: "H", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("target_hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H"), docs: [] }, Field { name: Some("target_number"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }] }), docs: [] } }, PortableType { id: 144, ty: Type { path: Path { segments: ["sp_consensus_grandpa", "app", "Signature"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 145, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ed25519::Signature"), docs: [] }] }), docs: [] } }, PortableType { id: 145, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 64, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 146, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 143, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 144, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 147, ty: Type { path: Path { segments: ["finality_grandpa", "Equivocation"] }, type_params: [TypeParameter { name: "Id", ty: Some(UntrackedSymbol { id: 55, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "V", ty: Some(UntrackedSymbol { id: 148, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: Some(UntrackedSymbol { id: 144, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("round_number"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("identity"), ty: UntrackedSymbol { id: 55, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Id"), docs: [] }, Field { name: Some("first"), ty: UntrackedSymbol { id: 149, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("(V, S)"), docs: [] }, Field { name: Some("second"), ty: UntrackedSymbol { id: 149, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("(V, S)"), docs: [] }] }), docs: [] } }, PortableType { id: 148, ty: Type { path: Path { segments: ["finality_grandpa", "Precommit"] }, type_params: [TypeParameter { name: "H", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("target_hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H"), docs: [] }, Field { name: Some("target_number"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }] }), docs: [] } }, PortableType { id: 149, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 148, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 144, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 150, ty: Type { path: Path { segments: ["pallet_treasury", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "spend_local", fields: [Field { name: Some("amount"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 3, docs: ["Propose and approve a spend of treasury funds.", "", "## Dispatch Origin", "", "Must be [`Config::SpendOrigin`] with the `Success` value being at least `amount`.", "", "### Details", "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the", "beneficiary.", "", "### Parameters", "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.", "- `beneficiary`: The destination account for the transfer.", "", "## Events", "", "Emits [`Event::SpendApproved`] if successful."] }, Variant { name: "remove_approval", fields: [Field { name: Some("proposal_id"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProposalIndex"), docs: [] }], index: 4, docs: ["Force a previously approved proposal to be removed from the approval queue.", "", "## Dispatch Origin", "", "Must be [`Config::RejectOrigin`].", "", "## Details", "", "The original deposit will no longer be returned.", "", "### Parameters", "- `proposal_id`: The index of a proposal", "", "### Complexity", "- O(A) where `A` is the number of approvals", "", "### Errors", "- [`Error::ProposalNotApproved`]: The `proposal_id` supplied was not found in the", "  approval queue, i.e., the proposal has not been approved. This could also mean the", "  proposal does not exist altogether, thus there is no way it would have been approved", "  in the first place."] }, Variant { name: "spend", fields: [Field { name: Some("asset_kind"), ty: UntrackedSymbol { id: 57, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<T::AssetKind>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetBalanceOf<T, I>"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<BeneficiaryLookupOf<T, I>>"), docs: [] }, Field { name: Some("valid_from"), ty: UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<BlockNumberFor<T, I>>"), docs: [] }], index: 5, docs: ["Propose and approve a spend of treasury funds.", "", "## Dispatch Origin", "", "Must be [`Config::SpendOrigin`] with the `Success` value being at least", "`amount` of `asset_kind` in the native asset. The amount of `asset_kind` is converted", "for assertion using the [`Config::BalanceConverter`].", "", "## Details", "", "Create an approved spend for transferring a specific `amount` of `asset_kind` to a", "designated beneficiary. The spend must be claimed using the `payout` dispatchable within", "the [`Config::PayoutPeriod`].", "", "### Parameters", "- `asset_kind`: An indicator of the specific asset class to be spent.", "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.", "- `beneficiary`: The beneficiary of the spend.", "- `valid_from`: The block number from which the spend can be claimed. It can refer to", "  the past if the resulting spend has not yet expired according to the", "  [`Config::PayoutPeriod`]. If `None`, the spend can be claimed immediately after", "  approval.", "", "## Events", "", "Emits [`Event::AssetSpendApproved`] if successful."] }, Variant { name: "payout", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SpendIndex"), docs: [] }], index: 6, docs: ["Claim a spend.", "", "## Dispatch Origin", "", "Must be signed", "", "## Details", "", "Spends must be claimed within some temporal bounds. A spend may be claimed within one", "[`Config::PayoutPeriod`] from the `valid_from` block.", "In case of a payout failure, the spend status must be updated with the `check_status`", "dispatchable before retrying with the current function.", "", "### Parameters", "- `index`: The spend index.", "", "## Events", "", "Emits [`Event::Paid`] if successful."] }, Variant { name: "check_status", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SpendIndex"), docs: [] }], index: 7, docs: ["Check the status of the spend and remove it from the storage if processed.", "", "## Dispatch Origin", "", "Must be signed.", "", "## Details", "", "The status check is a prerequisite for retrying a failed payout.", "If a spend has either succeeded or expired, it is removed from the storage by this", "function. In such instances, transaction fees are refunded.", "", "### Parameters", "- `index`: The spend index.", "", "## Events", "", "Emits [`Event::PaymentFailed`] if the spend payout has failed.", "Emits [`Event::SpendProcessed`] if the spend payout has succeed."] }, Variant { name: "void_spend", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SpendIndex"), docs: [] }], index: 8, docs: ["Void previously approved spend.", "", "## Dispatch Origin", "", "Must be [`Config::RejectOrigin`].", "", "## Details", "", "A spend void is only possible if the payout has not been attempted yet.", "", "### Parameters", "- `index`: The spend index.", "", "## Events", "", "Emits [`Event::AssetSpendVoided`] if successful."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 151, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 152, ty: Type { path: Path { segments: ["pallet_conviction_voting", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "vote", fields: [Field { name: Some("poll_index"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PollIndexOf<T, I>"), docs: [] }, Field { name: Some("vote"), ty: UntrackedSymbol { id: 99, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountVote<BalanceOf<T, I>>"), docs: [] }], index: 0, docs: ["Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;", "otherwise it is a vote to keep the status quo.", "", "The dispatch origin of this call must be _Signed_.", "", "- `poll_index`: The index of the poll to vote for.", "- `vote`: The vote configuration.", "", "Weight: `O(R)` where R is the number of polls the voter has voted on."] }, Variant { name: "delegate", fields: [Field { name: Some("class"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ClassOf<T, I>"), docs: [] }, Field { name: Some("to"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("conviction"), ty: UntrackedSymbol { id: 153, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Conviction"), docs: [] }, Field { name: Some("balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], index: 1, docs: ["Delegate the voting power (with some given conviction) of the sending account for a", "particular class of polls.", "", "The balance delegated is locked for as long as it's delegated, and thereafter for the", "time appropriate for the conviction's lock period.", "", "The dispatch origin of this call must be _Signed_, and the signing account must either:", "  - be delegating already; or", "  - have no voting activity (if there is, then it will need to be removed through", "    `remove_vote`).", "", "- `to`: The account whose voting the `target` account's voting power will follow.", "- `class`: The class of polls to delegate. To delegate multiple classes, multiple calls", "  to this function are required.", "- `conviction`: The conviction that will be attached to the delegated votes. When the", "  account is undelegated, the funds will be locked for the corresponding period.", "- `balance`: The amount of the account's balance to be used in delegating. This must not", "  be more than the account's current balance.", "", "Emits `Delegated`.", "", "Weight: `O(R)` where R is the number of polls the voter delegating to has", "  voted on. Weight is initially charged as if maximum votes, but is refunded later."] }, Variant { name: "undelegate", fields: [Field { name: Some("class"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ClassOf<T, I>"), docs: [] }], index: 2, docs: ["Undelegate the voting power of the sending account for a particular class of polls.", "", "Tokens may be unlocked following once an amount of time consistent with the lock period", "of the conviction with which the delegation was issued has passed.", "", "The dispatch origin of this call must be _Signed_ and the signing account must be", "currently delegating.", "", "- `class`: The class of polls to remove the delegation from.", "", "Emits `Undelegated`.", "", "Weight: `O(R)` where R is the number of polls the voter delegating to has", "  voted on. Weight is initially charged as if maximum votes, but is refunded later."] }, Variant { name: "unlock", fields: [Field { name: Some("class"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ClassOf<T, I>"), docs: [] }, Field { name: Some("target"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 3, docs: ["Remove the lock caused by prior voting/delegating which has expired within a particular", "class.", "", "The dispatch origin of this call must be _Signed_.", "", "- `class`: The class of polls to unlock.", "- `target`: The account to remove the lock on.", "", "Weight: `O(R)` with R number of vote of target."] }, Variant { name: "remove_vote", fields: [Field { name: Some("class"), ty: UntrackedSymbol { id: 154, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<ClassOf<T, I>>"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PollIndexOf<T, I>"), docs: [] }], index: 4, docs: ["Remove a vote for a poll.", "", "If:", "- the poll was cancelled, or", "- the poll is ongoing, or", "- the poll has ended such that", "  - the vote of the account was in opposition to the result; or", "  - there was no conviction to the account's vote; or", "  - the account made a split vote", "...then the vote is removed cleanly and a following call to `unlock` may result in more", "funds being available.", "", "If, however, the poll has ended and:", "- it finished corresponding to the vote of the account, and", "- the account made a standard vote with conviction, and", "- the lock period of the conviction is not over", "...then the lock will be aggregated into the overall account's lock, which may involve", "*overlocking* (where the two locks are combined into a single lock that is the maximum", "of both the amount locked and the time is it locked for).", "", "The dispatch origin of this call must be _Signed_, and the signer must have a vote", "registered for poll `index`.", "", "- `index`: The index of poll of the vote to be removed.", "- `class`: Optional parameter, if given it indicates the class of the poll. For polls", "  which have finished or are cancelled, this must be `Some`.", "", "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.", "  Weight is calculated for the maximum number of vote."] }, Variant { name: "remove_other_vote", fields: [Field { name: Some("target"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("class"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ClassOf<T, I>"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PollIndexOf<T, I>"), docs: [] }], index: 5, docs: ["Remove a vote for a poll.", "", "If the `target` is equal to the signer, then this function is exactly equivalent to", "`remove_vote`. If not equal to the signer, then the vote must have expired,", "either because the poll was cancelled, because the voter lost the poll or", "because the conviction period is over.", "", "The dispatch origin of this call must be _Signed_.", "", "- `target`: The account of the vote to be removed; this account must have voted for poll", "  `index`.", "- `index`: The index of poll of the vote to be removed.", "- `class`: The class of the poll.", "", "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.", "  Weight is calculated for the maximum number of vote."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 153, ty: Type { path: Path { segments: ["pallet_conviction_voting", "conviction", "Conviction"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Locked1x", fields: [], index: 1, docs: [] }, Variant { name: "Locked2x", fields: [], index: 2, docs: [] }, Variant { name: "Locked3x", fields: [], index: 3, docs: [] }, Variant { name: "Locked4x", fields: [], index: 4, docs: [] }, Variant { name: "Locked5x", fields: [], index: 5, docs: [] }, Variant { name: "Locked6x", fields: [], index: 6, docs: [] }] }), docs: [] } }, PortableType { id: 154, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 155, ty: Type { path: Path { segments: ["pallet_referenda", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "submit", fields: [Field { name: Some("proposal_origin"), ty: UntrackedSymbol { id: 156, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<PalletsOriginOf<T>>"), docs: [] }, Field { name: Some("proposal"), ty: UntrackedSymbol { id: 103, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedCallOf<T, I>"), docs: [] }, Field { name: Some("enactment_moment"), ty: UntrackedSymbol { id: 162, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchTime<BlockNumberFor<T, I>>"), docs: [] }], index: 0, docs: ["Propose a referendum on a privileged action.", "", "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds", "  available.", "- `proposal_origin`: The origin from which the proposal should be executed.", "- `proposal`: The proposal.", "- `enactment_moment`: The moment that the proposal should be enacted.", "", "Emits `Submitted`."] }, Variant { name: "place_decision_deposit", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: [] }], index: 1, docs: ["Post the Decision Deposit for a referendum.", "", "- `origin`: must be `Signed` and the account must have funds available for the", "  referendum's track's Decision Deposit.", "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be", "  posted.", "", "Emits `DecisionDepositPlaced`."] }, Variant { name: "refund_decision_deposit", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: [] }], index: 2, docs: ["Refund the Decision Deposit for a closed referendum back to the depositor.", "", "- `origin`: must be `Signed` or `Root`.", "- `index`: The index of a closed referendum whose Decision Deposit has not yet been", "  refunded.", "", "Emits `DecisionDepositRefunded`."] }, Variant { name: "cancel", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: [] }], index: 3, docs: ["Cancel an ongoing referendum.", "", "- `origin`: must be the `CancelOrigin`.", "- `index`: The index of the referendum to be cancelled.", "", "Emits `Cancelled`."] }, Variant { name: "kill", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: [] }], index: 4, docs: ["Cancel an ongoing referendum and slash the deposits.", "", "- `origin`: must be the `KillOrigin`.", "- `index`: The index of the referendum to be cancelled.", "", "Emits `Killed` and `DepositSlashed`."] }, Variant { name: "nudge_referendum", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: [] }], index: 5, docs: ["Advance a referendum onto its next logical state. Only used internally.", "", "- `origin`: must be `Root`.", "- `index`: the referendum to be advanced."] }, Variant { name: "one_fewer_deciding", fields: [Field { name: Some("track"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TrackIdOf<T, I>"), docs: [] }], index: 6, docs: ["Advance a track onto its next logical state. Only used internally.", "", "- `origin`: must be `Root`.", "- `track`: the track to be advanced.", "", "Action item for when there is now one fewer referendum in the deciding phase and the", "`DecidingCount` is not yet updated. This means that we should either:", "- begin deciding another referendum (and leave `DecidingCount` alone); or", "- decrement `DecidingCount`."] }, Variant { name: "refund_submission_deposit", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: [] }], index: 7, docs: ["Refund the Submission Deposit for a closed referendum back to the depositor.", "", "- `origin`: must be `Signed` or `Root`.", "- `index`: The index of a closed referendum whose Submission Deposit has not yet been", "  refunded.", "", "Emits `SubmissionDepositRefunded`."] }, Variant { name: "set_metadata", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: [] }, Field { name: Some("maybe_hash"), ty: UntrackedSymbol { id: 163, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<T::Hash>"), docs: [] }], index: 8, docs: ["Set or clear metadata of a referendum.", "", "Parameters:", "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a", "  metadata of a finished referendum.", "- `index`:  The index of a referendum to set or clear metadata for.", "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 156, ty: Type { path: Path { segments: ["rococo_runtime", "OriginCaller"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "system", fields: [Field { name: None, ty: UntrackedSymbol { id: 157, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("frame_system::Origin<Runtime>"), docs: [] }], index: 0, docs: [] }, Variant { name: "Origins", fields: [Field { name: None, ty: UntrackedSymbol { id: 158, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_custom_origins::Origin"), docs: [] }], index: 43, docs: [] }, Variant { name: "ParachainsOrigin", fields: [Field { name: None, ty: UntrackedSymbol { id: 159, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("parachains_origin::Origin"), docs: [] }], index: 50, docs: [] }, Variant { name: "XcmPallet", fields: [Field { name: None, ty: UntrackedSymbol { id: 161, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_xcm::Origin"), docs: [] }], index: 99, docs: [] }] }), docs: [] } }, PortableType { id: 157, ty: Type { path: Path { segments: ["frame_support", "dispatch", "RawOrigin"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Root", fields: [], index: 0, docs: [] }, Variant { name: "Signed", fields: [Field { name: None, ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }], index: 1, docs: [] }, Variant { name: "None", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 158, ty: Type { path: Path { segments: ["rococo_runtime", "governance", "origins", "pallet_custom_origins", "Origin"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "StakingAdmin", fields: [], index: 0, docs: [] }, Variant { name: "Treasurer", fields: [], index: 1, docs: [] }, Variant { name: "FellowshipAdmin", fields: [], index: 2, docs: [] }, Variant { name: "GeneralAdmin", fields: [], index: 3, docs: [] }, Variant { name: "AuctionAdmin", fields: [], index: 4, docs: [] }, Variant { name: "LeaseAdmin", fields: [], index: 5, docs: [] }, Variant { name: "ReferendumCanceller", fields: [], index: 6, docs: [] }, Variant { name: "ReferendumKiller", fields: [], index: 7, docs: [] }, Variant { name: "SmallTipper", fields: [], index: 8, docs: [] }, Variant { name: "BigTipper", fields: [], index: 9, docs: [] }, Variant { name: "SmallSpender", fields: [], index: 10, docs: [] }, Variant { name: "MediumSpender", fields: [], index: 11, docs: [] }, Variant { name: "BigSpender", fields: [], index: 12, docs: [] }, Variant { name: "WhitelistedCaller", fields: [], index: 13, docs: [] }, Variant { name: "FellowshipInitiates", fields: [], index: 14, docs: [] }, Variant { name: "Fellows", fields: [], index: 15, docs: [] }, Variant { name: "FellowshipExperts", fields: [], index: 16, docs: [] }, Variant { name: "FellowshipMasters", fields: [], index: 17, docs: [] }, Variant { name: "Fellowship1Dan", fields: [], index: 18, docs: [] }, Variant { name: "Fellowship2Dan", fields: [], index: 19, docs: [] }, Variant { name: "Fellowship3Dan", fields: [], index: 20, docs: [] }, Variant { name: "Fellowship4Dan", fields: [], index: 21, docs: [] }, Variant { name: "Fellowship5Dan", fields: [], index: 22, docs: [] }, Variant { name: "Fellowship6Dan", fields: [], index: 23, docs: [] }, Variant { name: "Fellowship7Dan", fields: [], index: 24, docs: [] }, Variant { name: "Fellowship8Dan", fields: [], index: 25, docs: [] }, Variant { name: "Fellowship9Dan", fields: [], index: 26, docs: [] }] }), docs: [] } }, PortableType { id: 159, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "origin", "pallet", "Origin"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Parachain", fields: [Field { name: None, ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 0, docs: [] }] }), docs: [] } }, PortableType { id: 160, ty: Type { path: Path { segments: ["polkadot_parachain_primitives", "primitives", "Id"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 161, ty: Type { path: Path { segments: ["pallet_xcm", "pallet", "Origin"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Xcm", fields: [Field { name: None, ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 0, docs: [] }, Variant { name: "Response", fields: [Field { name: None, ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 162, ty: Type { path: Path { segments: ["frame_support", "traits", "schedule", "DispatchTime"] }, type_params: [TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "At", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }], index: 0, docs: [] }, Variant { name: "After", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 163, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 164, ty: Type { path: Path { segments: ["pallet_ranked_collective", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "add_member", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 0, docs: ["Introduce a new member.", "", "- `origin`: Must be the `AddOrigin`.", "- `who`: Account of non-member which will become a member.", "", "Weight: `O(1)`"] }, Variant { name: "promote_member", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 1, docs: ["Increment the rank of an existing member by one.", "", "- `origin`: Must be the `PromoteOrigin`.", "- `who`: Account of existing member.", "", "Weight: `O(1)`"] }, Variant { name: "demote_member", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 2, docs: ["Decrement the rank of an existing member by one. If the member is already at rank zero,", "then they are removed entirely.", "", "- `origin`: Must be the `DemoteOrigin`.", "- `who`: Account of existing member of rank greater than zero.", "", "Weight: `O(1)`, less if the member's index is highest in its rank."] }, Variant { name: "remove_member", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("min_rank"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Rank"), docs: [] }], index: 3, docs: ["Remove the member entirely.", "", "- `origin`: Must be the `RemoveOrigin`.", "- `who`: Account of existing member of rank greater than zero.", "- `min_rank`: The rank of the member or greater.", "", "Weight: `O(min_rank)`."] }, Variant { name: "vote", fields: [Field { name: Some("poll"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PollIndexOf<T, I>"), docs: [] }, Field { name: Some("aye"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 4, docs: ["Add an aye or nay vote for the sender to the given proposal.", "", "- `origin`: Must be `Signed` by a member account.", "- `poll`: Index of a poll which is ongoing.", "- `aye`: `true` if the vote is to approve the proposal, `false` otherwise.", "", "Transaction fees are be waived if the member is voting on any particular proposal", "for the first time and the call is successful. Subsequent vote changes will charge a", "fee.", "", "Weight: `O(1)`, less if there was no previous vote on the poll by the member."] }, Variant { name: "cleanup_poll", fields: [Field { name: Some("poll_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PollIndexOf<T, I>"), docs: [] }, Field { name: Some("max"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 5, docs: ["Remove votes from the given poll. It must have ended.", "", "- `origin`: Must be `Signed` by any account.", "- `poll_index`: Index of a poll which is completed and for which votes continue to", "  exist.", "- `max`: Maximum number of vote items from remove in this call.", "", "Transaction fees are waived if the operation is successful.", "", "Weight `O(max)` (less if there are fewer items to remove than `max`)."] }, Variant { name: "exchange_member", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("new_who"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 6, docs: ["Exchanges a member with a new account and the same existing rank.", "", "- `origin`: Must be the `ExchangeOrigin`.", "- `who`: Account of existing member of rank greater than zero to be exchanged.", "- `new_who`: New Account of existing member of rank greater than zero to exchanged to."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 165, ty: Type { path: Path { segments: ["pallet_referenda", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "submit", fields: [Field { name: Some("proposal_origin"), ty: UntrackedSymbol { id: 156, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<PalletsOriginOf<T>>"), docs: [] }, Field { name: Some("proposal"), ty: UntrackedSymbol { id: 103, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedCallOf<T, I>"), docs: [] }, Field { name: Some("enactment_moment"), ty: UntrackedSymbol { id: 162, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchTime<BlockNumberFor<T, I>>"), docs: [] }], index: 0, docs: ["Propose a referendum on a privileged action.", "", "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds", "  available.", "- `proposal_origin`: The origin from which the proposal should be executed.", "- `proposal`: The proposal.", "- `enactment_moment`: The moment that the proposal should be enacted.", "", "Emits `Submitted`."] }, Variant { name: "place_decision_deposit", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: [] }], index: 1, docs: ["Post the Decision Deposit for a referendum.", "", "- `origin`: must be `Signed` and the account must have funds available for the", "  referendum's track's Decision Deposit.", "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be", "  posted.", "", "Emits `DecisionDepositPlaced`."] }, Variant { name: "refund_decision_deposit", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: [] }], index: 2, docs: ["Refund the Decision Deposit for a closed referendum back to the depositor.", "", "- `origin`: must be `Signed` or `Root`.", "- `index`: The index of a closed referendum whose Decision Deposit has not yet been", "  refunded.", "", "Emits `DecisionDepositRefunded`."] }, Variant { name: "cancel", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: [] }], index: 3, docs: ["Cancel an ongoing referendum.", "", "- `origin`: must be the `CancelOrigin`.", "- `index`: The index of the referendum to be cancelled.", "", "Emits `Cancelled`."] }, Variant { name: "kill", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: [] }], index: 4, docs: ["Cancel an ongoing referendum and slash the deposits.", "", "- `origin`: must be the `KillOrigin`.", "- `index`: The index of the referendum to be cancelled.", "", "Emits `Killed` and `DepositSlashed`."] }, Variant { name: "nudge_referendum", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: [] }], index: 5, docs: ["Advance a referendum onto its next logical state. Only used internally.", "", "- `origin`: must be `Root`.", "- `index`: the referendum to be advanced."] }, Variant { name: "one_fewer_deciding", fields: [Field { name: Some("track"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TrackIdOf<T, I>"), docs: [] }], index: 6, docs: ["Advance a track onto its next logical state. Only used internally.", "", "- `origin`: must be `Root`.", "- `track`: the track to be advanced.", "", "Action item for when there is now one fewer referendum in the deciding phase and the", "`DecidingCount` is not yet updated. This means that we should either:", "- begin deciding another referendum (and leave `DecidingCount` alone); or", "- decrement `DecidingCount`."] }, Variant { name: "refund_submission_deposit", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: [] }], index: 7, docs: ["Refund the Submission Deposit for a closed referendum back to the depositor.", "", "- `origin`: must be `Signed` or `Root`.", "- `index`: The index of a closed referendum whose Submission Deposit has not yet been", "  refunded.", "", "Emits `SubmissionDepositRefunded`."] }, Variant { name: "set_metadata", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: [] }, Field { name: Some("maybe_hash"), ty: UntrackedSymbol { id: 163, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<T::Hash>"), docs: [] }], index: 8, docs: ["Set or clear metadata of a referendum.", "", "Parameters:", "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a", "  metadata of a finished referendum.", "- `index`:  The index of a referendum to set or clear metadata for.", "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 166, ty: Type { path: Path { segments: ["pallet_whitelist", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "whitelist_call", fields: [Field { name: Some("call_hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 0, docs: [] }, Variant { name: "remove_whitelisted_call", fields: [Field { name: Some("call_hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 1, docs: [] }, Variant { name: "dispatch_whitelisted_call", fields: [Field { name: Some("call_hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("call_encoded_len"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("call_weight_witness"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }], index: 2, docs: [] }, Variant { name: "dispatch_whitelisted_call_with_preimage", fields: [Field { name: Some("call"), ty: UntrackedSymbol { id: 104, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }], index: 3, docs: [] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 167, ty: Type { path: Path { segments: ["polkadot_runtime_common", "claims", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "claim", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("ethereum_signature"), ty: UntrackedSymbol { id: 168, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EcdsaSignature"), docs: [] }], index: 0, docs: ["Make a claim to collect your DOTs.", "", "The dispatch origin for this call must be _None_.", "", "Unsigned Validation:", "A call to claim is deemed valid if the signature provided matches", "the expected signed message of:", "", "> Ethereum Signed Message:", "> (configured prefix string)(address)", "", "and `address` matches the `dest` account.", "", "Parameters:", "- `dest`: The destination account to payout the claim.", "- `ethereum_signature`: The signature of an ethereum signed message matching the format", "  described above.", "", "<weight>", "The weight of this call is invariant over the input parameters.", "Weight includes logic to validate unsigned `claim` call.", "", "Total Complexity: O(1)", "</weight>"] }, Variant { name: "mint_claim", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 170, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EthereumAddress"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("vesting_schedule"), ty: UntrackedSymbol { id: 171, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<(BalanceOf<T>, BalanceOf<T>, BlockNumberFor<T>)>"), docs: [] }, Field { name: Some("statement"), ty: UntrackedSymbol { id: 173, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<StatementKind>"), docs: [] }], index: 1, docs: ["Mint a new claim to collect DOTs.", "", "The dispatch origin for this call must be _Root_.", "", "Parameters:", "- `who`: The Ethereum address allowed to collect this claim.", "- `value`: The number of DOTs that will be claimed.", "- `vesting_schedule`: An optional vesting schedule for these DOTs.", "", "<weight>", "The weight of this call is invariant over the input parameters.", "We assume worst case that both vesting and statement is being inserted.", "", "Total Complexity: O(1)", "</weight>"] }, Variant { name: "claim_attest", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("ethereum_signature"), ty: UntrackedSymbol { id: 168, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EcdsaSignature"), docs: [] }, Field { name: Some("statement"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 2, docs: ["Make a claim to collect your DOTs by signing a statement.", "", "The dispatch origin for this call must be _None_.", "", "Unsigned Validation:", "A call to `claim_attest` is deemed valid if the signature provided matches", "the expected signed message of:", "", "> Ethereum Signed Message:", "> (configured prefix string)(address)(statement)", "", "and `address` matches the `dest` account; the `statement` must match that which is", "expected according to your purchase arrangement.", "", "Parameters:", "- `dest`: The destination account to payout the claim.", "- `ethereum_signature`: The signature of an ethereum signed message matching the format", "  described above.", "- `statement`: The identity of the statement which is being attested to in the", "  signature.", "", "<weight>", "The weight of this call is invariant over the input parameters.", "Weight includes logic to validate unsigned `claim_attest` call.", "", "Total Complexity: O(1)", "</weight>"] }, Variant { name: "attest", fields: [Field { name: Some("statement"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 3, docs: ["Attest to a statement, needed to finalize the claims process.", "", "WARNING: Insecure unless your chain includes `PrevalidateAttests` as a", "`TransactionExtension`.", "", "Unsigned Validation:", "A call to attest is deemed valid if the sender has a `Preclaim` registered", "and provides a `statement` which is expected for the account.", "", "Parameters:", "- `statement`: The identity of the statement which is being attested to in the", "  signature.", "", "<weight>", "The weight of this call is invariant over the input parameters.", "Weight includes logic to do pre-validation on `attest` call.", "", "Total Complexity: O(1)", "</weight>"] }, Variant { name: "move_claim", fields: [Field { name: Some("old"), ty: UntrackedSymbol { id: 170, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EthereumAddress"), docs: [] }, Field { name: Some("new"), ty: UntrackedSymbol { id: 170, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EthereumAddress"), docs: [] }, Field { name: Some("maybe_preclaim"), ty: UntrackedSymbol { id: 175, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<T::AccountId>"), docs: [] }], index: 4, docs: [] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 168, ty: Type { path: Path { segments: ["polkadot_runtime_common", "claims", "EcdsaSignature"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 169, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 65]"), docs: [] }] }), docs: [] } }, PortableType { id: 169, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 65, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 170, ty: Type { path: Path { segments: ["polkadot_runtime_common", "claims", "EthereumAddress"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 64, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 20]"), docs: [] }] }), docs: [] } }, PortableType { id: 171, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 172, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 173, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 174, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 174, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 174, ty: Type { path: Path { segments: ["polkadot_runtime_common", "claims", "StatementKind"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Regular", fields: [], index: 0, docs: [] }, Variant { name: "Saft", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 175, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 176, ty: Type { path: Path { segments: ["pallet_utility", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "batch", fields: [Field { name: Some("calls"), ty: UntrackedSymbol { id: 177, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<<T as Config>::RuntimeCall>"), docs: [] }], index: 0, docs: ["Send a batch of dispatch calls.", "", "May be called from any origin except `None`.", "", "- `calls`: The calls to be dispatched from the same origin. The number of call must not", "  exceed the constant: `batched_calls_limit` (available in constant metadata).", "", "If origin is root then the calls are dispatched without checking origin filter. (This", "includes bypassing `frame_system::Config::BaseCallFilter`).", "", "## Complexity", "- O(C) where C is the number of calls to be batched.", "", "This will return `Ok` in all circumstances. To determine the success of the batch, an", "event is deposited. If a call failed and the batch was interrupted, then the", "`BatchInterrupted` event is deposited, along with the number of successful calls made", "and the error of the failed call. If all were successful, then the `BatchCompleted`", "event is deposited."] }, Variant { name: "as_derivative", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u16"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 104, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }], index: 1, docs: ["Send a call through an indexed pseudonym of the sender.", "", "Filter from origin are passed along. The call will be dispatched with an origin which", "use the same filter as the origin of this call.", "", "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.", "because you expect `proxy` to have been used prior in the call stack and you do not want", "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`", "in the Multisig pallet instead.", "", "NOTE: Prior to version *12, this was called `as_limited_sub`.", "", "The dispatch origin for this call must be _Signed_."] }, Variant { name: "batch_all", fields: [Field { name: Some("calls"), ty: UntrackedSymbol { id: 177, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<<T as Config>::RuntimeCall>"), docs: [] }], index: 2, docs: ["Send a batch of dispatch calls and atomically execute them.", "The whole transaction will rollback and fail if any of the calls failed.", "", "May be called from any origin except `None`.", "", "- `calls`: The calls to be dispatched from the same origin. The number of call must not", "  exceed the constant: `batched_calls_limit` (available in constant metadata).", "", "If origin is root then the calls are dispatched without checking origin filter. (This", "includes bypassing `frame_system::Config::BaseCallFilter`).", "", "## Complexity", "- O(C) where C is the number of calls to be batched."] }, Variant { name: "dispatch_as", fields: [Field { name: Some("as_origin"), ty: UntrackedSymbol { id: 156, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<T::PalletsOrigin>"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 104, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }], index: 3, docs: ["Dispatches a function call with a provided origin.", "", "The dispatch origin for this call must be _Root_.", "", "## Complexity", "- O(1)."] }, Variant { name: "force_batch", fields: [Field { name: Some("calls"), ty: UntrackedSymbol { id: 177, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<<T as Config>::RuntimeCall>"), docs: [] }], index: 4, docs: ["Send a batch of dispatch calls.", "Unlike `batch`, it allows errors and won't interrupt.", "", "May be called from any origin except `None`.", "", "- `calls`: The calls to be dispatched from the same origin. The number of call must not", "  exceed the constant: `batched_calls_limit` (available in constant metadata).", "", "If origin is root then the calls are dispatch without checking origin filter. (This", "includes bypassing `frame_system::Config::BaseCallFilter`).", "", "## Complexity", "- O(C) where C is the number of calls to be batched."] }, Variant { name: "with_weight", fields: [Field { name: Some("call"), ty: UntrackedSymbol { id: 104, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }, Field { name: Some("weight"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }], index: 5, docs: ["Dispatch a function call with a specified weight.", "", "This function does not check the weight of the call, and instead allows the", "Root origin to specify the weight of the call.", "", "The dispatch origin for this call must be _Root_."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 177, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 104, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 178, ty: Type { path: Path { segments: ["pallet_identity", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "add_registrar", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 0, docs: ["Add a registrar to the system.", "", "The dispatch origin for this call must be `T::RegistrarOrigin`.", "", "- `account`: the account of the registrar.", "", "Emits `RegistrarAdded` if successful."] }, Variant { name: "set_identity", fields: [Field { name: Some("info"), ty: UntrackedSymbol { id: 179, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<T::IdentityInformation>"), docs: [] }], index: 1, docs: ["Set an account's identity information and reserve the appropriate deposit.", "", "If the account already has identity information, the deposit is taken as part payment", "for the new deposit.", "", "The dispatch origin for this call must be _Signed_.", "", "- `info`: The identity information.", "", "Emits `IdentitySet` if successful."] }, Variant { name: "set_subs", fields: [Field { name: Some("subs"), ty: UntrackedSymbol { id: 214, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<(T::AccountId, Data)>"), docs: [] }], index: 2, docs: ["Set the sub-accounts of the sender.", "", "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned", "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.", "", "The dispatch origin for this call must be _Signed_ and the sender must have a registered", "identity.", "", "- `subs`: The identity's (new) sub-accounts."] }, Variant { name: "clear_identity", fields: [], index: 3, docs: ["Clear an account's identity info and all sub-accounts and return all deposits.", "", "Payment: All reserved balances on the account are returned.", "", "The dispatch origin for this call must be _Signed_ and the sender must have a registered", "identity.", "", "Emits `IdentityCleared` if successful."] }, Variant { name: "request_judgement", fields: [Field { name: Some("reg_index"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RegistrarIndex"), docs: [] }, Field { name: Some("max_fee"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 4, docs: ["Request a judgement from a registrar.", "", "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement", "given.", "", "The dispatch origin for this call must be _Signed_ and the sender must have a", "registered identity.", "", "- `reg_index`: The index of the registrar whose judgement is requested.", "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:", "", "```nocompile", "Registrars::<T>::get().get(reg_index).unwrap().fee", "```", "", "Emits `JudgementRequested` if successful."] }, Variant { name: "cancel_request", fields: [Field { name: Some("reg_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RegistrarIndex"), docs: [] }], index: 5, docs: ["Cancel a previous request.", "", "Payment: A previously reserved deposit is returned on success.", "", "The dispatch origin for this call must be _Signed_ and the sender must have a", "registered identity.", "", "- `reg_index`: The index of the registrar whose judgement is no longer requested.", "", "Emits `JudgementUnrequested` if successful."] }, Variant { name: "set_fee", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RegistrarIndex"), docs: [] }, Field { name: Some("fee"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 6, docs: ["Set the fee required for a judgement to be requested from a registrar.", "", "The dispatch origin for this call must be _Signed_ and the sender must be the account", "of the registrar whose index is `index`.", "", "- `index`: the index of the registrar whose fee is to be set.", "- `fee`: the new fee."] }, Variant { name: "set_account_id", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RegistrarIndex"), docs: [] }, Field { name: Some("new"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 7, docs: ["Change the account associated with a registrar.", "", "The dispatch origin for this call must be _Signed_ and the sender must be the account", "of the registrar whose index is `index`.", "", "- `index`: the index of the registrar whose fee is to be set.", "- `new`: the new account ID."] }, Variant { name: "set_fields", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RegistrarIndex"), docs: [] }, Field { name: Some("fields"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<T::IdentityInformation as IdentityInformationProvider>::\nFieldsIdentifier"), docs: [] }], index: 8, docs: ["Set the field information for a registrar.", "", "The dispatch origin for this call must be _Signed_ and the sender must be the account", "of the registrar whose index is `index`.", "", "- `index`: the index of the registrar whose fee is to be set.", "- `fields`: the fields that the registrar concerns themselves with."] }, Variant { name: "provide_judgement", fields: [Field { name: Some("reg_index"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RegistrarIndex"), docs: [] }, Field { name: Some("target"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("judgement"), ty: UntrackedSymbol { id: 216, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Judgement<BalanceOf<T>>"), docs: [] }, Field { name: Some("identity"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 9, docs: ["Provide a judgement for an account's identity.", "", "The dispatch origin for this call must be _Signed_ and the sender must be the account", "of the registrar whose index is `reg_index`.", "", "- `reg_index`: the index of the registrar whose judgement is being made.", "- `target`: the account whose identity the judgement is upon. This must be an account", "  with a registered identity.", "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.", "- `identity`: The hash of the [`IdentityInformationProvider`] for that the judgement is", "  provided.", "", "Note: Judgements do not apply to a username.", "", "Emits `JudgementGiven` if successful."] }, Variant { name: "kill_identity", fields: [Field { name: Some("target"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 10, docs: ["Remove an account's identity and sub-account information and slash the deposits.", "", "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by", "`Slash`. Verification request deposits are not returned; they should be cancelled", "manually using `cancel_request`.", "", "The dispatch origin for this call must match `T::ForceOrigin`.", "", "- `target`: the account whose identity the judgement is upon. This must be an account", "  with a registered identity.", "", "Emits `IdentityKilled` if successful."] }, Variant { name: "add_sub", fields: [Field { name: Some("sub"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 182, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Data"), docs: [] }], index: 11, docs: ["Add the given account to the sender's subs.", "", "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated", "to the sender.", "", "The dispatch origin for this call must be _Signed_ and the sender must have a registered", "sub identity of `sub`."] }, Variant { name: "rename_sub", fields: [Field { name: Some("sub"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 182, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Data"), docs: [] }], index: 12, docs: ["Alter the associated name of the given sub-account.", "", "The dispatch origin for this call must be _Signed_ and the sender must have a registered", "sub identity of `sub`."] }, Variant { name: "remove_sub", fields: [Field { name: Some("sub"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 13, docs: ["Remove the given account from the sender's subs.", "", "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated", "to the sender.", "", "The dispatch origin for this call must be _Signed_ and the sender must have a registered", "sub identity of `sub`."] }, Variant { name: "quit_sub", fields: [], index: 14, docs: ["Remove the sender as a sub-account.", "", "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated", "to the sender (*not* the original depositor).", "", "The dispatch origin for this call must be _Signed_ and the sender must have a registered", "super-identity.", "", "NOTE: This should not normally be used, but is provided in the case that the non-", "controller of an account is maliciously registered as a sub-account."] }, Variant { name: "add_username_authority", fields: [Field { name: Some("authority"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("suffix"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("allocation"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 15, docs: ["Add an `AccountId` with permission to grant usernames with a given `suffix` appended.", "", "The authority can grant up to `allocation` usernames. To top up the allocation or", "change the account used to grant usernames, this call can be used with the updated", "parameters to overwrite the existing configuration."] }, Variant { name: "remove_username_authority", fields: [Field { name: Some("suffix"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("authority"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 16, docs: ["Remove `authority` from the username authorities."] }, Variant { name: "set_username_for", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("username"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("signature"), ty: UntrackedSymbol { id: 217, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<T::OffchainSignature>"), docs: [] }, Field { name: Some("use_allocation"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 17, docs: ["Set the username for `who`. Must be called by a username authority.", "", "If `use_allocation` is set, the authority must have a username allocation available to", "spend. Otherwise, the authority will need to put up a deposit for registering the", "username.", "", "Users can either pre-sign their usernames or", "accept them later.", "", "Usernames must:", "  - Only contain lowercase ASCII characters or digits.", "  - When combined with the suffix of the issuing authority be _less than_ the", "    `MaxUsernameLength`."] }, Variant { name: "accept_username", fields: [Field { name: Some("username"), ty: UntrackedSymbol { id: 219, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Username<T>"), docs: [] }], index: 18, docs: ["Accept a given username that an `authority` granted. The call must include the full", "username, as in `username.suffix`."] }, Variant { name: "remove_expired_approval", fields: [Field { name: Some("username"), ty: UntrackedSymbol { id: 219, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Username<T>"), docs: [] }], index: 19, docs: ["Remove an expired username approval. The username was approved by an authority but never", "accepted by the user and must now be beyond its expiration. The call must include the", "full username, as in `username.suffix`."] }, Variant { name: "set_primary_username", fields: [Field { name: Some("username"), ty: UntrackedSymbol { id: 219, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Username<T>"), docs: [] }], index: 20, docs: ["Set a given username as the primary. The username should include the suffix."] }, Variant { name: "unbind_username", fields: [Field { name: Some("username"), ty: UntrackedSymbol { id: 219, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Username<T>"), docs: [] }], index: 21, docs: ["Start the process of removing a username by placing it in the unbinding usernames map.", "Once the grace period has passed, the username can be deleted by calling", "[remove_username](crate::Call::remove_username)."] }, Variant { name: "remove_username", fields: [Field { name: Some("username"), ty: UntrackedSymbol { id: 219, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Username<T>"), docs: [] }], index: 22, docs: ["Permanently delete a username which has been unbinding for longer than the grace period.", "Caller is refunded the fee if the username expired and the removal was successful."] }, Variant { name: "kill_username", fields: [Field { name: Some("username"), ty: UntrackedSymbol { id: 219, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Username<T>"), docs: [] }], index: 23, docs: ["Call with [ForceOrigin](crate::Config::ForceOrigin) privileges which deletes a username", "and slashes any deposit associated with it."] }] }), docs: ["Identity pallet declaration."] } }, PortableType { id: 179, ty: Type { path: Path { segments: ["pallet_identity", "legacy", "IdentityInfo"] }, type_params: [TypeParameter { name: "FieldLimit", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("additional"), ty: UntrackedSymbol { id: 180, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<(Data, Data), FieldLimit>"), docs: [] }, Field { name: Some("display"), ty: UntrackedSymbol { id: 182, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Data"), docs: [] }, Field { name: Some("legal"), ty: UntrackedSymbol { id: 182, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Data"), docs: [] }, Field { name: Some("web"), ty: UntrackedSymbol { id: 182, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Data"), docs: [] }, Field { name: Some("riot"), ty: UntrackedSymbol { id: 182, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Data"), docs: [] }, Field { name: Some("email"), ty: UntrackedSymbol { id: 182, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Data"), docs: [] }, Field { name: Some("pgp_fingerprint"), ty: UntrackedSymbol { id: 213, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<[u8; 20]>"), docs: [] }, Field { name: Some("image"), ty: UntrackedSymbol { id: 182, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Data"), docs: [] }, Field { name: Some("twitter"), ty: UntrackedSymbol { id: 182, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Data"), docs: [] }] }), docs: [] } }, PortableType { id: 180, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 181, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 212, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 181, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 182, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 182, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 182, ty: Type { path: Path { segments: ["pallet_identity", "types", "Data"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Raw0", fields: [Field { name: None, ty: UntrackedSymbol { id: 183, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }, Variant { name: "Raw1", fields: [Field { name: None, ty: UntrackedSymbol { id: 184, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 2, docs: [] }, Variant { name: "Raw2", fields: [Field { name: None, ty: UntrackedSymbol { id: 185, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 3, docs: [] }, Variant { name: "Raw3", fields: [Field { name: None, ty: UntrackedSymbol { id: 186, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 4, docs: [] }, Variant { name: "Raw4", fields: [Field { name: None, ty: UntrackedSymbol { id: 18, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 5, docs: [] }, Variant { name: "Raw5", fields: [Field { name: None, ty: UntrackedSymbol { id: 187, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 6, docs: [] }, Variant { name: "Raw6", fields: [Field { name: None, ty: UntrackedSymbol { id: 188, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 7, docs: [] }, Variant { name: "Raw7", fields: [Field { name: None, ty: UntrackedSymbol { id: 189, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 8, docs: [] }, Variant { name: "Raw8", fields: [Field { name: None, ty: UntrackedSymbol { id: 190, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 9, docs: [] }, Variant { name: "Raw9", fields: [Field { name: None, ty: UntrackedSymbol { id: 191, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 10, docs: [] }, Variant { name: "Raw10", fields: [Field { name: None, ty: UntrackedSymbol { id: 192, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 11, docs: [] }, Variant { name: "Raw11", fields: [Field { name: None, ty: UntrackedSymbol { id: 193, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 12, docs: [] }, Variant { name: "Raw12", fields: [Field { name: None, ty: UntrackedSymbol { id: 194, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 13, docs: [] }, Variant { name: "Raw13", fields: [Field { name: None, ty: UntrackedSymbol { id: 195, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 14, docs: [] }, Variant { name: "Raw14", fields: [Field { name: None, ty: UntrackedSymbol { id: 196, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 15, docs: [] }, Variant { name: "Raw15", fields: [Field { name: None, ty: UntrackedSymbol { id: 197, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 16, docs: [] }, Variant { name: "Raw16", fields: [Field { name: None, ty: UntrackedSymbol { id: 50, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 17, docs: [] }, Variant { name: "Raw17", fields: [Field { name: None, ty: UntrackedSymbol { id: 198, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 18, docs: [] }, Variant { name: "Raw18", fields: [Field { name: None, ty: UntrackedSymbol { id: 199, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 19, docs: [] }, Variant { name: "Raw19", fields: [Field { name: None, ty: UntrackedSymbol { id: 200, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 20, docs: [] }, Variant { name: "Raw20", fields: [Field { name: None, ty: UntrackedSymbol { id: 64, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 21, docs: [] }, Variant { name: "Raw21", fields: [Field { name: None, ty: UntrackedSymbol { id: 201, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 22, docs: [] }, Variant { name: "Raw22", fields: [Field { name: None, ty: UntrackedSymbol { id: 202, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 23, docs: [] }, Variant { name: "Raw23", fields: [Field { name: None, ty: UntrackedSymbol { id: 203, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 24, docs: [] }, Variant { name: "Raw24", fields: [Field { name: None, ty: UntrackedSymbol { id: 204, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 25, docs: [] }, Variant { name: "Raw25", fields: [Field { name: None, ty: UntrackedSymbol { id: 205, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 26, docs: [] }, Variant { name: "Raw26", fields: [Field { name: None, ty: UntrackedSymbol { id: 206, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 27, docs: [] }, Variant { name: "Raw27", fields: [Field { name: None, ty: UntrackedSymbol { id: 207, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 28, docs: [] }, Variant { name: "Raw28", fields: [Field { name: None, ty: UntrackedSymbol { id: 208, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 29, docs: [] }, Variant { name: "Raw29", fields: [Field { name: None, ty: UntrackedSymbol { id: 209, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 30, docs: [] }, Variant { name: "Raw30", fields: [Field { name: None, ty: UntrackedSymbol { id: 210, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 31, docs: [] }, Variant { name: "Raw31", fields: [Field { name: None, ty: UntrackedSymbol { id: 211, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 32, docs: [] }, Variant { name: "Raw32", fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 33, docs: [] }, Variant { name: "BlakeTwo256", fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 34, docs: [] }, Variant { name: "Sha256", fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 35, docs: [] }, Variant { name: "Keccak256", fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 36, docs: [] }, Variant { name: "ShaThree256", fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 37, docs: [] }] }), docs: [] } }, PortableType { id: 183, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 0, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 184, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 1, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 185, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 2, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 186, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 3, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 187, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 5, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 188, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 6, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 189, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 7, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 190, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 8, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 191, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 9, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 192, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 10, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 193, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 11, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 194, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 12, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 195, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 13, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 196, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 14, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 197, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 15, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 198, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 17, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 199, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 18, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 200, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 19, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 201, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 21, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 202, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 22, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 203, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 23, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 204, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 24, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 205, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 25, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 206, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 26, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 207, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 27, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 208, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 28, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 209, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 29, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 210, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 30, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 211, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 31, type_param: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 212, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 181, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 213, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 64, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 64, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 214, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 215, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 215, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 182, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 216, ty: Type { path: Path { segments: ["pallet_identity", "types", "Judgement"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Unknown", fields: [], index: 0, docs: [] }, Variant { name: "FeePaid", fields: [Field { name: None, ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }], index: 1, docs: [] }, Variant { name: "Reasonable", fields: [], index: 2, docs: [] }, Variant { name: "KnownGood", fields: [], index: 3, docs: [] }, Variant { name: "OutOfDate", fields: [], index: 4, docs: [] }, Variant { name: "LowQuality", fields: [], index: 5, docs: [] }, Variant { name: "Erroneous", fields: [], index: 6, docs: [] }] }), docs: [] } }, PortableType { id: 217, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 218, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 218, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 218, ty: Type { path: Path { segments: ["sp_runtime", "MultiSignature"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ed25519", fields: [Field { name: None, ty: UntrackedSymbol { id: 145, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ed25519::Signature"), docs: [] }], index: 0, docs: [] }, Variant { name: "Sr25519", fields: [Field { name: None, ty: UntrackedSymbol { id: 145, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("sr25519::Signature"), docs: [] }], index: 1, docs: [] }, Variant { name: "Ecdsa", fields: [Field { name: None, ty: UntrackedSymbol { id: 169, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ecdsa::Signature"), docs: [] }], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 219, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 220, ty: Type { path: Path { segments: ["pallet_society", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "bid", fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], index: 0, docs: ["A user outside of the society can make a bid for entry.", "", "Payment: The group's Candidate Deposit will be reserved for making a bid. It is returned", "when the bid becomes a member, or if the bid calls `unbid`.", "", "The dispatch origin for this call must be _Signed_.", "", "Parameters:", "- `value`: A one time payment the bid would like to receive when joining the society."] }, Variant { name: "unbid", fields: [], index: 1, docs: ["A bidder can remove their bid for entry into society.", "By doing so, they will have their candidate deposit returned or", "they will unvouch their voucher.", "", "Payment: The bid deposit is unreserved if the user made a bid.", "", "The dispatch origin for this call must be _Signed_ and a bidder."] }, Variant { name: "vouch", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }, Field { name: Some("tip"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], index: 2, docs: ["As a member, vouch for someone to join society by placing a bid on their behalf.", "", "There is no deposit required to vouch for a new bid, but a member can only vouch for", "one bid at a time. If the bid becomes a suspended candidate and ultimately rejected by", "the suspension judgement origin, the member will be banned from vouching again.", "", "As a vouching member, you can claim a tip if the candidate is accepted. This tip will", "be paid as a portion of the reward the member will receive for joining the society.", "", "The dispatch origin for this call must be _Signed_ and a member.", "", "Parameters:", "- `who`: The user who you would like to vouch for.", "- `value`: The total reward to be paid between you and the candidate if they become", "a member in the society.", "- `tip`: Your cut of the total `value` payout when the candidate is inducted into", "the society. Tips larger than `value` will be saturated upon payout."] }, Variant { name: "unvouch", fields: [], index: 3, docs: ["As a vouching member, unvouch a bid. This only works while vouched user is", "only a bidder (and not a candidate).", "", "The dispatch origin for this call must be _Signed_ and a vouching member.", "", "Parameters:", "- `pos`: Position in the `Bids` vector of the bid who should be unvouched."] }, Variant { name: "vote", fields: [Field { name: Some("candidate"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("approve"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 4, docs: ["As a member, vote on a candidate.", "", "The dispatch origin for this call must be _Signed_ and a member.", "", "Parameters:", "- `candidate`: The candidate that the member would like to bid on.", "- `approve`: A boolean which says if the candidate should be approved (`true`) or", "  rejected (`false`)."] }, Variant { name: "defender_vote", fields: [Field { name: Some("approve"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 5, docs: ["As a member, vote on the defender.", "", "The dispatch origin for this call must be _Signed_ and a member.", "", "Parameters:", "- `approve`: A boolean which says if the candidate should be", "approved (`true`) or rejected (`false`)."] }, Variant { name: "payout", fields: [], index: 6, docs: ["Transfer the first matured payout for the sender and remove it from the records.", "", "NOTE: This extrinsic needs to be called multiple times to claim multiple matured", "payouts.", "", "Payment: The member will receive a payment equal to their first matured", "payout to their free balance.", "", "The dispatch origin for this call must be _Signed_ and a member with", "payouts remaining."] }, Variant { name: "waive_repay", fields: [Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], index: 7, docs: ["Repay the payment previously given to the member with the signed origin, remove any", "pending payments, and elevate them from rank 0 to rank 1."] }, Variant { name: "found_society", fields: [Field { name: Some("founder"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("max_members"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_intake"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_strikes"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("candidate_deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }, Field { name: Some("rules"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 8, docs: ["Found the society.", "", "This is done as a discrete action in order to allow for the", "pallet to be included into a running chain and can only be done once.", "", "The dispatch origin for this call must be from the _FounderSetOrigin_.", "", "Parameters:", "- `founder` - The first member and head of the newly founded society.", "- `max_members` - The initial max number of members for the society.", "- `max_intake` - The maximum number of candidates per intake period.", "- `max_strikes`: The maximum number of strikes a member may get before they become", "  suspended and may only be reinstated by the founder.", "- `candidate_deposit`: The deposit required to make a bid for membership of the group.", "- `rules` - The rules of this society concerning membership.", "", "Complexity: O(1)"] }, Variant { name: "dissolve", fields: [], index: 9, docs: ["Dissolve the society and remove all members.", "", "The dispatch origin for this call must be Signed, and the signing account must be both", "the `Founder` and the `Head`. This implies that it may only be done when there is one", "member."] }, Variant { name: "judge_suspended_member", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("forgive"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 10, docs: ["Allow suspension judgement origin to make judgement on a suspended member.", "", "If a suspended member is forgiven, we simply add them back as a member, not affecting", "any of the existing storage items for that member.", "", "If a suspended member is rejected, remove all associated storage items, including", "their payouts, and remove any vouched bids they currently have.", "", "The dispatch origin for this call must be Signed from the Founder.", "", "Parameters:", "- `who` - The suspended member to be judged.", "- `forgive` - A boolean representing whether the suspension judgement origin forgives", "  (`true`) or rejects (`false`) a suspended member."] }, Variant { name: "set_parameters", fields: [Field { name: Some("max_members"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_intake"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_strikes"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("candidate_deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], index: 11, docs: ["Change the maximum number of members in society and the maximum number of new candidates", "in a single intake period.", "", "The dispatch origin for this call must be Signed by the Founder.", "", "Parameters:", "- `max_members` - The maximum number of members for the society. This must be no less", "  than the current number of members.", "- `max_intake` - The maximum number of candidates per intake period.", "- `max_strikes`: The maximum number of strikes a member may get before they become", "  suspended and may only be reinstated by the founder.", "- `candidate_deposit`: The deposit required to make a bid for membership of the group."] }, Variant { name: "punish_skeptic", fields: [], index: 12, docs: ["Punish the skeptic with a strike if they did not vote on a candidate. Callable by the", "candidate."] }, Variant { name: "claim_membership", fields: [], index: 13, docs: ["Transform an approved candidate into a member. Callable only by the", "the candidate, and only after the period for voting has ended."] }, Variant { name: "bestow_membership", fields: [Field { name: Some("candidate"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 14, docs: ["Transform an approved candidate into a member. Callable only by the Signed origin of the", "Founder, only after the period for voting has ended and only when the candidate is not", "clearly rejected."] }, Variant { name: "kick_candidate", fields: [Field { name: Some("candidate"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 15, docs: ["Remove the candidate's application from the society. Callable only by the Signed origin", "of the Founder, only after the period for voting has ended, and only when they do not", "have a clear approval.", "", "Any bid deposit is lost and voucher is banned."] }, Variant { name: "resign_candidacy", fields: [], index: 16, docs: ["Remove the candidate's application from the society. Callable only by the candidate.", "", "Any bid deposit is lost and voucher is banned."] }, Variant { name: "drop_candidate", fields: [Field { name: Some("candidate"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 17, docs: ["Remove a `candidate`'s failed application from the society. Callable by any", "signed origin but only at the end of the subsequent round and only for", "a candidate with more rejections than approvals.", "", "The bid deposit is lost and the voucher is banned."] }, Variant { name: "cleanup_candidacy", fields: [Field { name: Some("candidate"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("max"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 18, docs: ["Remove up to `max` stale votes for the given `candidate`.", "", "May be called by any Signed origin, but only after the candidate's candidacy is ended."] }, Variant { name: "cleanup_challenge", fields: [Field { name: Some("challenge_round"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RoundIndex"), docs: [] }, Field { name: Some("max"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 19, docs: ["Remove up to `max` stale votes for the defender in the given `challenge_round`.", "", "May be called by any Signed origin, but only after the challenge round is ended."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 221, ty: Type { path: Path { segments: ["pallet_recovery", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "as_recovered", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 104, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }], index: 0, docs: ["Send a call through a recovered account.", "", "The dispatch origin for this call must be _Signed_ and registered to", "be able to make calls on behalf of the recovered account.", "", "Parameters:", "- `account`: The recovered account you want to make a call on-behalf-of.", "- `call`: The call you want to make with the recovered account."] }, Variant { name: "set_recovered", fields: [Field { name: Some("lost"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("rescuer"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 1, docs: ["Allow ROOT to bypass the recovery process and set a rescuer account", "for a lost account directly.", "", "The dispatch origin for this call must be _ROOT_.", "", "Parameters:", "- `lost`: The \"lost account\" to be recovered.", "- `rescuer`: The \"rescuer account\" which can call as the lost account."] }, Variant { name: "create_recovery", fields: [Field { name: Some("friends"), ty: UntrackedSymbol { id: 124, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T::AccountId>"), docs: [] }, Field { name: Some("threshold"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u16"), docs: [] }, Field { name: Some("delay_period"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFromProviderOf<T>"), docs: [] }], index: 2, docs: ["Create a recovery configuration for your account. This makes your account recoverable.", "", "Payment: `ConfigDepositBase` + `FriendDepositFactor` * #_of_friends balance", "will be reserved for storing the recovery configuration. This deposit is returned", "in full when the user calls `remove_recovery`.", "", "The dispatch origin for this call must be _Signed_.", "", "Parameters:", "- `friends`: A list of friends you trust to vouch for recovery attempts. Should be", "  ordered and contain no duplicate values.", "- `threshold`: The number of friends that must vouch for a recovery attempt before the", "  account can be recovered. Should be less than or equal to the length of the list of", "  friends.", "- `delay_period`: The number of blocks after a recovery attempt is initialized that", "  needs to pass before the account can be recovered."] }, Variant { name: "initiate_recovery", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 3, docs: ["Initiate the process for recovering a recoverable account.", "", "Payment: `RecoveryDeposit` balance will be reserved for initiating the", "recovery process. This deposit will always be repatriated to the account", "trying to be recovered. See `close_recovery`.", "", "The dispatch origin for this call must be _Signed_.", "", "Parameters:", "- `account`: The lost account that you want to recover. This account needs to be", "  recoverable (i.e. have a recovery configuration)."] }, Variant { name: "vouch_recovery", fields: [Field { name: Some("lost"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("rescuer"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 4, docs: ["Allow a \"friend\" of a recoverable account to vouch for an active recovery", "process for that account.", "", "The dispatch origin for this call must be _Signed_ and must be a \"friend\"", "for the recoverable account.", "", "Parameters:", "- `lost`: The lost account that you want to recover.", "- `rescuer`: The account trying to rescue the lost account that you want to vouch for.", "", "The combination of these two parameters must point to an active recovery", "process."] }, Variant { name: "claim_recovery", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 5, docs: ["Allow a successful rescuer to claim their recovered account.", "", "The dispatch origin for this call must be _Signed_ and must be a \"rescuer\"", "who has successfully completed the account recovery process: collected", "`threshold` or more vouches, waited `delay_period` blocks since initiation.", "", "Parameters:", "- `account`: The lost account that you want to claim has been successfully recovered by", "  you."] }, Variant { name: "close_recovery", fields: [Field { name: Some("rescuer"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 6, docs: ["As the controller of a recoverable account, close an active recovery", "process for your account.", "", "Payment: By calling this function, the recoverable account will receive", "the recovery deposit `RecoveryDeposit` placed by the rescuer.", "", "The dispatch origin for this call must be _Signed_ and must be a", "recoverable account with an active recovery process for it.", "", "Parameters:", "- `rescuer`: The account trying to rescue this recoverable account."] }, Variant { name: "remove_recovery", fields: [], index: 7, docs: ["Remove the recovery process for your account. Recovered accounts are still accessible.", "", "NOTE: The user must make sure to call `close_recovery` on all active", "recovery attempts before calling this function else it will fail.", "", "Payment: By calling this function the recoverable account will unreserve", "their recovery configuration deposit.", "(`ConfigDepositBase` + `FriendDepositFactor` * #_of_friends)", "", "The dispatch origin for this call must be _Signed_ and must be a", "recoverable account (i.e. has a recovery configuration)."] }, Variant { name: "cancel_recovered", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 8, docs: ["Cancel the ability to use `as_recovered` for `account`.", "", "The dispatch origin for this call must be _Signed_ and registered to", "be able to make calls on behalf of the recovered account.", "", "Parameters:", "- `account`: The recovered account you are able to call on-behalf-of."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 222, ty: Type { path: Path { segments: ["pallet_vesting", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "vest", fields: [], index: 0, docs: ["Unlock any vested funds of the sender account.", "", "The dispatch origin for this call must be _Signed_ and the sender must have funds still", "locked under this pallet.", "", "Emits either `VestingCompleted` or `VestingUpdated`.", "", "## Complexity", "- `O(1)`."] }, Variant { name: "vest_other", fields: [Field { name: Some("target"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 1, docs: ["Unlock any vested funds of a `target` account.", "", "The dispatch origin for this call must be _Signed_.", "", "- `target`: The account whose vested funds should be unlocked. Must have funds still", "locked under this pallet.", "", "Emits either `VestingCompleted` or `VestingUpdated`.", "", "## Complexity", "- `O(1)`."] }, Variant { name: "vested_transfer", fields: [Field { name: Some("target"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("schedule"), ty: UntrackedSymbol { id: 223, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VestingInfo<BalanceOf<T>, BlockNumberFor<T>>"), docs: [] }], index: 2, docs: ["Create a vested transfer.", "", "The dispatch origin for this call must be _Signed_.", "", "- `target`: The account receiving the vested funds.", "- `schedule`: The vesting schedule attached to the transfer.", "", "Emits `VestingCreated`.", "", "NOTE: This will unlock all schedules through the current block.", "", "## Complexity", "- `O(1)`."] }, Variant { name: "force_vested_transfer", fields: [Field { name: Some("source"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("target"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("schedule"), ty: UntrackedSymbol { id: 223, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VestingInfo<BalanceOf<T>, BlockNumberFor<T>>"), docs: [] }], index: 3, docs: ["Force a vested transfer.", "", "The dispatch origin for this call must be _Root_.", "", "- `source`: The account whose funds should be transferred.", "- `target`: The account that should be transferred the vested funds.", "- `schedule`: The vesting schedule attached to the transfer.", "", "Emits `VestingCreated`.", "", "NOTE: This will unlock all schedules through the current block.", "", "## Complexity", "- `O(1)`."] }, Variant { name: "merge_schedules", fields: [Field { name: Some("schedule1_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("schedule2_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 4, docs: ["Merge two vesting schedules together, creating a new vesting schedule that unlocks over", "the highest possible start and end blocks. If both schedules have already started the", "current block will be used as the schedule start; with the caveat that if one schedule", "is finished by the current block, the other will be treated as the new merged schedule,", "unmodified.", "", "NOTE: If `schedule1_index == schedule2_index` this is a no-op.", "NOTE: This will unlock all schedules through the current block prior to merging.", "NOTE: If both schedules have ended by the current block, no new schedule will be created", "and both will be removed.", "", "Merged schedule attributes:", "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,", "  current_block)`.", "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.", "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.", "", "The dispatch origin for this call must be _Signed_.", "", "- `schedule1_index`: index of the first schedule to merge.", "- `schedule2_index`: index of the second schedule to merge."] }, Variant { name: "force_remove_vesting_schedule", fields: [Field { name: Some("target"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("<T::Lookup as StaticLookup>::Source"), docs: [] }, Field { name: Some("schedule_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 5, docs: ["Force remove a vesting schedule", "", "The dispatch origin for this call must be _Root_.", "", "- `target`: An account that has a vesting schedule", "- `schedule_index`: The vesting schedule index that should be removed"] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 223, ty: Type { path: Path { segments: ["pallet_vesting", "vesting_info", "VestingInfo"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("locked"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("per_block"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("starting_block"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }] }), docs: [] } }, PortableType { id: 224, ty: Type { path: Path { segments: ["pallet_scheduler", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "schedule", fields: [Field { name: Some("when"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }, Field { name: Some("maybe_periodic"), ty: UntrackedSymbol { id: 225, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<schedule::Period<BlockNumberFor<T>>>"), docs: [] }, Field { name: Some("priority"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("schedule::Priority"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 104, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }], index: 0, docs: ["Anonymously schedule a task."] }, Variant { name: "cancel", fields: [Field { name: Some("when"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 1, docs: ["Cancel an anonymously scheduled task."] }, Variant { name: "schedule_named", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskName"), docs: [] }, Field { name: Some("when"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }, Field { name: Some("maybe_periodic"), ty: UntrackedSymbol { id: 225, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<schedule::Period<BlockNumberFor<T>>>"), docs: [] }, Field { name: Some("priority"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("schedule::Priority"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 104, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }], index: 2, docs: ["Schedule a named task."] }, Variant { name: "cancel_named", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskName"), docs: [] }], index: 3, docs: ["Cancel a named scheduled task."] }, Variant { name: "schedule_after", fields: [Field { name: Some("after"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }, Field { name: Some("maybe_periodic"), ty: UntrackedSymbol { id: 225, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<schedule::Period<BlockNumberFor<T>>>"), docs: [] }, Field { name: Some("priority"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("schedule::Priority"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 104, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }], index: 4, docs: ["Anonymously schedule a task after a delay."] }, Variant { name: "schedule_named_after", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskName"), docs: [] }, Field { name: Some("after"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }, Field { name: Some("maybe_periodic"), ty: UntrackedSymbol { id: 225, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<schedule::Period<BlockNumberFor<T>>>"), docs: [] }, Field { name: Some("priority"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("schedule::Priority"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 104, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }], index: 5, docs: ["Schedule a named task after a delay."] }, Variant { name: "set_retry", fields: [Field { name: Some("task"), ty: UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskAddress<BlockNumberFor<T>>"), docs: [] }, Field { name: Some("retries"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("period"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }], index: 6, docs: ["Set a retry configuration for a task so that, in case its scheduled run fails, it will", "be retried after `period` blocks, for a total amount of `retries` retries or until it", "succeeds.", "", "Tasks which need to be scheduled for a retry are still subject to weight metering and", "agenda space, same as a regular task. If a periodic task fails, it will be scheduled", "normally while the task is retrying.", "", "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic", "clones of the original task. Their retry configuration will be derived from the", "original task's configuration, but will have a lower value for `remaining` than the", "original `total_retries`."] }, Variant { name: "set_retry_named", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskName"), docs: [] }, Field { name: Some("retries"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("period"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }], index: 7, docs: ["Set a retry configuration for a named task so that, in case its scheduled run fails, it", "will be retried after `period` blocks, for a total amount of `retries` retries or until", "it succeeds.", "", "Tasks which need to be scheduled for a retry are still subject to weight metering and", "agenda space, same as a regular task. If a periodic task fails, it will be scheduled", "normally while the task is retrying.", "", "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic", "clones of the original task. Their retry configuration will be derived from the", "original task's configuration, but will have a lower value for `remaining` than the", "original `total_retries`."] }, Variant { name: "cancel_retry", fields: [Field { name: Some("task"), ty: UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskAddress<BlockNumberFor<T>>"), docs: [] }], index: 8, docs: ["Removes the retry configuration of a task."] }, Variant { name: "cancel_retry_named", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskName"), docs: [] }], index: 9, docs: ["Cancel the retry configuration of a named task."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 225, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 226, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 227, ty: Type { path: Path { segments: ["pallet_proxy", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "proxy", fields: [Field { name: Some("real"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("force_proxy_type"), ty: UntrackedSymbol { id: 228, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<T::ProxyType>"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 104, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }], index: 0, docs: ["Dispatch the given `call` from an account that the sender is authorised for through", "`add_proxy`.", "", "The dispatch origin for this call must be _Signed_.", "", "Parameters:", "- `real`: The account that the proxy will make a call on behalf of.", "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.", "- `call`: The call to be made by the `real` account."] }, Variant { name: "add_proxy", fields: [Field { name: Some("delegate"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("proxy_type"), ty: UntrackedSymbol { id: 229, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::ProxyType"), docs: [] }, Field { name: Some("delay"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }], index: 1, docs: ["Register a proxy account for the sender that is able to make calls on its behalf.", "", "The dispatch origin for this call must be _Signed_.", "", "Parameters:", "- `proxy`: The account that the `caller` would like to make a proxy.", "- `proxy_type`: The permissions allowed for this proxy account.", "- `delay`: The announcement period required of the initial proxy. Will generally be", "zero."] }, Variant { name: "remove_proxy", fields: [Field { name: Some("delegate"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("proxy_type"), ty: UntrackedSymbol { id: 229, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::ProxyType"), docs: [] }, Field { name: Some("delay"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }], index: 2, docs: ["Unregister a proxy account for the sender.", "", "The dispatch origin for this call must be _Signed_.", "", "Parameters:", "- `proxy`: The account that the `caller` would like to remove as a proxy.", "- `proxy_type`: The permissions currently enabled for the removed proxy account."] }, Variant { name: "remove_proxies", fields: [], index: 3, docs: ["Unregister all proxy accounts for the sender.", "", "The dispatch origin for this call must be _Signed_.", "", "WARNING: This may be called on accounts created by `pure`, however if done, then", "the unreserved fees will be inaccessible. **All access to this account will be lost.**"] }, Variant { name: "create_pure", fields: [Field { name: Some("proxy_type"), ty: UntrackedSymbol { id: 229, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::ProxyType"), docs: [] }, Field { name: Some("delay"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u16"), docs: [] }], index: 4, docs: ["Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and", "initialize it with a proxy of `proxy_type` for `origin` sender.", "", "Requires a `Signed` origin.", "", "- `proxy_type`: The type of the proxy that the sender will be registered as over the", "new account. This will almost always be the most permissive `ProxyType` possible to", "allow for maximum flexibility.", "- `index`: A disambiguation index, in case this is called multiple times in the same", "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just", "want to use `0`.", "- `delay`: The announcement period required of the initial proxy. Will generally be", "zero.", "", "Fails with `Duplicate` if this has already been called in this transaction, from the", "same sender, with the same parameters.", "", "Fails if there are insufficient funds to pay for deposit."] }, Variant { name: "kill_pure", fields: [Field { name: Some("spawner"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("proxy_type"), ty: UntrackedSymbol { id: 229, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::ProxyType"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u16"), docs: [] }, Field { name: Some("height"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }, Field { name: Some("ext_index"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 5, docs: ["Removes a previously spawned pure proxy.", "", "WARNING: **All access to this account will be lost.** Any funds held in it will be", "inaccessible.", "", "Requires a `Signed` origin, and the sender account must have been created by a call to", "`pure` with corresponding parameters.", "", "- `spawner`: The account that originally called `pure` to create this account.", "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.", "- `proxy_type`: The proxy type originally passed to `pure`.", "- `height`: The height of the chain when the call to `pure` was processed.", "- `ext_index`: The extrinsic index in which the call to `pure` was processed.", "", "Fails with `NoPermission` in case the caller is not a previously created pure", "account whose `pure` call has corresponding parameters."] }, Variant { name: "announce", fields: [Field { name: Some("real"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("call_hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CallHashOf<T>"), docs: [] }], index: 6, docs: ["Publish the hash of a proxy-call that will be made in the future.", "", "This must be called some number of blocks before the corresponding `proxy` is attempted", "if the delay associated with the proxy relationship is greater than zero.", "", "No more than `MaxPending` announcements may be made at any one time.", "", "This will take a deposit of `AnnouncementDepositFactor` as well as", "`AnnouncementDepositBase` if there are no other pending announcements.", "", "The dispatch origin for this call must be _Signed_ and a proxy of `real`.", "", "Parameters:", "- `real`: The account that the proxy will make a call on behalf of.", "- `call_hash`: The hash of the call to be made by the `real` account."] }, Variant { name: "remove_announcement", fields: [Field { name: Some("real"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("call_hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CallHashOf<T>"), docs: [] }], index: 7, docs: ["Remove a given announcement.", "", "May be called by a proxy account to remove a call they previously announced and return", "the deposit.", "", "The dispatch origin for this call must be _Signed_.", "", "Parameters:", "- `real`: The account that the proxy will make a call on behalf of.", "- `call_hash`: The hash of the call to be made by the `real` account."] }, Variant { name: "reject_announcement", fields: [Field { name: Some("delegate"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("call_hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CallHashOf<T>"), docs: [] }], index: 8, docs: ["Remove the given announcement of a delegate.", "", "May be called by a target (proxied) account to remove a call that one of their delegates", "(`delegate`) has announced they want to execute. The deposit is returned.", "", "The dispatch origin for this call must be _Signed_.", "", "Parameters:", "- `delegate`: The account that previously announced the call.", "- `call_hash`: The hash of the call to be made."] }, Variant { name: "proxy_announced", fields: [Field { name: Some("delegate"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("real"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("force_proxy_type"), ty: UntrackedSymbol { id: 228, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<T::ProxyType>"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 104, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }], index: 9, docs: ["Dispatch the given `call` from an account that the sender is authorized for through", "`add_proxy`.", "", "Removes any corresponding announcement(s).", "", "The dispatch origin for this call must be _Signed_.", "", "Parameters:", "- `real`: The account that the proxy will make a call on behalf of.", "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.", "- `call`: The call to be made by the `real` account."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 228, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 229, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 229, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 229, ty: Type { path: Path { segments: ["rococo_runtime", "ProxyType"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Any", fields: [], index: 0, docs: [] }, Variant { name: "NonTransfer", fields: [], index: 1, docs: [] }, Variant { name: "Governance", fields: [], index: 2, docs: [] }, Variant { name: "IdentityJudgement", fields: [], index: 3, docs: [] }, Variant { name: "CancelProxy", fields: [], index: 4, docs: [] }, Variant { name: "Auction", fields: [], index: 5, docs: [] }, Variant { name: "Society", fields: [], index: 6, docs: [] }, Variant { name: "OnDemandOrdering", fields: [], index: 7, docs: [] }] }), docs: [] } }, PortableType { id: 230, ty: Type { path: Path { segments: ["pallet_multisig", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "as_multi_threshold_1", fields: [Field { name: Some("other_signatories"), ty: UntrackedSymbol { id: 124, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T::AccountId>"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 104, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }], index: 0, docs: ["Immediately dispatch a multi-signature call using a single approval from the caller.", "", "The dispatch origin for this call must be _Signed_.", "", "- `other_signatories`: The accounts (other than the sender) who are part of the", "multi-signature, but do not participate in the approval process.", "- `call`: The call to be executed.", "", "Result is equivalent to the dispatched result.", "", "## Complexity", "O(Z + C) where Z is the length of the call and C its execution weight."] }, Variant { name: "as_multi", fields: [Field { name: Some("threshold"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u16"), docs: [] }, Field { name: Some("other_signatories"), ty: UntrackedSymbol { id: 124, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T::AccountId>"), docs: [] }, Field { name: Some("maybe_timepoint"), ty: UntrackedSymbol { id: 231, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Timepoint<BlockNumberFor<T>>>"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 104, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }, Field { name: Some("max_weight"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }], index: 1, docs: ["Register approval for a dispatch to be made from a deterministic composite account if", "approved by a total of `threshold - 1` of `other_signatories`.", "", "If there are enough, then dispatch the call.", "", "Payment: `DepositBase` will be reserved if this is the first approval, plus", "`threshold` times `DepositFactor`. It is returned once this dispatch happens or", "is cancelled.", "", "The dispatch origin for this call must be _Signed_.", "", "- `threshold`: The total number of approvals for this dispatch before it is executed.", "- `other_signatories`: The accounts (other than the sender) who can approve this", "dispatch. May not be empty.", "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is", "not the first approval, then it must be `Some`, with the timepoint (block number and", "transaction index) of the first approval transaction.", "- `call`: The call to be executed.", "", "NOTE: Unless this is the final approval, you will generally want to use", "`approve_as_multi` instead, since it only requires a hash of the call.", "", "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise", "on success, result is `Ok` and the result from the interior call, if it was executed,", "may be found in the deposited `MultisigExecuted` event.", "", "## Complexity", "- `O(S + Z + Call)`.", "- Up to one balance-reserve or unreserve operation.", "- One passthrough operation, one insert, both `O(S)` where `S` is the number of", "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.", "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.", "- One encode & hash, both of complexity `O(S)`.", "- Up to one binary search and insert (`O(logS + S)`).", "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.", "- One event.", "- The weight of the `call`.", "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit", "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."] }, Variant { name: "approve_as_multi", fields: [Field { name: Some("threshold"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u16"), docs: [] }, Field { name: Some("other_signatories"), ty: UntrackedSymbol { id: 124, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T::AccountId>"), docs: [] }, Field { name: Some("maybe_timepoint"), ty: UntrackedSymbol { id: 231, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Timepoint<BlockNumberFor<T>>>"), docs: [] }, Field { name: Some("call_hash"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }, Field { name: Some("max_weight"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }], index: 2, docs: ["Register approval for a dispatch to be made from a deterministic composite account if", "approved by a total of `threshold - 1` of `other_signatories`.", "", "Payment: `DepositBase` will be reserved if this is the first approval, plus", "`threshold` times `DepositFactor`. It is returned once this dispatch happens or", "is cancelled.", "", "The dispatch origin for this call must be _Signed_.", "", "- `threshold`: The total number of approvals for this dispatch before it is executed.", "- `other_signatories`: The accounts (other than the sender) who can approve this", "dispatch. May not be empty.", "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is", "not the first approval, then it must be `Some`, with the timepoint (block number and", "transaction index) of the first approval transaction.", "- `call_hash`: The hash of the call to be executed.", "", "NOTE: If this is the final approval, you will want to use `as_multi` instead.", "", "## Complexity", "- `O(S)`.", "- Up to one balance-reserve or unreserve operation.", "- One passthrough operation, one insert, both `O(S)` where `S` is the number of", "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.", "- One encode & hash, both of complexity `O(S)`.", "- Up to one binary search and insert (`O(logS + S)`).", "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.", "- One event.", "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit", "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."] }, Variant { name: "cancel_as_multi", fields: [Field { name: Some("threshold"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u16"), docs: [] }, Field { name: Some("other_signatories"), ty: UntrackedSymbol { id: 124, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T::AccountId>"), docs: [] }, Field { name: Some("timepoint"), ty: UntrackedSymbol { id: 232, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Timepoint<BlockNumberFor<T>>"), docs: [] }, Field { name: Some("call_hash"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 3, docs: ["Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously", "for this operation will be unreserved on success.", "", "The dispatch origin for this call must be _Signed_.", "", "- `threshold`: The total number of approvals for this dispatch before it is executed.", "- `other_signatories`: The accounts (other than the sender) who can approve this", "dispatch. May not be empty.", "- `timepoint`: The timepoint (block number and transaction index) of the first approval", "transaction for this dispatch.", "- `call_hash`: The hash of the call to be executed.", "", "## Complexity", "- `O(S)`.", "- Up to one balance-reserve or unreserve operation.", "- One passthrough operation, one insert, both `O(S)` where `S` is the number of", "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.", "- One encode & hash, both of complexity `O(S)`.", "- One event.", "- I/O: 1 read `O(S)`, one remove.", "- Storage: removes one item."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 231, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 232, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 232, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 232, ty: Type { path: Path { segments: ["pallet_multisig", "Timepoint"] }, type_params: [TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("height"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 233, ty: Type { path: Path { segments: ["pallet_preimage", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "note_preimage", fields: [Field { name: Some("bytes"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 0, docs: ["Register a preimage on-chain.", "", "If the preimage was previously requested, no fees or deposits are taken for providing", "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."] }, Variant { name: "unnote_preimage", fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 1, docs: ["Clear an unrequested preimage from the runtime storage.", "", "If `len` is provided, then it will be a much cheaper operation.", "", "- `hash`: The hash of the preimage to be removed from the store.", "- `len`: The length of the preimage of `hash`."] }, Variant { name: "request_preimage", fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 2, docs: ["Request a preimage be uploaded to the chain without paying any fees or deposits.", "", "If the preimage requests has already been provided on-chain, we unreserve any deposit", "a user may have paid, and take the control of the preimage out of their hands."] }, Variant { name: "unrequest_preimage", fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 3, docs: ["Clear a previously made request for a preimage.", "", "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."] }, Variant { name: "ensure_updated", fields: [Field { name: Some("hashes"), ty: UntrackedSymbol { id: 234, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T::Hash>"), docs: [] }], index: 4, docs: ["Ensure that the bulk of pre-images is upgraded.", "", "The caller pays no fee if at least 90% of pre-images were successfully updated."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 234, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 235, ty: Type { path: Path { segments: ["pallet_asset_rate", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "create", fields: [Field { name: Some("asset_kind"), ty: UntrackedSymbol { id: 57, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<T::AssetKind>"), docs: [] }, Field { name: Some("rate"), ty: UntrackedSymbol { id: 236, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("FixedU128"), docs: [] }], index: 0, docs: ["Initialize a conversion rate to native balance for the given asset.", "", "## Complexity", "- O(1)"] }, Variant { name: "update", fields: [Field { name: Some("asset_kind"), ty: UntrackedSymbol { id: 57, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<T::AssetKind>"), docs: [] }, Field { name: Some("rate"), ty: UntrackedSymbol { id: 236, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("FixedU128"), docs: [] }], index: 1, docs: ["Update the conversion rate to native balance for the given asset.", "", "## Complexity", "- O(1)"] }, Variant { name: "remove", fields: [Field { name: Some("asset_kind"), ty: UntrackedSymbol { id: 57, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<T::AssetKind>"), docs: [] }], index: 2, docs: ["Remove an existing conversion rate to native balance for the given asset.", "", "## Complexity", "- O(1)"] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 236, ty: Type { path: Path { segments: ["sp_arithmetic", "fixed_point", "FixedU128"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }] }), docs: [] } }, PortableType { id: 237, ty: Type { path: Path { segments: ["pallet_bounties", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "propose_bounty", fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }, Field { name: Some("description"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 0, docs: ["Propose a new bounty.", "", "The dispatch origin for this call must be _Signed_.", "", "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as", "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,", "or slashed when rejected.", "", "- `curator`: The curator account whom will manage this bounty.", "- `fee`: The curator fee.", "- `value`: The total payment amount of this bounty, curator fee included.", "- `description`: The description of this bounty."] }, Variant { name: "approve_bounty", fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 1, docs: ["Approve a bounty proposal. At a later time, the bounty will be funded and become active", "and the original deposit will be returned.", "", "May only be called from `T::SpendOrigin`.", "", "## Complexity", "- O(1)."] }, Variant { name: "propose_curator", fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("curator"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("fee"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], index: 2, docs: ["Propose a curator to a funded bounty.", "", "May only be called from `T::SpendOrigin`.", "", "## Complexity", "- O(1)."] }, Variant { name: "unassign_curator", fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 3, docs: ["Unassign curator from a bounty.", "", "This function can only be called by the `RejectOrigin` a signed origin.", "", "If this function is called by the `RejectOrigin`, we assume that the curator is", "malicious or inactive. As a result, we will slash the curator when possible.", "", "If the origin is the curator, we take this as a sign they are unable to do their job and", "they willingly give up. We could slash them, but for now we allow them to recover their", "deposit and exit without issue. (We may want to change this if it is abused.)", "", "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows", "anyone in the community to call out that a curator is not doing their due diligence, and", "we should pick a new curator. In this case the curator should also be slashed.", "", "## Complexity", "- O(1)."] }, Variant { name: "accept_curator", fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 4, docs: ["Accept the curator role for a bounty.", "A deposit will be reserved from curator and refund upon successful payout.", "", "May only be called from the curator.", "", "## Complexity", "- O(1)."] }, Variant { name: "award_bounty", fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 5, docs: ["Award bounty to a beneficiary account. The beneficiary will be able to claim the funds", "after a delay.", "", "The dispatch origin for this call must be the curator of this bounty.", "", "- `bounty_id`: Bounty ID to award.", "- `beneficiary`: The beneficiary account whom will receive the payout.", "", "## Complexity", "- O(1)."] }, Variant { name: "claim_bounty", fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 6, docs: ["Claim the payout from an awarded bounty after payout delay.", "", "The dispatch origin for this call must be the beneficiary of this bounty.", "", "- `bounty_id`: Bounty ID to claim.", "", "## Complexity", "- O(1)."] }, Variant { name: "close_bounty", fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 7, docs: ["Cancel a proposed or active bounty. All the funds will be sent to treasury and", "the curator deposit will be unreserved if possible.", "", "Only `T::RejectOrigin` is able to cancel a bounty.", "", "- `bounty_id`: Bounty ID to cancel.", "", "## Complexity", "- O(1)."] }, Variant { name: "extend_bounty_expiry", fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("remark"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 8, docs: ["Extend the expiry time of an active bounty.", "", "The dispatch origin for this call must be the curator of this bounty.", "", "- `bounty_id`: Bounty ID to extend.", "- `remark`: additional information.", "", "## Complexity", "- O(1)."] }, Variant { name: "approve_bounty_with_curator", fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("curator"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("fee"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], index: 9, docs: ["Approve bountry and propose a curator simultaneously.", "This call is a shortcut to calling `approve_bounty` and `propose_curator` separately.", "", "May only be called from `T::SpendOrigin`.", "", "- `bounty_id`: Bounty ID to approve.", "- `curator`: The curator account whom will manage this bounty.", "- `fee`: The curator fee.", "", "## Complexity", "- O(1)."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 238, ty: Type { path: Path { segments: ["pallet_child_bounties", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "add_child_bounty", fields: [Field { name: Some("parent_bounty_id"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("description"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 0, docs: ["Add a new child-bounty.", "", "The dispatch origin for this call must be the curator of parent", "bounty and the parent bounty must be in \"active\" state.", "", "Child-bounty gets added successfully & fund gets transferred from", "parent bounty to child-bounty account, if parent bounty has enough", "funds, else the call fails.", "", "Upper bound to maximum number of active  child bounties that can be", "added are managed via runtime trait config", "[`Config::MaxActiveChildBountyCount`].", "", "If the call is success, the status of child-bounty is updated to", "\"Added\".", "", "- `parent_bounty_id`: Index of parent bounty for which child-bounty is being added.", "- `value`: Value for executing the proposal.", "- `description`: Text description for the child-bounty."] }, Variant { name: "propose_curator", fields: [Field { name: Some("parent_bounty_id"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_bounty_id"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("curator"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("fee"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 1, docs: ["Propose curator for funded child-bounty.", "", "The dispatch origin for this call must be curator of parent bounty.", "", "Parent bounty must be in active state, for this child-bounty call to", "work.", "", "Child-bounty must be in \"Added\" state, for processing the call. And", "state of child-bounty is moved to \"CuratorProposed\" on successful", "call completion.", "", "- `parent_bounty_id`: Index of parent bounty.", "- `child_bounty_id`: Index of child bounty.", "- `curator`: Address of child-bounty curator.", "- `fee`: payment fee to child-bounty curator for execution."] }, Variant { name: "accept_curator", fields: [Field { name: Some("parent_bounty_id"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_bounty_id"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 2, docs: ["Accept the curator role for the child-bounty.", "", "The dispatch origin for this call must be the curator of this", "child-bounty.", "", "A deposit will be reserved from the curator and refund upon", "successful payout or cancellation.", "", "Fee for curator is deducted from curator fee of parent bounty.", "", "Parent bounty must be in active state, for this child-bounty call to", "work.", "", "Child-bounty must be in \"CuratorProposed\" state, for processing the", "call. And state of child-bounty is moved to \"Active\" on successful", "call completion.", "", "- `parent_bounty_id`: Index of parent bounty.", "- `child_bounty_id`: Index of child bounty."] }, Variant { name: "unassign_curator", fields: [Field { name: Some("parent_bounty_id"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_bounty_id"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 3, docs: ["Unassign curator from a child-bounty.", "", "The dispatch origin for this call can be either `RejectOrigin`, or", "the curator of the parent bounty, or any signed origin.", "", "For the origin other than T::RejectOrigin and the child-bounty", "curator, parent bounty must be in active state, for this call to", "work. We allow child-bounty curator and T::RejectOrigin to execute", "this call irrespective of the parent bounty state.", "", "If this function is called by the `RejectOrigin` or the", "parent bounty curator, we assume that the child-bounty curator is", "malicious or inactive. As a result, child-bounty curator deposit is", "slashed.", "", "If the origin is the child-bounty curator, we take this as a sign", "that they are unable to do their job, and are willingly giving up.", "We could slash the deposit, but for now we allow them to unreserve", "their deposit and exit without issue. (We may want to change this if", "it is abused.)", "", "Finally, the origin can be anyone iff the child-bounty curator is", "\"inactive\". Expiry update due of parent bounty is used to estimate", "inactive state of child-bounty curator.", "", "This allows anyone in the community to call out that a child-bounty", "curator is not doing their due diligence, and we should pick a new", "one. In this case the child-bounty curator deposit is slashed.", "", "State of child-bounty is moved to Added state on successful call", "completion.", "", "- `parent_bounty_id`: Index of parent bounty.", "- `child_bounty_id`: Index of child bounty."] }, Variant { name: "award_child_bounty", fields: [Field { name: Some("parent_bounty_id"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_bounty_id"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 4, docs: ["Award child-bounty to a beneficiary.", "", "The beneficiary will be able to claim the funds after a delay.", "", "The dispatch origin for this call must be the parent curator or", "curator of this child-bounty.", "", "Parent bounty must be in active state, for this child-bounty call to", "work.", "", "Child-bounty must be in active state, for processing the call. And", "state of child-bounty is moved to \"PendingPayout\" on successful call", "completion.", "", "- `parent_bounty_id`: Index of parent bounty.", "- `child_bounty_id`: Index of child bounty.", "- `beneficiary`: Beneficiary account."] }, Variant { name: "claim_child_bounty", fields: [Field { name: Some("parent_bounty_id"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_bounty_id"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 5, docs: ["Claim the payout from an awarded child-bounty after payout delay.", "", "The dispatch origin for this call may be any signed origin.", "", "Call works independent of parent bounty state, No need for parent", "bounty to be in active state.", "", "The Beneficiary is paid out with agreed bounty value. Curator fee is", "paid & curator deposit is unreserved.", "", "Child-bounty must be in \"PendingPayout\" state, for processing the", "call. And instance of child-bounty is removed from the state on", "successful call completion.", "", "- `parent_bounty_id`: Index of parent bounty.", "- `child_bounty_id`: Index of child bounty."] }, Variant { name: "close_child_bounty", fields: [Field { name: Some("parent_bounty_id"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_bounty_id"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 6, docs: ["Cancel a proposed or active child-bounty. Child-bounty account funds", "are transferred to parent bounty account. The child-bounty curator", "deposit may be unreserved if possible.", "", "The dispatch origin for this call must be either parent curator or", "`T::RejectOrigin`.", "", "If the state of child-bounty is `Active`, curator deposit is", "unreserved.", "", "If the state of child-bounty is `PendingPayout`, call fails &", "returns `PendingPayout` error.", "", "For the origin other than T::RejectOrigin, parent bounty must be in", "active state, for this child-bounty call to work. For origin", "T::RejectOrigin execution is forced.", "", "Instance of child-bounty is removed from the state on successful", "call completion.", "", "- `parent_bounty_id`: Index of parent bounty.", "- `child_bounty_id`: Index of child bounty."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 239, ty: Type { path: Path { segments: ["pallet_nis", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "place_bid", fields: [Field { name: Some("amount"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("duration"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 0, docs: ["Place a bid.", "", "Origin must be Signed, and account must have at least `amount` in free balance.", "", "- `amount`: The amount of the bid; these funds will be reserved, and if/when", "  consolidated, removed. Must be at least `MinBid`.", "- `duration`: The number of periods before which the newly consolidated bid may be", "  thawed. Must be greater than 1 and no more than `QueueCount`.", "", "Complexities:", "- `Queues[duration].len()` (just take max)."] }, Variant { name: "retract_bid", fields: [Field { name: Some("amount"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("duration"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 1, docs: ["Retract a previously placed bid.", "", "Origin must be Signed, and the account should have previously issued a still-active bid", "of `amount` for `duration`.", "", "- `amount`: The amount of the previous bid.", "- `duration`: The duration of the previous bid."] }, Variant { name: "fund_deficit", fields: [], index: 2, docs: ["Ensure we have sufficient funding for all potential payouts.", "", "- `origin`: Must be accepted by `FundOrigin`."] }, Variant { name: "thaw_private", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReceiptIndex"), docs: [] }, Field { name: Some("maybe_proportion"), ty: UntrackedSymbol { id: 129, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Perquintill>"), docs: [] }], index: 3, docs: ["Reduce or remove an outstanding receipt, placing the according proportion of funds into", "the account of the owner.", "", "- `origin`: Must be Signed and the account must be the owner of the receipt `index` as", "  well as any fungible counterpart.", "- `index`: The index of the receipt.", "- `portion`: If `Some`, then only the given portion of the receipt should be thawed. If", "  `None`, then all of it should be."] }, Variant { name: "thaw_communal", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReceiptIndex"), docs: [] }], index: 4, docs: ["Reduce or remove an outstanding receipt, placing the according proportion of funds into", "the account of the owner.", "", "- `origin`: Must be Signed and the account must be the owner of the fungible counterpart", "  for receipt `index`.", "- `index`: The index of the receipt."] }, Variant { name: "communify", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReceiptIndex"), docs: [] }], index: 5, docs: ["Make a private receipt communal and create fungible counterparts for its owner."] }, Variant { name: "privatize", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReceiptIndex"), docs: [] }], index: 6, docs: ["Make a communal receipt private and burn fungible counterparts from its owner."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 240, ty: Type { path: Path { segments: ["pallet_balances", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "transfer_allow_death", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 0, docs: ["Transfer some liquid free balance to another account.", "", "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.", "If the sender's account is below the existential deposit as a result", "of the transfer, the account will be reaped.", "", "The dispatch origin for this call must be `Signed` by the transactor."] }, Variant { name: "force_transfer", fields: [Field { name: Some("source"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 2, docs: ["Exactly as `transfer_allow_death`, except the origin must be root and the source account", "may be specified."] }, Variant { name: "transfer_keep_alive", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 3, docs: ["Same as the [`transfer_allow_death`] call, but with a check that the transfer will not", "kill the origin account.", "", "99% of the time you want [`transfer_allow_death`] instead.", "", "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"] }, Variant { name: "transfer_all", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("keep_alive"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 4, docs: ["Transfer the entire transferable balance from the caller account.", "", "NOTE: This function only attempts to transfer _transferable_ balances. This means that", "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be", "transferred by this function. To ensure that this function results in a killed account,", "you might need to prepare the account by removing any reference counters, storage", "deposits, etc...", "", "The dispatch origin of this call must be Signed.", "", "- `dest`: The recipient of the transfer.", "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all", "  of the funds the account has, causing the sender account to be killed (false), or", "  transfer everything except at least the existential deposit, which will guarantee to", "  keep the sender account alive (true)."] }, Variant { name: "force_unreserve", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 5, docs: ["Unreserve some balance from a user by force.", "", "Can only be called by ROOT."] }, Variant { name: "upgrade_accounts", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 124, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T::AccountId>"), docs: [] }], index: 6, docs: ["Upgrade a specified account.", "", "- `origin`: Must be `Signed`.", "- `who`: The account to be upgraded.", "", "This will waive the transaction fee if at least all but 10% of the accounts needed to", "be upgraded. (We let some not have to be upgraded just in order to allow for the", "possibility of churn)."] }, Variant { name: "force_set_balance", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("new_free"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 8, docs: ["Set the regular balance of a given account.", "", "The dispatch origin for this call is `root`."] }, Variant { name: "force_adjust_total_issuance", fields: [Field { name: Some("direction"), ty: UntrackedSymbol { id: 125, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AdjustmentDirection"), docs: [] }, Field { name: Some("delta"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 9, docs: ["Adjust the total issuance in a saturating way.", "", "Can only be called by root and always needs a positive `delta`.", "", "# Example"] }, Variant { name: "burn", fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }, Field { name: Some("keep_alive"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 10, docs: ["Burn the specified liquid free balance from the origin account.", "", "If the origin's account ends up below the existential deposit as a result", "of the burn and `keep_alive` is false, the account will be reaped.", "", "Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,", "this `burn` operation will reduce total issuance by the amount _burned_."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 241, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "configuration", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "set_validation_upgrade_cooldown", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }], index: 0, docs: ["Set the validation upgrade cooldown."] }, Variant { name: "set_validation_upgrade_delay", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }], index: 1, docs: ["Set the validation upgrade delay."] }, Variant { name: "set_code_retention_period", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }], index: 2, docs: ["Set the acceptance period for an included candidate."] }, Variant { name: "set_max_code_size", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 3, docs: ["Set the max validation code size for incoming upgrades."] }, Variant { name: "set_max_pov_size", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 4, docs: ["Set the max POV block size for incoming upgrades."] }, Variant { name: "set_max_head_data_size", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 5, docs: ["Set the max head data size for paras."] }, Variant { name: "set_coretime_cores", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 6, docs: ["Set the number of coretime execution cores.", "", "NOTE: that this configuration is managed by the coretime chain. Only manually change", "this, if you really know what you are doing!"] }, Variant { name: "set_group_rotation_frequency", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }], index: 8, docs: ["Set the parachain validator-group rotation frequency"] }, Variant { name: "set_paras_availability_period", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }], index: 9, docs: ["Set the availability period for paras."] }, Variant { name: "set_scheduling_lookahead", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 11, docs: ["Set the scheduling lookahead, in expected number of blocks at peak throughput."] }, Variant { name: "set_max_validators_per_core", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<u32>"), docs: [] }], index: 12, docs: ["Set the maximum number of validators to assign to any core."] }, Variant { name: "set_max_validators", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<u32>"), docs: [] }], index: 13, docs: ["Set the maximum number of validators to use in parachain consensus."] }, Variant { name: "set_dispute_period", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SessionIndex"), docs: [] }], index: 14, docs: ["Set the dispute period, in number of sessions to keep for disputes."] }, Variant { name: "set_dispute_post_conclusion_acceptance_period", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }], index: 15, docs: ["Set the dispute post conclusion acceptance period."] }, Variant { name: "set_no_show_slots", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 18, docs: ["Set the no show slots, in number of number of consensus slots.", "Must be at least 1."] }, Variant { name: "set_n_delay_tranches", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 19, docs: ["Set the total number of delay tranches."] }, Variant { name: "set_zeroth_delay_tranche_width", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 20, docs: ["Set the zeroth delay tranche width."] }, Variant { name: "set_needed_approvals", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 21, docs: ["Set the number of validators needed to approve a block."] }, Variant { name: "set_relay_vrf_modulo_samples", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 22, docs: ["Set the number of samples to do of the `RelayVRFModulo` approval assignment criterion."] }, Variant { name: "set_max_upward_queue_count", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 23, docs: ["Sets the maximum items that can present in a upward dispatch queue at once."] }, Variant { name: "set_max_upward_queue_size", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 24, docs: ["Sets the maximum total size of items that can present in a upward dispatch queue at", "once."] }, Variant { name: "set_max_downward_message_size", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 25, docs: ["Set the critical downward message size."] }, Variant { name: "set_max_upward_message_size", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 27, docs: ["Sets the maximum size of an upward message that can be sent by a candidate."] }, Variant { name: "set_max_upward_message_num_per_candidate", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 28, docs: ["Sets the maximum number of messages that a candidate can contain."] }, Variant { name: "set_hrmp_open_request_ttl", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 29, docs: ["Sets the number of sessions after which an HRMP open channel request expires."] }, Variant { name: "set_hrmp_sender_deposit", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }], index: 30, docs: ["Sets the amount of funds that the sender should provide for opening an HRMP channel."] }, Variant { name: "set_hrmp_recipient_deposit", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }], index: 31, docs: ["Sets the amount of funds that the recipient should provide for accepting opening an HRMP", "channel."] }, Variant { name: "set_hrmp_channel_max_capacity", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 32, docs: ["Sets the maximum number of messages allowed in an HRMP channel at once."] }, Variant { name: "set_hrmp_channel_max_total_size", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 33, docs: ["Sets the maximum total size of messages in bytes allowed in an HRMP channel at once."] }, Variant { name: "set_hrmp_max_parachain_inbound_channels", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 34, docs: ["Sets the maximum number of inbound HRMP channels a parachain is allowed to accept."] }, Variant { name: "set_hrmp_channel_max_message_size", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 36, docs: ["Sets the maximum size of a message that could ever be put into an HRMP channel."] }, Variant { name: "set_hrmp_max_parachain_outbound_channels", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 37, docs: ["Sets the maximum number of outbound HRMP channels a parachain is allowed to open."] }, Variant { name: "set_hrmp_max_message_num_per_candidate", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 39, docs: ["Sets the maximum number of outbound HRMP messages can be sent by a candidate."] }, Variant { name: "set_pvf_voting_ttl", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SessionIndex"), docs: [] }], index: 42, docs: ["Set the number of session changes after which a PVF pre-checking voting is rejected."] }, Variant { name: "set_minimum_validation_upgrade_delay", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }], index: 43, docs: ["Sets the minimum delay between announcing the upgrade block for a parachain until the", "upgrade taking place.", "", "See the field documentation for information and constraints for the new value."] }, Variant { name: "set_bypass_consistency_check", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 44, docs: ["Setting this to true will disable consistency checks for the configuration setters.", "Use with caution."] }, Variant { name: "set_async_backing_params", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 242, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AsyncBackingParams"), docs: [] }], index: 45, docs: ["Set the asynchronous backing parameters."] }, Variant { name: "set_executor_params", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 243, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ExecutorParams"), docs: [] }], index: 46, docs: ["Set PVF executor parameters."] }, Variant { name: "set_on_demand_base_fee", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }], index: 47, docs: ["Set the on demand (parathreads) base fee."] }, Variant { name: "set_on_demand_fee_variability", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 248, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Perbill"), docs: [] }], index: 48, docs: ["Set the on demand (parathreads) fee variability."] }, Variant { name: "set_on_demand_queue_max_size", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 49, docs: ["Set the on demand (parathreads) queue max size."] }, Variant { name: "set_on_demand_target_queue_utilization", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 248, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Perbill"), docs: [] }], index: 50, docs: ["Set the on demand (parathreads) fee variability."] }, Variant { name: "set_minimum_backing_votes", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 52, docs: ["Set the minimum backing votes threshold."] }, Variant { name: "set_node_feature", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 53, docs: ["Set/Unset a node feature."] }, Variant { name: "set_approval_voting_params", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 249, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ApprovalVotingParams"), docs: [] }], index: 54, docs: ["Set approval-voting-params."] }, Variant { name: "set_scheduler_params", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 250, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SchedulerParams<BlockNumberFor<T>>"), docs: [] }], index: 55, docs: ["Set scheduler-params."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 242, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "async_backing", "AsyncBackingParams"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("max_candidate_depth"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("allowed_ancestry_len"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 243, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "executor_params", "ExecutorParams"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 244, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<ExecutorParam>"), docs: [] }] }), docs: [] } }, PortableType { id: 244, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 245, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 245, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "executor_params", "ExecutorParam"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "MaxMemoryPages", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 1, docs: [] }, Variant { name: "StackLogicalMax", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 2, docs: [] }, Variant { name: "StackNativeMax", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 3, docs: [] }, Variant { name: "PrecheckingMaxMemory", fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }], index: 4, docs: [] }, Variant { name: "PvfPrepTimeout", fields: [Field { name: None, ty: UntrackedSymbol { id: 246, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PvfPrepKind"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }], index: 5, docs: [] }, Variant { name: "PvfExecTimeout", fields: [Field { name: None, ty: UntrackedSymbol { id: 247, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PvfExecKind"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }], index: 6, docs: [] }, Variant { name: "WasmExtBulkMemory", fields: [], index: 7, docs: [] }] }), docs: [] } }, PortableType { id: 246, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "PvfPrepKind"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Precheck", fields: [], index: 0, docs: [] }, Variant { name: "Prepare", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 247, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "PvfExecKind"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Backing", fields: [], index: 0, docs: [] }, Variant { name: "Approval", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 248, ty: Type { path: Path { segments: ["sp_arithmetic", "per_things", "Perbill"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 249, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "ApprovalVotingParams"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("max_approval_coalesce_count"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 250, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "SchedulerParams"] }, type_params: [TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("group_rotation_frequency"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }, Field { name: Some("paras_availability_period"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }, Field { name: Some("max_validators_per_core"), ty: UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<u32>"), docs: [] }, Field { name: Some("lookahead"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("num_cores"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_availability_timeouts"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("on_demand_queue_max_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("on_demand_target_queue_utilization"), ty: UntrackedSymbol { id: 248, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Perbill"), docs: [] }, Field { name: Some("on_demand_fee_variability"), ty: UntrackedSymbol { id: 248, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Perbill"), docs: [] }, Field { name: Some("on_demand_base_fee"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("ttl"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }] }), docs: [] } }, PortableType { id: 251, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "shared", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 252, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "inclusion", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 253, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "paras_inherent", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "enter", fields: [Field { name: Some("data"), ty: UntrackedSymbol { id: 254, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParachainsInherentData<HeaderFor<T>>"), docs: [] }], index: 0, docs: ["Enter the paras inherent. This will process bitfields and backed candidates."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 254, ty: Type { path: Path { segments: ["polkadot_primitives", "vstaging", "InherentData"] }, type_params: [TypeParameter { name: "HDR", ty: Some(UntrackedSymbol { id: 111, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("bitfields"), ty: UntrackedSymbol { id: 255, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("UncheckedSignedAvailabilityBitfields"), docs: [] }, Field { name: Some("backed_candidates"), ty: UntrackedSymbol { id: 262, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<BackedCandidate<HDR::Hash>>"), docs: [] }, Field { name: Some("disputes"), ty: UntrackedSymbol { id: 278, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiDisputeStatementSet"), docs: [] }, Field { name: Some("parent_header"), ty: UntrackedSymbol { id: 111, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("HDR"), docs: [] }] }), docs: [] } }, PortableType { id: 255, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 256, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 256, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "signed", "UncheckedSigned"] }, type_params: [TypeParameter { name: "Payload", ty: Some(UntrackedSymbol { id: 257, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "RealPayload", ty: Some(UntrackedSymbol { id: 257, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("payload"), ty: UntrackedSymbol { id: 257, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Payload"), docs: [] }, Field { name: Some("validator_index"), ty: UntrackedSymbol { id: 260, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidatorIndex"), docs: [] }, Field { name: Some("signature"), ty: UntrackedSymbol { id: 261, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidatorSignature"), docs: [] }] }), docs: [] } }, PortableType { id: 257, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "AvailabilityBitfield"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 258, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BitVec<u8, bitvec::order::Lsb0>"), docs: [] }] }), docs: [] } }, PortableType { id: 258, ty: Type { path: Path { segments: [] }, type_params: [], type_def: BitSequence(TypeDefBitSequence { bit_store_type: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, bit_order_type: UntrackedSymbol { id: 259, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 259, ty: Type { path: Path { segments: ["bitvec", "order", "Lsb0"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 260, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "ValidatorIndex"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 261, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "validator_app", "Signature"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 145, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("sr25519::Signature"), docs: [] }] }), docs: [] } }, PortableType { id: 262, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 263, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 263, ty: Type { path: Path { segments: ["polkadot_primitives", "vstaging", "BackedCandidate"] }, type_params: [TypeParameter { name: "H", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("candidate"), ty: UntrackedSymbol { id: 264, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CommittedCandidateReceiptV2<H>"), docs: [] }, Field { name: Some("validity_votes"), ty: UntrackedSymbol { id: 276, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<ValidityAttestation>"), docs: [] }, Field { name: Some("validator_indices"), ty: UntrackedSymbol { id: 258, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BitVec<u8, bitvec::order::Lsb0>"), docs: [] }] }), docs: [] } }, PortableType { id: 264, ty: Type { path: Path { segments: ["polkadot_primitives", "vstaging", "CommittedCandidateReceiptV2"] }, type_params: [TypeParameter { name: "H", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("descriptor"), ty: UntrackedSymbol { id: 265, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CandidateDescriptorV2<H>"), docs: [] }, Field { name: Some("commitments"), ty: UntrackedSymbol { id: 268, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CandidateCommitments"), docs: [] }] }), docs: [] } }, PortableType { id: 265, ty: Type { path: Path { segments: ["polkadot_primitives", "vstaging", "CandidateDescriptorV2"] }, type_params: [TypeParameter { name: "H", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("para_id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("relay_parent"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H"), docs: [] }, Field { name: Some("version"), ty: UntrackedSymbol { id: 266, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("InternalVersion"), docs: [] }, Field { name: Some("core_index"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u16"), docs: [] }, Field { name: Some("session_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SessionIndex"), docs: [] }, Field { name: Some("reserved1"), ty: UntrackedSymbol { id: 205, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 25]"), docs: [] }, Field { name: Some("persisted_validation_data_hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }, Field { name: Some("pov_hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }, Field { name: Some("erasure_root"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }, Field { name: Some("reserved2"), ty: UntrackedSymbol { id: 145, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 64]"), docs: [] }, Field { name: Some("para_head"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }, Field { name: Some("validation_code_hash"), ty: UntrackedSymbol { id: 267, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidationCodeHash"), docs: [] }] }), docs: [] } }, PortableType { id: 266, ty: Type { path: Path { segments: ["polkadot_primitives", "vstaging", "InternalVersion"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }] }), docs: [] } }, PortableType { id: 267, ty: Type { path: Path { segments: ["polkadot_parachain_primitives", "primitives", "ValidationCodeHash"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }] }), docs: [] } }, PortableType { id: 268, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "CandidateCommitments"] }, type_params: [TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("upward_messages"), ty: UntrackedSymbol { id: 269, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("UpwardMessages"), docs: [] }, Field { name: Some("horizontal_messages"), ty: UntrackedSymbol { id: 270, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("HorizontalMessages"), docs: [] }, Field { name: Some("new_validation_code"), ty: UntrackedSymbol { id: 273, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<ValidationCode>"), docs: [] }, Field { name: Some("head_data"), ty: UntrackedSymbol { id: 275, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("HeadData"), docs: [] }, Field { name: Some("processed_downward_messages"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("hrmp_watermark"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }] }), docs: [] } }, PortableType { id: 269, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 108, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 270, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 271, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 272, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 271, ty: Type { path: Path { segments: ["polkadot_core_primitives", "OutboundHrmpMessage"] }, type_params: [TypeParameter { name: "Id", ty: Some(UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("recipient"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Id"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("alloc::vec::Vec<u8>"), docs: [] }] }), docs: [] } }, PortableType { id: 272, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 271, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 273, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 274, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 274, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 274, ty: Type { path: Path { segments: ["polkadot_parachain_primitives", "primitives", "ValidationCode"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }), docs: [] } }, PortableType { id: 275, ty: Type { path: Path { segments: ["polkadot_parachain_primitives", "primitives", "HeadData"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }), docs: [] } }, PortableType { id: 276, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 277, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 277, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "ValidityAttestation"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Implicit", fields: [Field { name: None, ty: UntrackedSymbol { id: 261, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidatorSignature"), docs: [] }], index: 1, docs: [] }, Variant { name: "Explicit", fields: [Field { name: None, ty: UntrackedSymbol { id: 261, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidatorSignature"), docs: [] }], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 278, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 279, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 279, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "DisputeStatementSet"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("candidate_hash"), ty: UntrackedSymbol { id: 280, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CandidateHash"), docs: [] }, Field { name: Some("session"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SessionIndex"), docs: [] }, Field { name: Some("statements"), ty: UntrackedSymbol { id: 281, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<(DisputeStatement, ValidatorIndex, ValidatorSignature)>"), docs: [] }] }), docs: [] } }, PortableType { id: 280, ty: Type { path: Path { segments: ["polkadot_core_primitives", "CandidateHash"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }] }), docs: [] } }, PortableType { id: 281, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 282, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 282, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 283, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 260, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 261, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 283, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "DisputeStatement"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Valid", fields: [Field { name: None, ty: UntrackedSymbol { id: 284, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidDisputeStatementKind"), docs: [] }], index: 0, docs: [] }, Variant { name: "Invalid", fields: [Field { name: None, ty: UntrackedSymbol { id: 286, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("InvalidDisputeStatementKind"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 284, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "ValidDisputeStatementKind"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Explicit", fields: [], index: 0, docs: [] }, Variant { name: "BackingSeconded", fields: [Field { name: None, ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }], index: 1, docs: [] }, Variant { name: "BackingValid", fields: [Field { name: None, ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }], index: 2, docs: [] }, Variant { name: "ApprovalChecking", fields: [], index: 3, docs: [] }, Variant { name: "ApprovalCheckingMultipleCandidates", fields: [Field { name: None, ty: UntrackedSymbol { id: 285, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<CandidateHash>"), docs: [] }], index: 4, docs: [] }] }), docs: [] } }, PortableType { id: 285, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 280, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 286, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "InvalidDisputeStatementKind"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Explicit", fields: [], index: 0, docs: [] }] }), docs: [] } }, PortableType { id: 287, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "paras", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "force_set_current_code", fields: [Field { name: Some("para"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("new_code"), ty: UntrackedSymbol { id: 274, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidationCode"), docs: [] }], index: 0, docs: ["Set the storage for the parachain validation code immediately."] }, Variant { name: "force_set_current_head", fields: [Field { name: Some("para"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("new_head"), ty: UntrackedSymbol { id: 275, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("HeadData"), docs: [] }], index: 1, docs: ["Set the storage for the current parachain head data immediately."] }, Variant { name: "force_schedule_code_upgrade", fields: [Field { name: Some("para"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("new_code"), ty: UntrackedSymbol { id: 274, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidationCode"), docs: [] }, Field { name: Some("relay_parent_number"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }], index: 2, docs: ["Schedule an upgrade as if it was scheduled in the given relay parent block."] }, Variant { name: "force_note_new_head", fields: [Field { name: Some("para"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("new_head"), ty: UntrackedSymbol { id: 275, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("HeadData"), docs: [] }], index: 3, docs: ["Note a new block head for para within the context of the current block."] }, Variant { name: "force_queue_action", fields: [Field { name: Some("para"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 4, docs: ["Put a parachain directly into the next session's action queue.", "We can't queue it any sooner than this without going into the", "initializer..."] }, Variant { name: "add_trusted_validation_code", fields: [Field { name: Some("validation_code"), ty: UntrackedSymbol { id: 274, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidationCode"), docs: [] }], index: 5, docs: ["Adds the validation code to the storage.", "", "The code will not be added if it is already present. Additionally, if PVF pre-checking", "is running for that code, it will be instantly accepted.", "", "Otherwise, the code will be added into the storage. Note that the code will be added", "into storage with reference count 0. This is to account the fact that there are no users", "for this code yet. The caller will have to make sure that this code eventually gets", "used by some parachain or removed from the storage to avoid storage leaks. For the", "latter prefer to use the `poke_unused_validation_code` dispatchable to raw storage", "manipulation.", "", "This function is mainly meant to be used for upgrading parachains that do not follow", "the go-ahead signal while the PVF pre-checking feature is enabled."] }, Variant { name: "poke_unused_validation_code", fields: [Field { name: Some("validation_code_hash"), ty: UntrackedSymbol { id: 267, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidationCodeHash"), docs: [] }], index: 6, docs: ["Remove the validation code from the storage iff the reference count is 0.", "", "This is better than removing the storage directly, because it will not remove the code", "that was suddenly got used by some parachain while this dispatchable was pending", "dispatching."] }, Variant { name: "include_pvf_check_statement", fields: [Field { name: Some("stmt"), ty: UntrackedSymbol { id: 288, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PvfCheckStatement"), docs: [] }, Field { name: Some("signature"), ty: UntrackedSymbol { id: 261, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidatorSignature"), docs: [] }], index: 7, docs: ["Includes a statement for a PVF pre-checking vote. Potentially, finalizes the vote and", "enacts the results if that was the last vote before achieving the supermajority."] }, Variant { name: "force_set_most_recent_context", fields: [Field { name: Some("para"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("context"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }], index: 8, docs: ["Set the storage for the current parachain head data immediately."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 288, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "PvfCheckStatement"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("accept"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("subject"), ty: UntrackedSymbol { id: 267, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidationCodeHash"), docs: [] }, Field { name: Some("session_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SessionIndex"), docs: [] }, Field { name: Some("validator_index"), ty: UntrackedSymbol { id: 260, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidatorIndex"), docs: [] }] }), docs: [] } }, PortableType { id: 289, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "initializer", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "force_approve", fields: [Field { name: Some("up_to"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }], index: 0, docs: ["Issue a signal to the consensus engine to forcibly act as though all parachain", "blocks in all relay chain blocks up to and including the given number in the current", "chain are valid and should be finalized."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 290, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "hrmp", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "hrmp_init_open_channel", fields: [Field { name: Some("recipient"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("proposed_max_capacity"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("proposed_max_message_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 0, docs: ["Initiate opening a channel from a parachain to a given recipient with given channel", "parameters.", "", "- `proposed_max_capacity` - specifies how many messages can be in the channel at once.", "- `proposed_max_message_size` - specifies the maximum size of the messages.", "", "These numbers are a subject to the relay-chain configuration limits.", "", "The channel can be opened only after the recipient confirms it and only on a session", "change."] }, Variant { name: "hrmp_accept_open_channel", fields: [Field { name: Some("sender"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 1, docs: ["Accept a pending open channel request from the given sender.", "", "The channel will be opened only on the next session boundary."] }, Variant { name: "hrmp_close_channel", fields: [Field { name: Some("channel_id"), ty: UntrackedSymbol { id: 291, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("HrmpChannelId"), docs: [] }], index: 2, docs: ["Initiate unilateral closing of a channel. The origin must be either the sender or the", "recipient in the channel being closed.", "", "The closure can only happen on a session change."] }, Variant { name: "force_clean_hrmp", fields: [Field { name: Some("para"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("num_inbound"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("num_outbound"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 3, docs: ["This extrinsic triggers the cleanup of all the HRMP storage items that a para may have.", "Normally this happens once per session, but this allows you to trigger the cleanup", "immediately for a specific parachain.", "", "Number of inbound and outbound channels for `para` must be provided as witness data.", "", "Origin must be the `ChannelManager`."] }, Variant { name: "force_process_hrmp_open", fields: [Field { name: Some("channels"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 4, docs: ["Force process HRMP open channel requests.", "", "If there are pending HRMP open channel requests, you can use this function to process", "all of those requests immediately.", "", "Total number of opening channels must be provided as witness data.", "", "Origin must be the `ChannelManager`."] }, Variant { name: "force_process_hrmp_close", fields: [Field { name: Some("channels"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 5, docs: ["Force process HRMP close channel requests.", "", "If there are pending HRMP close channel requests, you can use this function to process", "all of those requests immediately.", "", "Total number of closing channels must be provided as witness data.", "", "Origin must be the `ChannelManager`."] }, Variant { name: "hrmp_cancel_open_request", fields: [Field { name: Some("channel_id"), ty: UntrackedSymbol { id: 291, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("HrmpChannelId"), docs: [] }, Field { name: Some("open_requests"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 6, docs: ["This cancels a pending open channel request. It can be canceled by either of the sender", "or the recipient for that request. The origin must be either of those.", "", "The cancellation happens immediately. It is not possible to cancel the request if it is", "already accepted.", "", "Total number of open requests (i.e. `HrmpOpenChannelRequestsList`) must be provided as", "witness data."] }, Variant { name: "force_open_hrmp_channel", fields: [Field { name: Some("sender"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("recipient"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("max_capacity"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_message_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 7, docs: ["Open a channel from a `sender` to a `recipient` `ParaId`. Although opened by governance,", "the `max_capacity` and `max_message_size` are still subject to the Relay Chain's", "configured limits.", "", "Expected use is when one (and only one) of the `ParaId`s involved in the channel is", "governed by the system, e.g. a system parachain.", "", "Origin must be the `ChannelManager`."] }, Variant { name: "establish_system_channel", fields: [Field { name: Some("sender"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("recipient"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 8, docs: ["Establish an HRMP channel between two system chains. If the channel does not already", "exist, the transaction fees will be refunded to the caller. The system does not take", "deposits for channels between system chains, and automatically sets the message number", "and size limits to the maximum allowed by the network's configuration.", "", "Arguments:", "", "- `sender`: A system chain, `ParaId`.", "- `recipient`: A system chain, `ParaId`.", "", "Any signed origin can call this function, but _both_ inputs MUST be system chains. If", "the channel does not exist yet, there is no fee."] }, Variant { name: "poke_channel_deposits", fields: [Field { name: Some("sender"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("recipient"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 9, docs: ["Update the deposits held for an HRMP channel to the latest `Configuration`. Channels", "with system chains do not require a deposit.", "", "Arguments:", "", "- `sender`: A chain, `ParaId`.", "- `recipient`: A chain, `ParaId`.", "", "Any signed origin can call this function."] }, Variant { name: "establish_channel_with_system", fields: [Field { name: Some("target_system_chain"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 10, docs: ["Establish a bidirectional HRMP channel between a parachain and a system chain.", "", "Arguments:", "", "- `target_system_chain`: A system chain, `ParaId`.", "", "The origin needs to be the parachain origin."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 291, ty: Type { path: Path { segments: ["polkadot_parachain_primitives", "primitives", "HrmpChannelId"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("sender"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Id"), docs: [] }, Field { name: Some("recipient"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Id"), docs: [] }] }), docs: [] } }, PortableType { id: 292, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "disputes", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "force_unfreeze", fields: [], index: 0, docs: [] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 293, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "disputes", "slashing", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "report_dispute_lost_unsigned", fields: [Field { name: Some("dispute_proof"), ty: UntrackedSymbol { id: 294, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<DisputeProof>"), docs: [] }, Field { name: Some("key_owner_proof"), ty: UntrackedSymbol { id: 114, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::KeyOwnerProof"), docs: [] }], index: 0, docs: [] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 294, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "slashing", "DisputeProof"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("time_slot"), ty: UntrackedSymbol { id: 295, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DisputesTimeSlot"), docs: [] }, Field { name: Some("kind"), ty: UntrackedSymbol { id: 296, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SlashingOffenceKind"), docs: [] }, Field { name: Some("validator_index"), ty: UntrackedSymbol { id: 260, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidatorIndex"), docs: [] }, Field { name: Some("validator_id"), ty: UntrackedSymbol { id: 134, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidatorId"), docs: [] }] }), docs: [] } }, PortableType { id: 295, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "slashing", "DisputesTimeSlot"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("session_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SessionIndex"), docs: [] }, Field { name: Some("candidate_hash"), ty: UntrackedSymbol { id: 280, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CandidateHash"), docs: [] }] }), docs: [] } }, PortableType { id: 296, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "slashing", "SlashingOffenceKind"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "ForInvalid", fields: [], index: 0, docs: [] }, Variant { name: "AgainstValid", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 297, ty: Type { path: Path { segments: ["pallet_message_queue", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "reap_page", fields: [Field { name: Some("message_origin"), ty: UntrackedSymbol { id: 298, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MessageOriginOf<T>"), docs: [] }, Field { name: Some("page_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PageIndex"), docs: [] }], index: 0, docs: ["Remove a page which has no more messages remaining to be processed or is stale."] }, Variant { name: "execute_overweight", fields: [Field { name: Some("message_origin"), ty: UntrackedSymbol { id: 298, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MessageOriginOf<T>"), docs: [] }, Field { name: Some("page"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PageIndex"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Size"), docs: [] }, Field { name: Some("weight_limit"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }], index: 1, docs: ["Execute an overweight message.", "", "Temporary processing errors will be propagated whereas permanent errors are treated", "as success condition.", "", "- `origin`: Must be `Signed`.", "- `message_origin`: The origin from which the message to be executed arrived.", "- `page`: The page in the queue in which the message to be executed is sitting.", "- `index`: The index into the queue of the message to be executed.", "- `weight_limit`: The maximum amount of weight allowed to be consumed in the execution", "  of the message.", "", "Benchmark complexity considerations: O(index + weight_limit)."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 298, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "inclusion", "AggregateMessageOrigin"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ump", fields: [Field { name: None, ty: UntrackedSymbol { id: 299, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("UmpQueueId"), docs: [] }], index: 0, docs: [] }] }), docs: [] } }, PortableType { id: 299, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "inclusion", "UmpQueueId"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Para", fields: [Field { name: None, ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 0, docs: [] }] }), docs: [] } }, PortableType { id: 300, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "on_demand", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "place_order_allow_death", fields: [Field { name: Some("max_amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("para_id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 0, docs: ["Create a single on demand core order.", "Will use the spot price for the current block and will reap the account if needed.", "", "Parameters:", "- `origin`: The sender of the call, funds will be withdrawn from this account.", "- `max_amount`: The maximum balance to withdraw from the origin to place an order.", "- `para_id`: A `ParaId` the origin wants to provide blockspace for.", "", "Errors:", "- `InsufficientBalance`: from the Currency implementation", "- `QueueFull`", "- `SpotPriceHigherThanMaxAmount`", "", "Events:", "- `OnDemandOrderPlaced`"] }, Variant { name: "place_order_keep_alive", fields: [Field { name: Some("max_amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("para_id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 1, docs: ["Same as the [`place_order_allow_death`](Self::place_order_allow_death) call , but with a", "check that placing the order will not reap the account.", "", "Parameters:", "- `origin`: The sender of the call, funds will be withdrawn from this account.", "- `max_amount`: The maximum balance to withdraw from the origin to place an order.", "- `para_id`: A `ParaId` the origin wants to provide blockspace for.", "", "Errors:", "- `InsufficientBalance`: from the Currency implementation", "- `QueueFull`", "- `SpotPriceHigherThanMaxAmount`", "", "Events:", "- `OnDemandOrderPlaced`"] }, Variant { name: "place_order_with_credits", fields: [Field { name: Some("max_amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("para_id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 2, docs: ["Create a single on demand core order with credits.", "Will charge the owner's on-demand credit account the spot price for the current block.", "", "Parameters:", "- `origin`: The sender of the call, on-demand credits will be withdrawn from this", "  account.", "- `max_amount`: The maximum number of credits to spend from the origin to place an", "  order.", "- `para_id`: A `ParaId` the origin wants to provide blockspace for.", "", "Errors:", "- `InsufficientCredits`", "- `QueueFull`", "- `SpotPriceHigherThanMaxAmount`", "", "Events:", "- `OnDemandOrderPlaced`"] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 301, ty: Type { path: Path { segments: ["polkadot_runtime_common", "paras_registrar", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "register", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("genesis_head"), ty: UntrackedSymbol { id: 275, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("HeadData"), docs: [] }, Field { name: Some("validation_code"), ty: UntrackedSymbol { id: 274, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidationCode"), docs: [] }], index: 0, docs: ["Register head data and validation code for a reserved Para Id.", "", "## Arguments", "- `origin`: Must be called by a `Signed` origin.", "- `id`: The para ID. Must be owned/managed by the `origin` signing account.", "- `genesis_head`: The genesis head data of the parachain/thread.", "- `validation_code`: The initial validation code of the parachain/thread.", "", "## Deposits/Fees", "The account with the originating signature must reserve a deposit.", "", "The deposit is required to cover the costs associated with storing the genesis head", "data and the validation code.", "This accounts for the potential to store validation code of a size up to the", "`max_code_size`, as defined in the configuration pallet", "", "Anything already reserved previously for this para ID is accounted for.", "", "## Events", "The `Registered` event is emitted in case of success."] }, Variant { name: "force_register", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("genesis_head"), ty: UntrackedSymbol { id: 275, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("HeadData"), docs: [] }, Field { name: Some("validation_code"), ty: UntrackedSymbol { id: 274, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidationCode"), docs: [] }], index: 1, docs: ["Force the registration of a Para Id on the relay chain.", "", "This function must be called by a Root origin.", "", "The deposit taken can be specified for this registration. Any `ParaId`", "can be registered, including sub-1000 IDs which are System Parachains."] }, Variant { name: "deregister", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 2, docs: ["Deregister a Para Id, freeing all data and returning any deposit.", "", "The caller must be Root, the `para` owner, or the `para` itself. The para must be an", "on-demand parachain."] }, Variant { name: "swap", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("other"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 3, docs: ["Swap a lease holding parachain with another parachain, either on-demand or lease", "holding.", "", "The origin must be Root, the `para` owner, or the `para` itself.", "", "The swap will happen only if there is already an opposite swap pending. If there is not,", "the swap will be stored in the pending swaps map, ready for a later confirmatory swap.", "", "The `ParaId`s remain mapped to the same head data and code so external code can rely on", "`ParaId` to be a long-term identifier of a notional \"parachain\". However, their", "scheduling info (i.e. whether they're an on-demand parachain or lease holding", "parachain), auction information and the auction deposit are switched."] }, Variant { name: "remove_lock", fields: [Field { name: Some("para"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 4, docs: ["Remove a manager lock from a para. This will allow the manager of a", "previously locked para to deregister or swap a para without using governance.", "", "Can only be called by the Root origin or the parachain."] }, Variant { name: "reserve", fields: [], index: 5, docs: ["Reserve a Para Id on the relay chain.", "", "This function will reserve a new Para Id to be owned/managed by the origin account.", "The origin account is able to register head data and validation code using `register` to", "create an on-demand parachain. Using the Slots pallet, an on-demand parachain can then", "be upgraded to a lease holding parachain.", "", "## Arguments", "- `origin`: Must be called by a `Signed` origin. Becomes the manager/owner of the new", "  para ID.", "", "## Deposits/Fees", "The origin must reserve a deposit of `ParaDeposit` for the registration.", "", "## Events", "The `Reserved` event is emitted in case of success, which provides the ID reserved for", "use."] }, Variant { name: "add_lock", fields: [Field { name: Some("para"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 6, docs: ["Add a manager lock from a para. This will prevent the manager of a", "para to deregister or swap a para.", "", "Can be called by Root, the parachain, or the parachain manager if the parachain is", "unlocked."] }, Variant { name: "schedule_code_upgrade", fields: [Field { name: Some("para"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("new_code"), ty: UntrackedSymbol { id: 274, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidationCode"), docs: [] }], index: 7, docs: ["Schedule a parachain upgrade.", "", "This will kick off a check of `new_code` by all validators. After the majority of the", "validators have reported on the validity of the code, the code will either be enacted", "or the upgrade will be rejected. If the code will be enacted, the current code of the", "parachain will be overwritten directly. This means that any PoV will be checked by this", "new code. The parachain itself will not be informed explicitly that the validation code", "has changed.", "", "Can be called by Root, the parachain, or the parachain manager if the parachain is", "unlocked."] }, Variant { name: "set_current_head", fields: [Field { name: Some("para"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("new_head"), ty: UntrackedSymbol { id: 275, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("HeadData"), docs: [] }], index: 8, docs: ["Set the parachain's current head.", "", "Can be called by Root, the parachain, or the parachain manager if the parachain is", "unlocked."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 302, ty: Type { path: Path { segments: ["polkadot_runtime_common", "slots", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "force_lease", fields: [Field { name: Some("para"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("leaser"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("period_begin"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("LeasePeriodOf<T>"), docs: [] }, Field { name: Some("period_count"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("LeasePeriodOf<T>"), docs: [] }], index: 0, docs: ["Just a connect into the `lease_out` call, in case Root wants to force some lease to", "happen independently of any other on-chain mechanism to use it.", "", "The dispatch origin for this call must match `T::ForceOrigin`."] }, Variant { name: "clear_all_leases", fields: [Field { name: Some("para"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 1, docs: ["Clear all leases for a Para Id, refunding any deposits back to the original owners.", "", "The dispatch origin for this call must match `T::ForceOrigin`."] }, Variant { name: "trigger_onboard", fields: [Field { name: Some("para"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 2, docs: ["Try to onboard a parachain that has a lease for the current lease period.", "", "This function can be useful if there was some state issue with a para that should", "have onboarded, but was unable to. As long as they have a lease period, we can", "let them onboard from here.", "", "Origin must be signed, but can be called by anyone."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 303, ty: Type { path: Path { segments: ["polkadot_runtime_common", "auctions", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "new_auction", fields: [Field { name: Some("duration"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }, Field { name: Some("lease_period_index"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("LeasePeriodOf<T>"), docs: [] }], index: 0, docs: ["Create a new auction.", "", "This can only happen when there isn't already an auction in progress and may only be", "called by the root origin. Accepts the `duration` of this auction and the", "`lease_period_index` of the initial lease period of the four that are to be auctioned."] }, Variant { name: "bid", fields: [Field { name: Some("para"), ty: UntrackedSymbol { id: 304, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("auction_index"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AuctionIndex"), docs: [] }, Field { name: Some("first_slot"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("LeasePeriodOf<T>"), docs: [] }, Field { name: Some("last_slot"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("LeasePeriodOf<T>"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 1, docs: ["Make a new bid from an account (including a parachain account) for deploying a new", "parachain.", "", "Multiple simultaneous bids from the same bidder are allowed only as long as all active", "bids overlap each other (i.e. are mutually exclusive). Bids cannot be redacted.", "", "- `sub` is the sub-bidder ID, allowing for multiple competing bids to be made by (and", "funded by) the same account.", "- `auction_index` is the index of the auction to bid on. Should just be the present", "value of `AuctionCounter`.", "- `first_slot` is the first lease period index of the range to bid on. This is the", "absolute lease period index value, not an auction-specific offset.", "- `last_slot` is the last lease period index of the range to bid on. This is the", "absolute lease period index value, not an auction-specific offset.", "- `amount` is the amount to bid to be held as deposit for the parachain should the", "bid win. This amount is held throughout the range."] }, Variant { name: "cancel_auction", fields: [], index: 2, docs: ["Cancel an in-progress auction.", "", "Can only be called by Root origin."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 304, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Compact(TypeDefCompact { type_param: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 305, ty: Type { path: Path { segments: ["polkadot_runtime_common", "crowdloan", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "create", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 304, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("cap"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("first_period"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("LeasePeriodOf<T>"), docs: [] }, Field { name: Some("last_period"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("LeasePeriodOf<T>"), docs: [] }, Field { name: Some("end"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }, Field { name: Some("verifier"), ty: UntrackedSymbol { id: 306, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<MultiSigner>"), docs: [] }], index: 0, docs: ["Create a new crowdloaning campaign for a parachain slot with the given lease period", "range.", "", "This applies a lock to your parachain configuration, ensuring that it cannot be changed", "by the parachain manager."] }, Variant { name: "contribute", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 304, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("signature"), ty: UntrackedSymbol { id: 217, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<MultiSignature>"), docs: [] }], index: 1, docs: ["Contribute to a crowd sale. This will transfer some balance over to fund a parachain", "slot. It will be withdrawable when the crowdloan has ended and the funds are unused."] }, Variant { name: "withdraw", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 304, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 2, docs: ["Withdraw full balance of a specific contributor.", "", "Origin must be signed, but can come from anyone.", "", "The fund must be either in, or ready for, retirement. For a fund to be *in* retirement,", "then the retirement flag must be set. For a fund to be ready for retirement, then:", "- it must not already be in retirement;", "- the amount of raised funds must be bigger than the _free_ balance of the account;", "- and either:", "  - the block number must be at least `end`; or", "  - the current lease period must be greater than the fund's `last_period`.", "", "In this case, the fund's retirement flag is set and its `end` is reset to the current", "block number.", "", "- `who`: The account whose contribution should be withdrawn.", "- `index`: The parachain to whose crowdloan the contribution was made."] }, Variant { name: "refund", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 304, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 3, docs: ["Automatically refund contributors of an ended crowdloan.", "Due to weight restrictions, this function may need to be called multiple", "times to fully refund all users. We will refund `RemoveKeysLimit` users at a time.", "", "Origin must be signed, but can come from anyone."] }, Variant { name: "dissolve", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 304, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 4, docs: ["Remove a fund after the retirement period has ended and all funds have been returned."] }, Variant { name: "edit", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 304, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("cap"), ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("first_period"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("LeasePeriodOf<T>"), docs: [] }, Field { name: Some("last_period"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("LeasePeriodOf<T>"), docs: [] }, Field { name: Some("end"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }, Field { name: Some("verifier"), ty: UntrackedSymbol { id: 306, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<MultiSigner>"), docs: [] }], index: 5, docs: ["Edit the configuration for an in-progress crowdloan.", "", "Can only be called by Root origin."] }, Variant { name: "add_memo", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("memo"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 6, docs: ["Add an optional memo to an existing crowdloan contribution.", "", "Origin must be Signed, and the user must have contributed to the crowdloan."] }, Variant { name: "poke", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 7, docs: ["Poke the fund into `NewRaise`", "", "Origin must be Signed, and the fund has non-zero raise."] }, Variant { name: "contribute_all", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 304, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("signature"), ty: UntrackedSymbol { id: 217, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<MultiSignature>"), docs: [] }], index: 8, docs: ["Contribute your entire balance to a crowd sale. This will transfer the entire balance of", "a user over to fund a parachain slot. It will be withdrawable when the crowdloan has", "ended and the funds are unused."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 306, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 307, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 307, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 307, ty: Type { path: Path { segments: ["sp_runtime", "MultiSigner"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ed25519", fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ed25519::Public"), docs: [] }], index: 0, docs: [] }, Variant { name: "Sr25519", fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("sr25519::Public"), docs: [] }], index: 1, docs: [] }, Variant { name: "Ecdsa", fields: [Field { name: None, ty: UntrackedSymbol { id: 138, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ecdsa::Public"), docs: [] }], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 308, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "coretime", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "request_core_count", fields: [Field { name: Some("count"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u16"), docs: [] }], index: 1, docs: ["Request the configuration to be updated with the specified number of cores. Warning:", "Since this only schedules a configuration update, it takes two sessions to come into", "effect.", "", "- `origin`: Root or the Coretime Chain", "- `count`: total number of cores"] }, Variant { name: "request_revenue_at", fields: [Field { name: Some("when"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }], index: 2, docs: ["Request to claim the instantaneous coretime sales revenue starting from the block it was", "last claimed until and up to the block specified. The claimed amount value is sent back", "to the Coretime chain in a `notify_revenue` message. At the same time, the amount is", "teleported to the Coretime chain."] }, Variant { name: "credit_account", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 3, docs: [] }, Variant { name: "assign_core", fields: [Field { name: Some("core"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BrokerCoreIndex"), docs: [] }, Field { name: Some("begin"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }, Field { name: Some("assignment"), ty: UntrackedSymbol { id: 309, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<(CoreAssignment, PartsOf57600)>"), docs: [] }, Field { name: Some("end_hint"), ty: UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<BlockNumberFor<T>>"), docs: [] }], index: 4, docs: ["Receive instructions from the `ExternalBrokerOrigin`, detailing how a specific core is", "to be used.", "", "Parameters:", "-`origin`: The `ExternalBrokerOrigin`, assumed to be the coretime chain.", "-`core`: The core that should be scheduled.", "-`begin`: The starting blockheight of the instruction.", "-`assignment`: How the blockspace should be utilised.", "-`end_hint`: An optional hint as to when this particular set of instructions will end."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 309, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 310, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 310, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 311, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 312, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 311, ty: Type { path: Path { segments: ["pallet_broker", "coretime_interface", "CoreAssignment"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Idle", fields: [], index: 0, docs: [] }, Variant { name: "Pool", fields: [], index: 1, docs: [] }, Variant { name: "Task", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskId"), docs: [] }], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 312, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "assigner_coretime", "PartsOf57600"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u16"), docs: [] }] }), docs: [] } }, PortableType { id: 313, ty: Type { path: Path { segments: ["pallet_migrations", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "force_set_cursor", fields: [Field { name: Some("cursor"), ty: UntrackedSymbol { id: 314, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<CursorOf<T>>"), docs: [] }], index: 0, docs: ["Allows root to set a cursor to forcefully start, stop or forward the migration process.", "", "Should normally not be needed and is only in place as emergency measure. Note that", "restarting the migration process in this manner will not call the", "[`MigrationStatusHandler::started`] hook or emit an `UpgradeStarted` event."] }, Variant { name: "force_set_active_cursor", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("inner_cursor"), ty: UntrackedSymbol { id: 318, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<RawCursorOf<T>>"), docs: [] }, Field { name: Some("started_at"), ty: UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<BlockNumberFor<T>>"), docs: [] }], index: 1, docs: ["Allows root to set an active cursor to forcefully start/forward the migration process.", "", "This is an edge-case version of [`Self::force_set_cursor`] that allows to set the", "`started_at` value to the next block number. Otherwise this would not be possible, since", "`force_set_cursor` takes an absolute block number. Setting `started_at` to `None`", "indicates that the current block number plus one should be used."] }, Variant { name: "force_onboard_mbms", fields: [], index: 2, docs: ["Forces the onboarding of the migrations.", "", "This process happens automatically on a runtime upgrade. It is in place as an emergency", "measurement. The cursor needs to be `None` for this to succeed."] }, Variant { name: "clear_historic", fields: [Field { name: Some("selector"), ty: UntrackedSymbol { id: 319, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("HistoricCleanupSelector<IdentifierOf<T>>"), docs: [] }], index: 3, docs: ["Clears the `Historic` set.", "", "`map_cursor` must be set to the last value that was returned by the", "`HistoricCleared` event. The first time `None` can be used. `limit` must be chosen in a", "way that will result in a sensible weight."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 314, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 315, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 315, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 315, ty: Type { path: Path { segments: ["pallet_migrations", "MigrationCursor"] }, type_params: [TypeParameter { name: "Cursor", ty: Some(UntrackedSymbol { id: 316, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Active", fields: [Field { name: None, ty: UntrackedSymbol { id: 317, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ActiveCursor<Cursor, BlockNumber>"), docs: [] }], index: 0, docs: [] }, Variant { name: "Stuck", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 316, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 317, ty: Type { path: Path { segments: ["pallet_migrations", "ActiveCursor"] }, type_params: [TypeParameter { name: "Cursor", ty: Some(UntrackedSymbol { id: 316, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("inner_cursor"), ty: UntrackedSymbol { id: 318, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Cursor>"), docs: [] }, Field { name: Some("started_at"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }] }), docs: [] } }, PortableType { id: 318, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 316, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 316, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 319, ty: Type { path: Path { segments: ["pallet_migrations", "HistoricCleanupSelector"] }, type_params: [TypeParameter { name: "Id", ty: Some(UntrackedSymbol { id: 320, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Specific", fields: [Field { name: None, ty: UntrackedSymbol { id: 321, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Id>"), docs: [] }], index: 0, docs: [] }, Variant { name: "Wildcard", fields: [Field { name: Some("limit"), ty: UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<u32>"), docs: [] }, Field { name: Some("previous_cursor"), ty: UntrackedSymbol { id: 322, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Vec<u8>>"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 320, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 321, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 320, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 322, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 323, ty: Type { path: Path { segments: ["pallet_xcm", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "send", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedLocation>"), docs: [] }, Field { name: Some("message"), ty: UntrackedSymbol { id: 324, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedXcm<()>>"), docs: [] }], index: 0, docs: [] }, Variant { name: "teleport_assets", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedLocation>"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedLocation>"), docs: [] }, Field { name: Some("assets"), ty: UntrackedSymbol { id: 398, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedAssets>"), docs: [] }, Field { name: Some("fee_asset_item"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 1, docs: ["Teleport some assets from the local chain to some destination chain.", "", "**This function is deprecated: Use `limited_teleport_assets` instead.**", "", "Fee payment on the destination side is made from the asset in the `assets` vector of", "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,", "with all fees taken as needed from the asset.", "", "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.", "- `dest`: Destination context for the assets. Will typically be `[Parent,", "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from", "  relay to parachain.", "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will", "  generally be an `AccountId32` value.", "- `assets`: The assets to be withdrawn. This should include the assets used to pay the", "  fee on the `dest` chain.", "- `fee_asset_item`: The index into `assets` of the item which should be used to pay", "  fees."] }, Variant { name: "reserve_transfer_assets", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedLocation>"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedLocation>"), docs: [] }, Field { name: Some("assets"), ty: UntrackedSymbol { id: 398, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedAssets>"), docs: [] }, Field { name: Some("fee_asset_item"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 2, docs: ["Transfer some assets from the local chain to the destination chain through their local,", "destination or remote reserve.", "", "`assets` must have same reserve location and may not be teleportable to `dest`.", " - `assets` have local reserve: transfer assets to sovereign account of destination", "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based", "   assets to `beneficiary`.", " - `assets` have destination reserve: burn local assets and forward a notification to", "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and", "   deposit them to `beneficiary`.", " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move", "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`", "   to mint and deposit reserve-based assets to `beneficiary`.", "", "**This function is deprecated: Use `limited_reserve_transfer_assets` instead.**", "", "Fee payment on the destination side is made from the asset in the `assets` vector of", "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,", "with all fees taken as needed from the asset.", "", "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.", "- `dest`: Destination context for the assets. Will typically be `[Parent,", "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from", "  relay to parachain.", "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will", "  generally be an `AccountId32` value.", "- `assets`: The assets to be withdrawn. This should include the assets used to pay the", "  fee on the `dest` (and possibly reserve) chains.", "- `fee_asset_item`: The index into `assets` of the item which should be used to pay", "  fees."] }, Variant { name: "execute", fields: [Field { name: Some("message"), ty: UntrackedSymbol { id: 399, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedXcm<<T as Config>::RuntimeCall>>"), docs: [] }, Field { name: Some("max_weight"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }], index: 3, docs: ["Execute an XCM message from a local, signed, origin.", "", "An event is deposited indicating whether `msg` could be executed completely or only", "partially.", "", "No more than `max_weight` will be used in its attempted execution. If this is less than", "the maximum amount of weight that the message could take to be executed, then no", "execution attempt will be made."] }, Variant { name: "force_xcm_version", fields: [Field { name: Some("location"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<Location>"), docs: [] }, Field { name: Some("version"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("XcmVersion"), docs: [] }], index: 4, docs: ["Extoll that a particular destination can be communicated with through a particular", "version of XCM.", "", "- `origin`: Must be an origin specified by AdminOrigin.", "- `location`: The destination that is being described.", "- `xcm_version`: The latest version of XCM that `location` supports."] }, Variant { name: "force_default_xcm_version", fields: [Field { name: Some("maybe_xcm_version"), ty: UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<XcmVersion>"), docs: [] }], index: 5, docs: ["Set a safe XCM version (the version that XCM should be encoded with if the most recent", "version a destination can accept is unknown).", "", "- `origin`: Must be an origin specified by AdminOrigin.", "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."] }, Variant { name: "force_subscribe_version_notify", fields: [Field { name: Some("location"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedLocation>"), docs: [] }], index: 6, docs: ["Ask a location to notify us regarding their XCM version and any changes to it.", "", "- `origin`: Must be an origin specified by AdminOrigin.", "- `location`: The location to which we should subscribe for XCM version notifications."] }, Variant { name: "force_unsubscribe_version_notify", fields: [Field { name: Some("location"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedLocation>"), docs: [] }], index: 7, docs: ["Require that a particular destination should no longer notify us regarding any XCM", "version changes.", "", "- `origin`: Must be an origin specified by AdminOrigin.", "- `location`: The location to which we are currently subscribed for XCM version", "  notifications which we no longer desire."] }, Variant { name: "limited_reserve_transfer_assets", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedLocation>"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedLocation>"), docs: [] }, Field { name: Some("assets"), ty: UntrackedSymbol { id: 398, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedAssets>"), docs: [] }, Field { name: Some("fee_asset_item"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("weight_limit"), ty: UntrackedSymbol { id: 350, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WeightLimit"), docs: [] }], index: 8, docs: ["Transfer some assets from the local chain to the destination chain through their local,", "destination or remote reserve.", "", "`assets` must have same reserve location and may not be teleportable to `dest`.", " - `assets` have local reserve: transfer assets to sovereign account of destination", "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based", "   assets to `beneficiary`.", " - `assets` have destination reserve: burn local assets and forward a notification to", "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and", "   deposit them to `beneficiary`.", " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move", "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`", "   to mint and deposit reserve-based assets to `beneficiary`.", "", "Fee payment on the destination side is made from the asset in the `assets` vector of", "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight", "is needed than `weight_limit`, then the operation will fail and the sent assets may be", "at risk.", "", "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.", "- `dest`: Destination context for the assets. Will typically be `[Parent,", "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from", "  relay to parachain.", "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will", "  generally be an `AccountId32` value.", "- `assets`: The assets to be withdrawn. This should include the assets used to pay the", "  fee on the `dest` (and possibly reserve) chains.", "- `fee_asset_item`: The index into `assets` of the item which should be used to pay", "  fees.", "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."] }, Variant { name: "limited_teleport_assets", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedLocation>"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedLocation>"), docs: [] }, Field { name: Some("assets"), ty: UntrackedSymbol { id: 398, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedAssets>"), docs: [] }, Field { name: Some("fee_asset_item"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("weight_limit"), ty: UntrackedSymbol { id: 350, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WeightLimit"), docs: [] }], index: 9, docs: ["Teleport some assets from the local chain to some destination chain.", "", "Fee payment on the destination side is made from the asset in the `assets` vector of", "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight", "is needed than `weight_limit`, then the operation will fail and the sent assets may be", "at risk.", "", "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.", "- `dest`: Destination context for the assets. Will typically be `[Parent,", "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from", "  relay to parachain.", "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will", "  generally be an `AccountId32` value.", "- `assets`: The assets to be withdrawn. This should include the assets used to pay the", "  fee on the `dest` chain.", "- `fee_asset_item`: The index into `assets` of the item which should be used to pay", "  fees.", "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."] }, Variant { name: "force_suspension", fields: [Field { name: Some("suspended"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 10, docs: ["Set or unset the global suspension state of the XCM executor.", "", "- `origin`: Must be an origin specified by AdminOrigin.", "- `suspended`: `true` to suspend, `false` to resume."] }, Variant { name: "transfer_assets", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedLocation>"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedLocation>"), docs: [] }, Field { name: Some("assets"), ty: UntrackedSymbol { id: 398, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedAssets>"), docs: [] }, Field { name: Some("fee_asset_item"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("weight_limit"), ty: UntrackedSymbol { id: 350, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WeightLimit"), docs: [] }], index: 11, docs: ["Transfer some assets from the local chain to the destination chain through their local,", "destination or remote reserve, or through teleports.", "", "Fee payment on the destination side is made from the asset in the `assets` vector of", "index `fee_asset_item` (hence referred to as `fees`), up to enough to pay for", "`weight_limit` of weight. If more weight is needed than `weight_limit`, then the", "operation will fail and the sent assets may be at risk.", "", "`assets` (excluding `fees`) must have same reserve location or otherwise be teleportable", "to `dest`, no limitations imposed on `fees`.", " - for local reserve: transfer assets to sovereign account of destination chain and", "   forward a notification XCM to `dest` to mint and deposit reserve-based assets to", "   `beneficiary`.", " - for destination reserve: burn local assets and forward a notification to `dest` chain", "   to withdraw the reserve assets from this chain's sovereign account and deposit them", "   to `beneficiary`.", " - for remote reserve: burn local assets, forward XCM to reserve chain to move reserves", "   from this chain's SA to `dest` chain's SA, and forward another XCM to `dest` to mint", "   and deposit reserve-based assets to `beneficiary`.", " - for teleports: burn local assets and forward XCM to `dest` chain to mint/teleport", "   assets and deposit them to `beneficiary`.", "", "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.", "- `dest`: Destination context for the assets. Will typically be `X2(Parent,", "  Parachain(..))` to send from parachain to parachain, or `X1(Parachain(..))` to send", "  from relay to parachain.", "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will", "  generally be an `AccountId32` value.", "- `assets`: The assets to be withdrawn. This should include the assets used to pay the", "  fee on the `dest` (and possibly reserve) chains.", "- `fee_asset_item`: The index into `assets` of the item which should be used to pay", "  fees.", "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."] }, Variant { name: "claim_assets", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 398, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedAssets>"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedLocation>"), docs: [] }], index: 12, docs: ["Claims assets trapped on this pallet because of leftover assets during XCM execution.", "", "- `origin`: Anyone can call this extrinsic.", "- `assets`: The exact assets that were trapped. Use the version to specify what version", "was the latest when they were trapped.", "- `beneficiary`: The location/account where the claimed assets will be deposited."] }, Variant { name: "transfer_assets_using_type_and_then", fields: [Field { name: Some("dest"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedLocation>"), docs: [] }, Field { name: Some("assets"), ty: UntrackedSymbol { id: 398, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedAssets>"), docs: [] }, Field { name: Some("assets_transfer_type"), ty: UntrackedSymbol { id: 410, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<TransferType>"), docs: [] }, Field { name: Some("remote_fees_id"), ty: UntrackedSymbol { id: 411, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedAssetId>"), docs: [] }, Field { name: Some("fees_transfer_type"), ty: UntrackedSymbol { id: 410, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<TransferType>"), docs: [] }, Field { name: Some("custom_xcm_on_dest"), ty: UntrackedSymbol { id: 324, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<VersionedXcm<()>>"), docs: [] }, Field { name: Some("weight_limit"), ty: UntrackedSymbol { id: 350, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WeightLimit"), docs: [] }], index: 13, docs: ["Transfer assets from the local chain to the destination chain using explicit transfer", "types for assets and fees.", "", "`assets` must have same reserve location or may be teleportable to `dest`. Caller must", "provide the `assets_transfer_type` to be used for `assets`:", " - `TransferType::LocalReserve`: transfer assets to sovereign account of destination", "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based", "   assets to `beneficiary`.", " - `TransferType::DestinationReserve`: burn local assets and forward a notification to", "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and", "   deposit them to `beneficiary`.", " - `TransferType::RemoteReserve(reserve)`: burn local assets, forward XCM to `reserve`", "   chain to move reserves from this chain's SA to `dest` chain's SA, and forward another", "   XCM to `dest` to mint and deposit reserve-based assets to `beneficiary`. Typically", "   the remote `reserve` is Asset Hub.", " - `TransferType::Teleport`: burn local assets and forward XCM to `dest` chain to", "   mint/teleport assets and deposit them to `beneficiary`.", "", "On the destination chain, as well as any intermediary hops, `BuyExecution` is used to", "buy execution using transferred `assets` identified by `remote_fees_id`.", "Make sure enough of the specified `remote_fees_id` asset is included in the given list", "of `assets`. `remote_fees_id` should be enough to pay for `weight_limit`. If more weight", "is needed than `weight_limit`, then the operation will fail and the sent assets may be", "at risk.", "", "`remote_fees_id` may use different transfer type than rest of `assets` and can be", "specified through `fees_transfer_type`.", "", "The caller needs to specify what should happen to the transferred assets once they reach", "the `dest` chain. This is done through the `custom_xcm_on_dest` parameter, which", "contains the instructions to execute on `dest` as a final step.", "  This is usually as simple as:", "  `Xcm(vec![DepositAsset { assets: Wild(AllCounted(assets.len())), beneficiary }])`,", "  but could be something more exotic like sending the `assets` even further.", "", "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.", "- `dest`: Destination context for the assets. Will typically be `[Parent,", "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from", "  relay to parachain, or `(parents: 2, (GlobalConsensus(..), ..))` to send from", "  parachain across a bridge to another ecosystem destination.", "- `assets`: The assets to be withdrawn. This should include the assets used to pay the", "  fee on the `dest` (and possibly reserve) chains.", "- `assets_transfer_type`: The XCM `TransferType` used to transfer the `assets`.", "- `remote_fees_id`: One of the included `assets` to be used to pay fees.", "- `fees_transfer_type`: The XCM `TransferType` used to transfer the `fees` assets.", "- `custom_xcm_on_dest`: The XCM to be executed on `dest` chain as the last step of the", "  transfer, which also determines what happens to the assets on the destination chain.", "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 324, ty: Type { path: Path { segments: ["xcm", "VersionedXcm"] }, type_params: [TypeParameter { name: "RuntimeCall", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "V3", fields: [Field { name: None, ty: UntrackedSymbol { id: 325, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("v3::Xcm<RuntimeCall>"), docs: [] }], index: 3, docs: [] }, Variant { name: "V4", fields: [Field { name: None, ty: UntrackedSymbol { id: 351, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("v4::Xcm<RuntimeCall>"), docs: [] }], index: 4, docs: [] }, Variant { name: "V5", fields: [Field { name: None, ty: UntrackedSymbol { id: 369, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("v5::Xcm<RuntimeCall>"), docs: [] }], index: 5, docs: [] }] }), docs: [] } }, PortableType { id: 325, ty: Type { path: Path { segments: ["xcm", "v3", "Xcm"] }, type_params: [TypeParameter { name: "Call", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 326, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Instruction<Call>>"), docs: [] }] }), docs: [] } }, PortableType { id: 326, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 327, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 327, ty: Type { path: Path { segments: ["xcm", "v3", "Instruction"] }, type_params: [TypeParameter { name: "Call", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "WithdrawAsset", fields: [Field { name: None, ty: UntrackedSymbol { id: 328, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssets"), docs: [] }], index: 0, docs: [] }, Variant { name: "ReserveAssetDeposited", fields: [Field { name: None, ty: UntrackedSymbol { id: 328, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssets"), docs: [] }], index: 1, docs: [] }, Variant { name: "ReceiveTeleportedAsset", fields: [Field { name: None, ty: UntrackedSymbol { id: 328, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssets"), docs: [] }], index: 2, docs: [] }, Variant { name: "QueryResponse", fields: [Field { name: Some("query_id"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }, Field { name: Some("response"), ty: UntrackedSymbol { id: 333, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Response"), docs: [] }, Field { name: Some("max_weight"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("querier"), ty: UntrackedSymbol { id: 343, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<MultiLocation>"), docs: [] }], index: 3, docs: [] }, Variant { name: "TransferAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 328, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssets"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }], index: 4, docs: [] }, Variant { name: "TransferReserveAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 328, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssets"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 325, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 5, docs: [] }, Variant { name: "Transact", fields: [Field { name: Some("origin_kind"), ty: UntrackedSymbol { id: 344, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OriginKind"), docs: [] }, Field { name: Some("require_weight_at_most"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 345, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DoubleEncoded<Call>"), docs: [] }], index: 6, docs: [] }, Variant { name: "HrmpNewChannelOpenRequest", fields: [Field { name: Some("sender"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_message_size"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_capacity"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 7, docs: [] }, Variant { name: "HrmpChannelAccepted", fields: [Field { name: Some("recipient"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 8, docs: [] }, Variant { name: "HrmpChannelClosing", fields: [Field { name: Some("initiator"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("sender"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("recipient"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 9, docs: [] }, Variant { name: "ClearOrigin", fields: [], index: 10, docs: [] }, Variant { name: "DescendOrigin", fields: [Field { name: None, ty: UntrackedSymbol { id: 59, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("InteriorMultiLocation"), docs: [] }], index: 11, docs: [] }, Variant { name: "ReportError", fields: [Field { name: None, ty: UntrackedSymbol { id: 346, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryResponseInfo"), docs: [] }], index: 12, docs: [] }, Variant { name: "DepositAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 347, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssetFilter"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }], index: 13, docs: [] }, Variant { name: "DepositReserveAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 347, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssetFilter"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 325, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 14, docs: [] }, Variant { name: "ExchangeAsset", fields: [Field { name: Some("give"), ty: UntrackedSymbol { id: 347, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssetFilter"), docs: [] }, Field { name: Some("want"), ty: UntrackedSymbol { id: 328, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssets"), docs: [] }, Field { name: Some("maximal"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 15, docs: [] }, Variant { name: "InitiateReserveWithdraw", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 347, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssetFilter"), docs: [] }, Field { name: Some("reserve"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 325, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 16, docs: [] }, Variant { name: "InitiateTeleport", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 347, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssetFilter"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 325, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 17, docs: [] }, Variant { name: "ReportHolding", fields: [Field { name: Some("response_info"), ty: UntrackedSymbol { id: 346, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryResponseInfo"), docs: [] }, Field { name: Some("assets"), ty: UntrackedSymbol { id: 347, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssetFilter"), docs: [] }], index: 18, docs: [] }, Variant { name: "BuyExecution", fields: [Field { name: Some("fees"), ty: UntrackedSymbol { id: 330, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAsset"), docs: [] }, Field { name: Some("weight_limit"), ty: UntrackedSymbol { id: 350, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WeightLimit"), docs: [] }], index: 19, docs: [] }, Variant { name: "RefundSurplus", fields: [], index: 20, docs: [] }, Variant { name: "SetErrorHandler", fields: [Field { name: None, ty: UntrackedSymbol { id: 325, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<Call>"), docs: [] }], index: 21, docs: [] }, Variant { name: "SetAppendix", fields: [Field { name: None, ty: UntrackedSymbol { id: 325, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<Call>"), docs: [] }], index: 22, docs: [] }, Variant { name: "ClearError", fields: [], index: 23, docs: [] }, Variant { name: "ClaimAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 328, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssets"), docs: [] }, Field { name: Some("ticket"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }], index: 24, docs: [] }, Variant { name: "Trap", fields: [Field { name: None, ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }], index: 25, docs: [] }, Variant { name: "SubscribeVersion", fields: [Field { name: Some("query_id"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }, Field { name: Some("max_response_weight"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }], index: 26, docs: [] }, Variant { name: "UnsubscribeVersion", fields: [], index: 27, docs: [] }, Variant { name: "BurnAsset", fields: [Field { name: None, ty: UntrackedSymbol { id: 328, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssets"), docs: [] }], index: 28, docs: [] }, Variant { name: "ExpectAsset", fields: [Field { name: None, ty: UntrackedSymbol { id: 328, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssets"), docs: [] }], index: 29, docs: [] }, Variant { name: "ExpectOrigin", fields: [Field { name: None, ty: UntrackedSymbol { id: 343, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<MultiLocation>"), docs: [] }], index: 30, docs: [] }, Variant { name: "ExpectError", fields: [Field { name: None, ty: UntrackedSymbol { id: 334, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<(u32, Error)>"), docs: [] }], index: 31, docs: [] }, Variant { name: "ExpectTransactStatus", fields: [Field { name: None, ty: UntrackedSymbol { id: 341, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MaybeErrorCode"), docs: [] }], index: 32, docs: [] }, Variant { name: "QueryPallet", fields: [Field { name: Some("module_name"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("response_info"), ty: UntrackedSymbol { id: 346, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryResponseInfo"), docs: [] }], index: 33, docs: [] }, Variant { name: "ExpectPallet", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("name"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("module_name"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("crate_major"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("min_crate_minor"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 34, docs: [] }, Variant { name: "ReportTransactStatus", fields: [Field { name: None, ty: UntrackedSymbol { id: 346, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryResponseInfo"), docs: [] }], index: 35, docs: [] }, Variant { name: "ClearTransactStatus", fields: [], index: 36, docs: [] }, Variant { name: "UniversalOrigin", fields: [Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }], index: 37, docs: [] }, Variant { name: "ExportMessage", fields: [Field { name: Some("network"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("NetworkId"), docs: [] }, Field { name: Some("destination"), ty: UntrackedSymbol { id: 59, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("InteriorMultiLocation"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 325, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 38, docs: [] }, Variant { name: "LockAsset", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 330, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAsset"), docs: [] }, Field { name: Some("unlocker"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }], index: 39, docs: [] }, Variant { name: "UnlockAsset", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 330, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAsset"), docs: [] }, Field { name: Some("target"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }], index: 40, docs: [] }, Variant { name: "NoteUnlockable", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 330, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAsset"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }], index: 41, docs: [] }, Variant { name: "RequestUnlock", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 330, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAsset"), docs: [] }, Field { name: Some("locker"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }], index: 42, docs: [] }, Variant { name: "SetFeesMode", fields: [Field { name: Some("jit_withdraw"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 43, docs: [] }, Variant { name: "SetTopic", fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 44, docs: [] }, Variant { name: "ClearTopic", fields: [], index: 45, docs: [] }, Variant { name: "AliasOrigin", fields: [Field { name: None, ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }], index: 46, docs: [] }, Variant { name: "UnpaidExecution", fields: [Field { name: Some("weight_limit"), ty: UntrackedSymbol { id: 350, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WeightLimit"), docs: [] }, Field { name: Some("check_origin"), ty: UntrackedSymbol { id: 343, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<MultiLocation>"), docs: [] }], index: 47, docs: [] }] }), docs: [] } }, PortableType { id: 328, ty: Type { path: Path { segments: ["xcm", "v3", "multiasset", "MultiAssets"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 329, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<MultiAsset>"), docs: [] }] }), docs: [] } }, PortableType { id: 329, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 330, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 330, ty: Type { path: Path { segments: ["xcm", "v3", "multiasset", "MultiAsset"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 68, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetId"), docs: [] }, Field { name: Some("fun"), ty: UntrackedSymbol { id: 331, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Fungibility"), docs: [] }] }), docs: [] } }, PortableType { id: 331, ty: Type { path: Path { segments: ["xcm", "v3", "multiasset", "Fungibility"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Fungible", fields: [Field { name: None, ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }], index: 0, docs: [] }, Variant { name: "NonFungible", fields: [Field { name: None, ty: UntrackedSymbol { id: 332, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetInstance"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 332, ty: Type { path: Path { segments: ["xcm", "v3", "multiasset", "AssetInstance"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Undefined", fields: [], index: 0, docs: [] }, Variant { name: "Index", fields: [Field { name: None, ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }], index: 1, docs: [] }, Variant { name: "Array4", fields: [Field { name: None, ty: UntrackedSymbol { id: 18, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 4]"), docs: [] }], index: 2, docs: [] }, Variant { name: "Array8", fields: [Field { name: None, ty: UntrackedSymbol { id: 190, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 8]"), docs: [] }], index: 3, docs: [] }, Variant { name: "Array16", fields: [Field { name: None, ty: UntrackedSymbol { id: 50, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 16]"), docs: [] }], index: 4, docs: [] }, Variant { name: "Array32", fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 5, docs: [] }] }), docs: [] } }, PortableType { id: 333, ty: Type { path: Path { segments: ["xcm", "v3", "Response"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Null", fields: [], index: 0, docs: [] }, Variant { name: "Assets", fields: [Field { name: None, ty: UntrackedSymbol { id: 328, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssets"), docs: [] }], index: 1, docs: [] }, Variant { name: "ExecutionResult", fields: [Field { name: None, ty: UntrackedSymbol { id: 334, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<(u32, Error)>"), docs: [] }], index: 2, docs: [] }, Variant { name: "Version", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("super::Version"), docs: [] }], index: 3, docs: [] }, Variant { name: "PalletsInfo", fields: [Field { name: None, ty: UntrackedSymbol { id: 337, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<PalletInfo, MaxPalletsInfo>"), docs: [] }], index: 4, docs: [] }, Variant { name: "DispatchResult", fields: [Field { name: None, ty: UntrackedSymbol { id: 341, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MaybeErrorCode"), docs: [] }], index: 5, docs: [] }] }), docs: [] } }, PortableType { id: 334, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 335, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 335, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 335, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 336, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 336, ty: Type { path: Path { segments: ["xcm", "v3", "traits", "Error"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Overflow", fields: [], index: 0, docs: [] }, Variant { name: "Unimplemented", fields: [], index: 1, docs: [] }, Variant { name: "UntrustedReserveLocation", fields: [], index: 2, docs: [] }, Variant { name: "UntrustedTeleportLocation", fields: [], index: 3, docs: [] }, Variant { name: "LocationFull", fields: [], index: 4, docs: [] }, Variant { name: "LocationNotInvertible", fields: [], index: 5, docs: [] }, Variant { name: "BadOrigin", fields: [], index: 6, docs: [] }, Variant { name: "InvalidLocation", fields: [], index: 7, docs: [] }, Variant { name: "AssetNotFound", fields: [], index: 8, docs: [] }, Variant { name: "FailedToTransactAsset", fields: [], index: 9, docs: [] }, Variant { name: "NotWithdrawable", fields: [], index: 10, docs: [] }, Variant { name: "LocationCannotHold", fields: [], index: 11, docs: [] }, Variant { name: "ExceedsMaxMessageSize", fields: [], index: 12, docs: [] }, Variant { name: "DestinationUnsupported", fields: [], index: 13, docs: [] }, Variant { name: "Transport", fields: [], index: 14, docs: [] }, Variant { name: "Unroutable", fields: [], index: 15, docs: [] }, Variant { name: "UnknownClaim", fields: [], index: 16, docs: [] }, Variant { name: "FailedToDecode", fields: [], index: 17, docs: [] }, Variant { name: "MaxWeightInvalid", fields: [], index: 18, docs: [] }, Variant { name: "NotHoldingFees", fields: [], index: 19, docs: [] }, Variant { name: "TooExpensive", fields: [], index: 20, docs: [] }, Variant { name: "Trap", fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }], index: 21, docs: [] }, Variant { name: "ExpectationFalse", fields: [], index: 22, docs: [] }, Variant { name: "PalletNotFound", fields: [], index: 23, docs: [] }, Variant { name: "NameMismatch", fields: [], index: 24, docs: [] }, Variant { name: "VersionIncompatible", fields: [], index: 25, docs: [] }, Variant { name: "HoldingWouldOverflow", fields: [], index: 26, docs: [] }, Variant { name: "ExportError", fields: [], index: 27, docs: [] }, Variant { name: "ReanchorFailed", fields: [], index: 28, docs: [] }, Variant { name: "NoDeal", fields: [], index: 29, docs: [] }, Variant { name: "FeesNotMet", fields: [], index: 30, docs: [] }, Variant { name: "LockError", fields: [], index: 31, docs: [] }, Variant { name: "NoPermission", fields: [], index: 32, docs: [] }, Variant { name: "Unanchored", fields: [], index: 33, docs: [] }, Variant { name: "NotDepositable", fields: [], index: 34, docs: [] }, Variant { name: "UnhandledXcmVersion", fields: [], index: 35, docs: [] }, Variant { name: "WeightLimitReached", fields: [Field { name: None, ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }], index: 36, docs: [] }, Variant { name: "Barrier", fields: [], index: 37, docs: [] }, Variant { name: "WeightNotComputable", fields: [], index: 38, docs: [] }, Variant { name: "ExceedsStackLimit", fields: [], index: 39, docs: [] }] }), docs: [] } }, PortableType { id: 337, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 338, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 340, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 338, ty: Type { path: Path { segments: ["xcm", "v3", "PalletInfo"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("name"), ty: UntrackedSymbol { id: 339, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<u8, MaxPalletNameLen>"), docs: [] }, Field { name: Some("module_name"), ty: UntrackedSymbol { id: 339, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<u8, MaxPalletNameLen>"), docs: [] }, Field { name: Some("major"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("minor"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("patch"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 339, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 340, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 338, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 341, ty: Type { path: Path { segments: ["xcm", "v3", "MaybeErrorCode"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Success", fields: [], index: 0, docs: [] }, Variant { name: "Error", fields: [Field { name: None, ty: UntrackedSymbol { id: 342, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<u8, MaxDispatchErrorLen>"), docs: [] }], index: 1, docs: [] }, Variant { name: "TruncatedError", fields: [Field { name: None, ty: UntrackedSymbol { id: 342, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<u8, MaxDispatchErrorLen>"), docs: [] }], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 342, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 343, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 344, ty: Type { path: Path { segments: ["xcm", "v3", "OriginKind"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Native", fields: [], index: 0, docs: [] }, Variant { name: "SovereignAccount", fields: [], index: 1, docs: [] }, Variant { name: "Superuser", fields: [], index: 2, docs: [] }, Variant { name: "Xcm", fields: [], index: 3, docs: [] }] }), docs: [] } }, PortableType { id: 345, ty: Type { path: Path { segments: ["xcm", "double_encoded", "DoubleEncoded"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("encoded"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }), docs: [] } }, PortableType { id: 346, ty: Type { path: Path { segments: ["xcm", "v3", "QueryResponseInfo"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("destination"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }, Field { name: Some("query_id"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }, Field { name: Some("max_weight"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }] }), docs: [] } }, PortableType { id: 347, ty: Type { path: Path { segments: ["xcm", "v3", "multiasset", "MultiAssetFilter"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Definite", fields: [Field { name: None, ty: UntrackedSymbol { id: 328, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssets"), docs: [] }], index: 0, docs: [] }, Variant { name: "Wild", fields: [Field { name: None, ty: UntrackedSymbol { id: 348, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WildMultiAsset"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 348, ty: Type { path: Path { segments: ["xcm", "v3", "multiasset", "WildMultiAsset"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "All", fields: [], index: 0, docs: [] }, Variant { name: "AllOf", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 68, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetId"), docs: [] }, Field { name: Some("fun"), ty: UntrackedSymbol { id: 349, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WildFungibility"), docs: [] }], index: 1, docs: [] }, Variant { name: "AllCounted", fields: [Field { name: None, ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 2, docs: [] }, Variant { name: "AllOfCounted", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 68, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetId"), docs: [] }, Field { name: Some("fun"), ty: UntrackedSymbol { id: 349, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WildFungibility"), docs: [] }, Field { name: Some("count"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 3, docs: [] }] }), docs: [] } }, PortableType { id: 349, ty: Type { path: Path { segments: ["xcm", "v3", "multiasset", "WildFungibility"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Fungible", fields: [], index: 0, docs: [] }, Variant { name: "NonFungible", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 350, ty: Type { path: Path { segments: ["xcm", "v3", "WeightLimit"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Unlimited", fields: [], index: 0, docs: [] }, Variant { name: "Limited", fields: [Field { name: None, ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 351, ty: Type { path: Path { segments: ["staging_xcm", "v4", "Xcm"] }, type_params: [TypeParameter { name: "Call", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 352, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Instruction<Call>>"), docs: [] }] }), docs: [] } }, PortableType { id: 352, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 353, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 353, ty: Type { path: Path { segments: ["staging_xcm", "v4", "Instruction"] }, type_params: [TypeParameter { name: "Call", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "WithdrawAsset", fields: [Field { name: None, ty: UntrackedSymbol { id: 354, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }], index: 0, docs: [] }, Variant { name: "ReserveAssetDeposited", fields: [Field { name: None, ty: UntrackedSymbol { id: 354, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }], index: 1, docs: [] }, Variant { name: "ReceiveTeleportedAsset", fields: [Field { name: None, ty: UntrackedSymbol { id: 354, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }], index: 2, docs: [] }, Variant { name: "QueryResponse", fields: [Field { name: Some("query_id"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }, Field { name: Some("response"), ty: UntrackedSymbol { id: 359, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Response"), docs: [] }, Field { name: Some("max_weight"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("querier"), ty: UntrackedSymbol { id: 364, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Location>"), docs: [] }], index: 3, docs: [] }, Variant { name: "TransferAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 354, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 4, docs: [] }, Variant { name: "TransferReserveAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 354, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 351, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 5, docs: [] }, Variant { name: "Transact", fields: [Field { name: Some("origin_kind"), ty: UntrackedSymbol { id: 344, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OriginKind"), docs: [] }, Field { name: Some("require_weight_at_most"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 345, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DoubleEncoded<Call>"), docs: [] }], index: 6, docs: [] }, Variant { name: "HrmpNewChannelOpenRequest", fields: [Field { name: Some("sender"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_message_size"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_capacity"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 7, docs: [] }, Variant { name: "HrmpChannelAccepted", fields: [Field { name: Some("recipient"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 8, docs: [] }, Variant { name: "HrmpChannelClosing", fields: [Field { name: Some("initiator"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("sender"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("recipient"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 9, docs: [] }, Variant { name: "ClearOrigin", fields: [], index: 10, docs: [] }, Variant { name: "DescendOrigin", fields: [Field { name: None, ty: UntrackedSymbol { id: 70, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("InteriorLocation"), docs: [] }], index: 11, docs: [] }, Variant { name: "ReportError", fields: [Field { name: None, ty: UntrackedSymbol { id: 365, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryResponseInfo"), docs: [] }], index: 12, docs: [] }, Variant { name: "DepositAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 366, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 13, docs: [] }, Variant { name: "DepositReserveAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 366, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 351, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 14, docs: [] }, Variant { name: "ExchangeAsset", fields: [Field { name: Some("give"), ty: UntrackedSymbol { id: 366, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }, Field { name: Some("want"), ty: UntrackedSymbol { id: 354, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }, Field { name: Some("maximal"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 15, docs: [] }, Variant { name: "InitiateReserveWithdraw", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 366, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }, Field { name: Some("reserve"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 351, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 16, docs: [] }, Variant { name: "InitiateTeleport", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 366, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 351, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 17, docs: [] }, Variant { name: "ReportHolding", fields: [Field { name: Some("response_info"), ty: UntrackedSymbol { id: 365, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryResponseInfo"), docs: [] }, Field { name: Some("assets"), ty: UntrackedSymbol { id: 366, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }], index: 18, docs: [] }, Variant { name: "BuyExecution", fields: [Field { name: Some("fees"), ty: UntrackedSymbol { id: 356, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Asset"), docs: [] }, Field { name: Some("weight_limit"), ty: UntrackedSymbol { id: 350, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WeightLimit"), docs: [] }], index: 19, docs: [] }, Variant { name: "RefundSurplus", fields: [], index: 20, docs: [] }, Variant { name: "SetErrorHandler", fields: [Field { name: None, ty: UntrackedSymbol { id: 351, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<Call>"), docs: [] }], index: 21, docs: [] }, Variant { name: "SetAppendix", fields: [Field { name: None, ty: UntrackedSymbol { id: 351, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<Call>"), docs: [] }], index: 22, docs: [] }, Variant { name: "ClearError", fields: [], index: 23, docs: [] }, Variant { name: "ClaimAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 354, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }, Field { name: Some("ticket"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 24, docs: [] }, Variant { name: "Trap", fields: [Field { name: None, ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }], index: 25, docs: [] }, Variant { name: "SubscribeVersion", fields: [Field { name: Some("query_id"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }, Field { name: Some("max_response_weight"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }], index: 26, docs: [] }, Variant { name: "UnsubscribeVersion", fields: [], index: 27, docs: [] }, Variant { name: "BurnAsset", fields: [Field { name: None, ty: UntrackedSymbol { id: 354, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }], index: 28, docs: [] }, Variant { name: "ExpectAsset", fields: [Field { name: None, ty: UntrackedSymbol { id: 354, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }], index: 29, docs: [] }, Variant { name: "ExpectOrigin", fields: [Field { name: None, ty: UntrackedSymbol { id: 364, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Location>"), docs: [] }], index: 30, docs: [] }, Variant { name: "ExpectError", fields: [Field { name: None, ty: UntrackedSymbol { id: 334, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<(u32, Error)>"), docs: [] }], index: 31, docs: [] }, Variant { name: "ExpectTransactStatus", fields: [Field { name: None, ty: UntrackedSymbol { id: 341, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MaybeErrorCode"), docs: [] }], index: 32, docs: [] }, Variant { name: "QueryPallet", fields: [Field { name: Some("module_name"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("response_info"), ty: UntrackedSymbol { id: 365, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryResponseInfo"), docs: [] }], index: 33, docs: [] }, Variant { name: "ExpectPallet", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("name"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("module_name"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("crate_major"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("min_crate_minor"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 34, docs: [] }, Variant { name: "ReportTransactStatus", fields: [Field { name: None, ty: UntrackedSymbol { id: 365, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryResponseInfo"), docs: [] }], index: 35, docs: [] }, Variant { name: "ClearTransactStatus", fields: [], index: 36, docs: [] }, Variant { name: "UniversalOrigin", fields: [Field { name: None, ty: UntrackedSymbol { id: 72, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }], index: 37, docs: [] }, Variant { name: "ExportMessage", fields: [Field { name: Some("network"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("NetworkId"), docs: [] }, Field { name: Some("destination"), ty: UntrackedSymbol { id: 70, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("InteriorLocation"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 351, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 38, docs: [] }, Variant { name: "LockAsset", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 356, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Asset"), docs: [] }, Field { name: Some("unlocker"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 39, docs: [] }, Variant { name: "UnlockAsset", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 356, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Asset"), docs: [] }, Field { name: Some("target"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 40, docs: [] }, Variant { name: "NoteUnlockable", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 356, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Asset"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 41, docs: [] }, Variant { name: "RequestUnlock", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 356, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Asset"), docs: [] }, Field { name: Some("locker"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 42, docs: [] }, Variant { name: "SetFeesMode", fields: [Field { name: Some("jit_withdraw"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 43, docs: [] }, Variant { name: "SetTopic", fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 44, docs: [] }, Variant { name: "ClearTopic", fields: [], index: 45, docs: [] }, Variant { name: "AliasOrigin", fields: [Field { name: None, ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 46, docs: [] }, Variant { name: "UnpaidExecution", fields: [Field { name: Some("weight_limit"), ty: UntrackedSymbol { id: 350, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WeightLimit"), docs: [] }, Field { name: Some("check_origin"), ty: UntrackedSymbol { id: 364, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Location>"), docs: [] }], index: 47, docs: [] }] }), docs: [] } }, PortableType { id: 354, ty: Type { path: Path { segments: ["staging_xcm", "v4", "asset", "Assets"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 355, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Asset>"), docs: [] }] }), docs: [] } }, PortableType { id: 355, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 356, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 356, ty: Type { path: Path { segments: ["staging_xcm", "v4", "asset", "Asset"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 82, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetId"), docs: [] }, Field { name: Some("fun"), ty: UntrackedSymbol { id: 357, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Fungibility"), docs: [] }] }), docs: [] } }, PortableType { id: 357, ty: Type { path: Path { segments: ["staging_xcm", "v4", "asset", "Fungibility"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Fungible", fields: [Field { name: None, ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }], index: 0, docs: [] }, Variant { name: "NonFungible", fields: [Field { name: None, ty: UntrackedSymbol { id: 358, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetInstance"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 358, ty: Type { path: Path { segments: ["staging_xcm", "v4", "asset", "AssetInstance"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Undefined", fields: [], index: 0, docs: [] }, Variant { name: "Index", fields: [Field { name: None, ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }], index: 1, docs: [] }, Variant { name: "Array4", fields: [Field { name: None, ty: UntrackedSymbol { id: 18, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 4]"), docs: [] }], index: 2, docs: [] }, Variant { name: "Array8", fields: [Field { name: None, ty: UntrackedSymbol { id: 190, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 8]"), docs: [] }], index: 3, docs: [] }, Variant { name: "Array16", fields: [Field { name: None, ty: UntrackedSymbol { id: 50, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 16]"), docs: [] }], index: 4, docs: [] }, Variant { name: "Array32", fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 5, docs: [] }] }), docs: [] } }, PortableType { id: 359, ty: Type { path: Path { segments: ["staging_xcm", "v4", "Response"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Null", fields: [], index: 0, docs: [] }, Variant { name: "Assets", fields: [Field { name: None, ty: UntrackedSymbol { id: 354, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }], index: 1, docs: [] }, Variant { name: "ExecutionResult", fields: [Field { name: None, ty: UntrackedSymbol { id: 334, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<(u32, Error)>"), docs: [] }], index: 2, docs: [] }, Variant { name: "Version", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("super::Version"), docs: [] }], index: 3, docs: [] }, Variant { name: "PalletsInfo", fields: [Field { name: None, ty: UntrackedSymbol { id: 360, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<PalletInfo, MaxPalletsInfo>"), docs: [] }], index: 4, docs: [] }, Variant { name: "DispatchResult", fields: [Field { name: None, ty: UntrackedSymbol { id: 341, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MaybeErrorCode"), docs: [] }], index: 5, docs: [] }] }), docs: [] } }, PortableType { id: 360, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 361, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 363, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 361, ty: Type { path: Path { segments: ["staging_xcm", "v4", "PalletInfo"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("name"), ty: UntrackedSymbol { id: 362, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<u8, MaxPalletNameLen>"), docs: [] }, Field { name: Some("module_name"), ty: UntrackedSymbol { id: 362, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<u8, MaxPalletNameLen>"), docs: [] }, Field { name: Some("major"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("minor"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("patch"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 362, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 363, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 361, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 364, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 365, ty: Type { path: Path { segments: ["staging_xcm", "v4", "QueryResponseInfo"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("destination"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("query_id"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }, Field { name: Some("max_weight"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }] }), docs: [] } }, PortableType { id: 366, ty: Type { path: Path { segments: ["staging_xcm", "v4", "asset", "AssetFilter"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Definite", fields: [Field { name: None, ty: UntrackedSymbol { id: 354, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }], index: 0, docs: [] }, Variant { name: "Wild", fields: [Field { name: None, ty: UntrackedSymbol { id: 367, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WildAsset"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 367, ty: Type { path: Path { segments: ["staging_xcm", "v4", "asset", "WildAsset"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "All", fields: [], index: 0, docs: [] }, Variant { name: "AllOf", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 82, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetId"), docs: [] }, Field { name: Some("fun"), ty: UntrackedSymbol { id: 368, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WildFungibility"), docs: [] }], index: 1, docs: [] }, Variant { name: "AllCounted", fields: [Field { name: None, ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 2, docs: [] }, Variant { name: "AllOfCounted", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 82, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetId"), docs: [] }, Field { name: Some("fun"), ty: UntrackedSymbol { id: 368, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WildFungibility"), docs: [] }, Field { name: Some("count"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 3, docs: [] }] }), docs: [] } }, PortableType { id: 368, ty: Type { path: Path { segments: ["staging_xcm", "v4", "asset", "WildFungibility"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Fungible", fields: [], index: 0, docs: [] }, Variant { name: "NonFungible", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 369, ty: Type { path: Path { segments: ["staging_xcm", "v5", "Xcm"] }, type_params: [TypeParameter { name: "Call", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 370, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Instruction<Call>>"), docs: [] }] }), docs: [] } }, PortableType { id: 370, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 371, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 371, ty: Type { path: Path { segments: ["staging_xcm", "v5", "Instruction"] }, type_params: [TypeParameter { name: "Call", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "WithdrawAsset", fields: [Field { name: None, ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }], index: 0, docs: [] }, Variant { name: "ReserveAssetDeposited", fields: [Field { name: None, ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }], index: 1, docs: [] }, Variant { name: "ReceiveTeleportedAsset", fields: [Field { name: None, ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }], index: 2, docs: [] }, Variant { name: "QueryResponse", fields: [Field { name: Some("query_id"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }, Field { name: Some("response"), ty: UntrackedSymbol { id: 377, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Response"), docs: [] }, Field { name: Some("max_weight"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("querier"), ty: UntrackedSymbol { id: 385, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Location>"), docs: [] }], index: 3, docs: [] }, Variant { name: "TransferAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 4, docs: [] }, Variant { name: "TransferReserveAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 369, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 5, docs: [] }, Variant { name: "Transact", fields: [Field { name: Some("origin_kind"), ty: UntrackedSymbol { id: 344, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OriginKind"), docs: [] }, Field { name: Some("fallback_max_weight"), ty: UntrackedSymbol { id: 386, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Weight>"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 345, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DoubleEncoded<Call>"), docs: [] }], index: 6, docs: [] }, Variant { name: "HrmpNewChannelOpenRequest", fields: [Field { name: Some("sender"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_message_size"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_capacity"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 7, docs: [] }, Variant { name: "HrmpChannelAccepted", fields: [Field { name: Some("recipient"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 8, docs: [] }, Variant { name: "HrmpChannelClosing", fields: [Field { name: Some("initiator"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("sender"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("recipient"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 9, docs: [] }, Variant { name: "ClearOrigin", fields: [], index: 10, docs: [] }, Variant { name: "DescendOrigin", fields: [Field { name: None, ty: UntrackedSymbol { id: 84, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("InteriorLocation"), docs: [] }], index: 11, docs: [] }, Variant { name: "ReportError", fields: [Field { name: None, ty: UntrackedSymbol { id: 387, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryResponseInfo"), docs: [] }], index: 12, docs: [] }, Variant { name: "DepositAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 388, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 13, docs: [] }, Variant { name: "DepositReserveAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 388, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 369, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 14, docs: [] }, Variant { name: "ExchangeAsset", fields: [Field { name: Some("give"), ty: UntrackedSymbol { id: 388, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }, Field { name: Some("want"), ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }, Field { name: Some("maximal"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 15, docs: [] }, Variant { name: "InitiateReserveWithdraw", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 388, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }, Field { name: Some("reserve"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 369, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 16, docs: [] }, Variant { name: "InitiateTeleport", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 388, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 369, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 17, docs: [] }, Variant { name: "ReportHolding", fields: [Field { name: Some("response_info"), ty: UntrackedSymbol { id: 387, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryResponseInfo"), docs: [] }, Field { name: Some("assets"), ty: UntrackedSymbol { id: 388, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }], index: 18, docs: [] }, Variant { name: "BuyExecution", fields: [Field { name: Some("fees"), ty: UntrackedSymbol { id: 374, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Asset"), docs: [] }, Field { name: Some("weight_limit"), ty: UntrackedSymbol { id: 350, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WeightLimit"), docs: [] }], index: 19, docs: [] }, Variant { name: "RefundSurplus", fields: [], index: 20, docs: [] }, Variant { name: "SetErrorHandler", fields: [Field { name: None, ty: UntrackedSymbol { id: 369, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<Call>"), docs: [] }], index: 21, docs: [] }, Variant { name: "SetAppendix", fields: [Field { name: None, ty: UntrackedSymbol { id: 369, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<Call>"), docs: [] }], index: 22, docs: [] }, Variant { name: "ClearError", fields: [], index: 23, docs: [] }, Variant { name: "ClaimAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }, Field { name: Some("ticket"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 24, docs: [] }, Variant { name: "Trap", fields: [Field { name: None, ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }], index: 25, docs: [] }, Variant { name: "SubscribeVersion", fields: [Field { name: Some("query_id"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }, Field { name: Some("max_response_weight"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }], index: 26, docs: [] }, Variant { name: "UnsubscribeVersion", fields: [], index: 27, docs: [] }, Variant { name: "BurnAsset", fields: [Field { name: None, ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }], index: 28, docs: [] }, Variant { name: "ExpectAsset", fields: [Field { name: None, ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }], index: 29, docs: [] }, Variant { name: "ExpectOrigin", fields: [Field { name: None, ty: UntrackedSymbol { id: 385, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Location>"), docs: [] }], index: 30, docs: [] }, Variant { name: "ExpectError", fields: [Field { name: None, ty: UntrackedSymbol { id: 378, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<(u32, Error)>"), docs: [] }], index: 31, docs: [] }, Variant { name: "ExpectTransactStatus", fields: [Field { name: None, ty: UntrackedSymbol { id: 341, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MaybeErrorCode"), docs: [] }], index: 32, docs: [] }, Variant { name: "QueryPallet", fields: [Field { name: Some("module_name"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("response_info"), ty: UntrackedSymbol { id: 387, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryResponseInfo"), docs: [] }], index: 33, docs: [] }, Variant { name: "ExpectPallet", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("name"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("module_name"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("crate_major"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("min_crate_minor"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 34, docs: [] }, Variant { name: "ReportTransactStatus", fields: [Field { name: None, ty: UntrackedSymbol { id: 387, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryResponseInfo"), docs: [] }], index: 35, docs: [] }, Variant { name: "ClearTransactStatus", fields: [], index: 36, docs: [] }, Variant { name: "UniversalOrigin", fields: [Field { name: None, ty: UntrackedSymbol { id: 86, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }], index: 37, docs: [] }, Variant { name: "ExportMessage", fields: [Field { name: Some("network"), ty: UntrackedSymbol { id: 88, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("NetworkId"), docs: [] }, Field { name: Some("destination"), ty: UntrackedSymbol { id: 84, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("InteriorLocation"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 369, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 38, docs: [] }, Variant { name: "LockAsset", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 374, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Asset"), docs: [] }, Field { name: Some("unlocker"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 39, docs: [] }, Variant { name: "UnlockAsset", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 374, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Asset"), docs: [] }, Field { name: Some("target"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 40, docs: [] }, Variant { name: "NoteUnlockable", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 374, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Asset"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 41, docs: [] }, Variant { name: "RequestUnlock", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 374, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Asset"), docs: [] }, Field { name: Some("locker"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 42, docs: [] }, Variant { name: "SetFeesMode", fields: [Field { name: Some("jit_withdraw"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 43, docs: [] }, Variant { name: "SetTopic", fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 44, docs: [] }, Variant { name: "ClearTopic", fields: [], index: 45, docs: [] }, Variant { name: "AliasOrigin", fields: [Field { name: None, ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 46, docs: [] }, Variant { name: "UnpaidExecution", fields: [Field { name: Some("weight_limit"), ty: UntrackedSymbol { id: 350, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WeightLimit"), docs: [] }, Field { name: Some("check_origin"), ty: UntrackedSymbol { id: 385, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Location>"), docs: [] }], index: 47, docs: [] }, Variant { name: "PayFees", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 374, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Asset"), docs: [] }], index: 48, docs: [] }, Variant { name: "InitiateTransfer", fields: [Field { name: Some("destination"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("remote_fees"), ty: UntrackedSymbol { id: 391, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<AssetTransferFilter>"), docs: [] }, Field { name: Some("preserve_origin"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("assets"), ty: UntrackedSymbol { id: 393, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<AssetTransferFilter>"), docs: [] }, Field { name: Some("remote_xcm"), ty: UntrackedSymbol { id: 369, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 49, docs: [] }, Variant { name: "ExecuteWithOrigin", fields: [Field { name: Some("descendant_origin"), ty: UntrackedSymbol { id: 394, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<InteriorLocation>"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 369, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<Call>"), docs: [] }], index: 50, docs: [] }, Variant { name: "SetHints", fields: [Field { name: Some("hints"), ty: UntrackedSymbol { id: 395, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<Hint, HintNumVariants>"), docs: [] }], index: 51, docs: [] }] }), docs: [] } }, PortableType { id: 372, ty: Type { path: Path { segments: ["staging_xcm", "v5", "asset", "Assets"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 373, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Asset>"), docs: [] }] }), docs: [] } }, PortableType { id: 373, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 374, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 374, ty: Type { path: Path { segments: ["staging_xcm", "v5", "asset", "Asset"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetId"), docs: [] }, Field { name: Some("fun"), ty: UntrackedSymbol { id: 375, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Fungibility"), docs: [] }] }), docs: [] } }, PortableType { id: 375, ty: Type { path: Path { segments: ["staging_xcm", "v5", "asset", "Fungibility"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Fungible", fields: [Field { name: None, ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }], index: 0, docs: [] }, Variant { name: "NonFungible", fields: [Field { name: None, ty: UntrackedSymbol { id: 376, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetInstance"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 376, ty: Type { path: Path { segments: ["staging_xcm", "v5", "asset", "AssetInstance"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Undefined", fields: [], index: 0, docs: [] }, Variant { name: "Index", fields: [Field { name: None, ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }], index: 1, docs: [] }, Variant { name: "Array4", fields: [Field { name: None, ty: UntrackedSymbol { id: 18, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 4]"), docs: [] }], index: 2, docs: [] }, Variant { name: "Array8", fields: [Field { name: None, ty: UntrackedSymbol { id: 190, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 8]"), docs: [] }], index: 3, docs: [] }, Variant { name: "Array16", fields: [Field { name: None, ty: UntrackedSymbol { id: 50, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 16]"), docs: [] }], index: 4, docs: [] }, Variant { name: "Array32", fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 5, docs: [] }] }), docs: [] } }, PortableType { id: 377, ty: Type { path: Path { segments: ["staging_xcm", "v5", "Response"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Null", fields: [], index: 0, docs: [] }, Variant { name: "Assets", fields: [Field { name: None, ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }], index: 1, docs: [] }, Variant { name: "ExecutionResult", fields: [Field { name: None, ty: UntrackedSymbol { id: 378, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<(u32, Error)>"), docs: [] }], index: 2, docs: [] }, Variant { name: "Version", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("super::Version"), docs: [] }], index: 3, docs: [] }, Variant { name: "PalletsInfo", fields: [Field { name: None, ty: UntrackedSymbol { id: 381, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<PalletInfo, MaxPalletsInfo>"), docs: [] }], index: 4, docs: [] }, Variant { name: "DispatchResult", fields: [Field { name: None, ty: UntrackedSymbol { id: 341, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MaybeErrorCode"), docs: [] }], index: 5, docs: [] }] }), docs: [] } }, PortableType { id: 378, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 379, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 379, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 379, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 380, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 380, ty: Type { path: Path { segments: ["xcm", "v5", "traits", "Error"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Overflow", fields: [], index: 0, docs: [] }, Variant { name: "Unimplemented", fields: [], index: 1, docs: [] }, Variant { name: "UntrustedReserveLocation", fields: [], index: 2, docs: [] }, Variant { name: "UntrustedTeleportLocation", fields: [], index: 3, docs: [] }, Variant { name: "LocationFull", fields: [], index: 4, docs: [] }, Variant { name: "LocationNotInvertible", fields: [], index: 5, docs: [] }, Variant { name: "BadOrigin", fields: [], index: 6, docs: [] }, Variant { name: "InvalidLocation", fields: [], index: 7, docs: [] }, Variant { name: "AssetNotFound", fields: [], index: 8, docs: [] }, Variant { name: "FailedToTransactAsset", fields: [], index: 9, docs: [] }, Variant { name: "NotWithdrawable", fields: [], index: 10, docs: [] }, Variant { name: "LocationCannotHold", fields: [], index: 11, docs: [] }, Variant { name: "ExceedsMaxMessageSize", fields: [], index: 12, docs: [] }, Variant { name: "DestinationUnsupported", fields: [], index: 13, docs: [] }, Variant { name: "Transport", fields: [], index: 14, docs: [] }, Variant { name: "Unroutable", fields: [], index: 15, docs: [] }, Variant { name: "UnknownClaim", fields: [], index: 16, docs: [] }, Variant { name: "FailedToDecode", fields: [], index: 17, docs: [] }, Variant { name: "MaxWeightInvalid", fields: [], index: 18, docs: [] }, Variant { name: "NotHoldingFees", fields: [], index: 19, docs: [] }, Variant { name: "TooExpensive", fields: [], index: 20, docs: [] }, Variant { name: "Trap", fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }], index: 21, docs: [] }, Variant { name: "ExpectationFalse", fields: [], index: 22, docs: [] }, Variant { name: "PalletNotFound", fields: [], index: 23, docs: [] }, Variant { name: "NameMismatch", fields: [], index: 24, docs: [] }, Variant { name: "VersionIncompatible", fields: [], index: 25, docs: [] }, Variant { name: "HoldingWouldOverflow", fields: [], index: 26, docs: [] }, Variant { name: "ExportError", fields: [], index: 27, docs: [] }, Variant { name: "ReanchorFailed", fields: [], index: 28, docs: [] }, Variant { name: "NoDeal", fields: [], index: 29, docs: [] }, Variant { name: "FeesNotMet", fields: [], index: 30, docs: [] }, Variant { name: "LockError", fields: [], index: 31, docs: [] }, Variant { name: "NoPermission", fields: [], index: 32, docs: [] }, Variant { name: "Unanchored", fields: [], index: 33, docs: [] }, Variant { name: "NotDepositable", fields: [], index: 34, docs: [] }, Variant { name: "TooManyAssets", fields: [], index: 35, docs: [] }, Variant { name: "UnhandledXcmVersion", fields: [], index: 36, docs: [] }, Variant { name: "WeightLimitReached", fields: [Field { name: None, ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }], index: 37, docs: [] }, Variant { name: "Barrier", fields: [], index: 38, docs: [] }, Variant { name: "WeightNotComputable", fields: [], index: 39, docs: [] }, Variant { name: "ExceedsStackLimit", fields: [], index: 40, docs: [] }] }), docs: [] } }, PortableType { id: 381, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 382, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 384, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 382, ty: Type { path: Path { segments: ["staging_xcm", "v5", "PalletInfo"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("name"), ty: UntrackedSymbol { id: 383, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<u8, MaxPalletNameLen>"), docs: [] }, Field { name: Some("module_name"), ty: UntrackedSymbol { id: 383, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<u8, MaxPalletNameLen>"), docs: [] }, Field { name: Some("major"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("minor"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("patch"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 383, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 384, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 382, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 385, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 386, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 387, ty: Type { path: Path { segments: ["staging_xcm", "v5", "QueryResponseInfo"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("destination"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("query_id"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }, Field { name: Some("max_weight"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }] }), docs: [] } }, PortableType { id: 388, ty: Type { path: Path { segments: ["staging_xcm", "v5", "asset", "AssetFilter"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Definite", fields: [Field { name: None, ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }], index: 0, docs: [] }, Variant { name: "Wild", fields: [Field { name: None, ty: UntrackedSymbol { id: 389, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WildAsset"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 389, ty: Type { path: Path { segments: ["staging_xcm", "v5", "asset", "WildAsset"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "All", fields: [], index: 0, docs: [] }, Variant { name: "AllOf", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetId"), docs: [] }, Field { name: Some("fun"), ty: UntrackedSymbol { id: 390, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WildFungibility"), docs: [] }], index: 1, docs: [] }, Variant { name: "AllCounted", fields: [Field { name: None, ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 2, docs: [] }, Variant { name: "AllOfCounted", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetId"), docs: [] }, Field { name: Some("fun"), ty: UntrackedSymbol { id: 390, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WildFungibility"), docs: [] }, Field { name: Some("count"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 3, docs: [] }] }), docs: [] } }, PortableType { id: 390, ty: Type { path: Path { segments: ["staging_xcm", "v5", "asset", "WildFungibility"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Fungible", fields: [], index: 0, docs: [] }, Variant { name: "NonFungible", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 391, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 392, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 392, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 392, ty: Type { path: Path { segments: ["staging_xcm", "v5", "asset", "AssetTransferFilter"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Teleport", fields: [Field { name: None, ty: UntrackedSymbol { id: 388, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }], index: 0, docs: [] }, Variant { name: "ReserveDeposit", fields: [Field { name: None, ty: UntrackedSymbol { id: 388, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }], index: 1, docs: [] }, Variant { name: "ReserveWithdraw", fields: [Field { name: None, ty: UntrackedSymbol { id: 388, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 393, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 392, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 394, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 84, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 84, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 395, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 396, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 397, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 396, ty: Type { path: Path { segments: ["staging_xcm", "v5", "Hint"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "AssetClaimer", fields: [Field { name: Some("location"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 0, docs: [] }] }), docs: [] } }, PortableType { id: 397, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 396, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 398, ty: Type { path: Path { segments: ["xcm", "VersionedAssets"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "V3", fields: [Field { name: None, ty: UntrackedSymbol { id: 328, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("v3::MultiAssets"), docs: [] }], index: 3, docs: [] }, Variant { name: "V4", fields: [Field { name: None, ty: UntrackedSymbol { id: 354, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("v4::Assets"), docs: [] }], index: 4, docs: [] }, Variant { name: "V5", fields: [Field { name: None, ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("v5::Assets"), docs: [] }], index: 5, docs: [] }] }), docs: [] } }, PortableType { id: 399, ty: Type { path: Path { segments: ["xcm", "VersionedXcm"] }, type_params: [TypeParameter { name: "RuntimeCall", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "V3", fields: [Field { name: None, ty: UntrackedSymbol { id: 400, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("v3::Xcm<RuntimeCall>"), docs: [] }], index: 3, docs: [] }, Variant { name: "V4", fields: [Field { name: None, ty: UntrackedSymbol { id: 404, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("v4::Xcm<RuntimeCall>"), docs: [] }], index: 4, docs: [] }, Variant { name: "V5", fields: [Field { name: None, ty: UntrackedSymbol { id: 407, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("v5::Xcm<RuntimeCall>"), docs: [] }], index: 5, docs: [] }] }), docs: [] } }, PortableType { id: 400, ty: Type { path: Path { segments: ["xcm", "v3", "Xcm"] }, type_params: [TypeParameter { name: "Call", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 401, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Instruction<Call>>"), docs: [] }] }), docs: [] } }, PortableType { id: 401, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 402, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 402, ty: Type { path: Path { segments: ["xcm", "v3", "Instruction"] }, type_params: [TypeParameter { name: "Call", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "WithdrawAsset", fields: [Field { name: None, ty: UntrackedSymbol { id: 328, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssets"), docs: [] }], index: 0, docs: [] }, Variant { name: "ReserveAssetDeposited", fields: [Field { name: None, ty: UntrackedSymbol { id: 328, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssets"), docs: [] }], index: 1, docs: [] }, Variant { name: "ReceiveTeleportedAsset", fields: [Field { name: None, ty: UntrackedSymbol { id: 328, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssets"), docs: [] }], index: 2, docs: [] }, Variant { name: "QueryResponse", fields: [Field { name: Some("query_id"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }, Field { name: Some("response"), ty: UntrackedSymbol { id: 333, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Response"), docs: [] }, Field { name: Some("max_weight"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("querier"), ty: UntrackedSymbol { id: 343, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<MultiLocation>"), docs: [] }], index: 3, docs: [] }, Variant { name: "TransferAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 328, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssets"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }], index: 4, docs: [] }, Variant { name: "TransferReserveAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 328, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssets"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 325, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 5, docs: [] }, Variant { name: "Transact", fields: [Field { name: Some("origin_kind"), ty: UntrackedSymbol { id: 344, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OriginKind"), docs: [] }, Field { name: Some("require_weight_at_most"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 403, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DoubleEncoded<Call>"), docs: [] }], index: 6, docs: [] }, Variant { name: "HrmpNewChannelOpenRequest", fields: [Field { name: Some("sender"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_message_size"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_capacity"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 7, docs: [] }, Variant { name: "HrmpChannelAccepted", fields: [Field { name: Some("recipient"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 8, docs: [] }, Variant { name: "HrmpChannelClosing", fields: [Field { name: Some("initiator"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("sender"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("recipient"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 9, docs: [] }, Variant { name: "ClearOrigin", fields: [], index: 10, docs: [] }, Variant { name: "DescendOrigin", fields: [Field { name: None, ty: UntrackedSymbol { id: 59, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("InteriorMultiLocation"), docs: [] }], index: 11, docs: [] }, Variant { name: "ReportError", fields: [Field { name: None, ty: UntrackedSymbol { id: 346, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryResponseInfo"), docs: [] }], index: 12, docs: [] }, Variant { name: "DepositAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 347, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssetFilter"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }], index: 13, docs: [] }, Variant { name: "DepositReserveAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 347, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssetFilter"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 325, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 14, docs: [] }, Variant { name: "ExchangeAsset", fields: [Field { name: Some("give"), ty: UntrackedSymbol { id: 347, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssetFilter"), docs: [] }, Field { name: Some("want"), ty: UntrackedSymbol { id: 328, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssets"), docs: [] }, Field { name: Some("maximal"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 15, docs: [] }, Variant { name: "InitiateReserveWithdraw", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 347, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssetFilter"), docs: [] }, Field { name: Some("reserve"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 325, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 16, docs: [] }, Variant { name: "InitiateTeleport", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 347, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssetFilter"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 325, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 17, docs: [] }, Variant { name: "ReportHolding", fields: [Field { name: Some("response_info"), ty: UntrackedSymbol { id: 346, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryResponseInfo"), docs: [] }, Field { name: Some("assets"), ty: UntrackedSymbol { id: 347, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssetFilter"), docs: [] }], index: 18, docs: [] }, Variant { name: "BuyExecution", fields: [Field { name: Some("fees"), ty: UntrackedSymbol { id: 330, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAsset"), docs: [] }, Field { name: Some("weight_limit"), ty: UntrackedSymbol { id: 350, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WeightLimit"), docs: [] }], index: 19, docs: [] }, Variant { name: "RefundSurplus", fields: [], index: 20, docs: [] }, Variant { name: "SetErrorHandler", fields: [Field { name: None, ty: UntrackedSymbol { id: 400, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<Call>"), docs: [] }], index: 21, docs: [] }, Variant { name: "SetAppendix", fields: [Field { name: None, ty: UntrackedSymbol { id: 400, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<Call>"), docs: [] }], index: 22, docs: [] }, Variant { name: "ClearError", fields: [], index: 23, docs: [] }, Variant { name: "ClaimAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 328, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssets"), docs: [] }, Field { name: Some("ticket"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }], index: 24, docs: [] }, Variant { name: "Trap", fields: [Field { name: None, ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }], index: 25, docs: [] }, Variant { name: "SubscribeVersion", fields: [Field { name: Some("query_id"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }, Field { name: Some("max_response_weight"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }], index: 26, docs: [] }, Variant { name: "UnsubscribeVersion", fields: [], index: 27, docs: [] }, Variant { name: "BurnAsset", fields: [Field { name: None, ty: UntrackedSymbol { id: 328, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssets"), docs: [] }], index: 28, docs: [] }, Variant { name: "ExpectAsset", fields: [Field { name: None, ty: UntrackedSymbol { id: 328, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAssets"), docs: [] }], index: 29, docs: [] }, Variant { name: "ExpectOrigin", fields: [Field { name: None, ty: UntrackedSymbol { id: 343, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<MultiLocation>"), docs: [] }], index: 30, docs: [] }, Variant { name: "ExpectError", fields: [Field { name: None, ty: UntrackedSymbol { id: 334, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<(u32, Error)>"), docs: [] }], index: 31, docs: [] }, Variant { name: "ExpectTransactStatus", fields: [Field { name: None, ty: UntrackedSymbol { id: 341, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MaybeErrorCode"), docs: [] }], index: 32, docs: [] }, Variant { name: "QueryPallet", fields: [Field { name: Some("module_name"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("response_info"), ty: UntrackedSymbol { id: 346, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryResponseInfo"), docs: [] }], index: 33, docs: [] }, Variant { name: "ExpectPallet", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("name"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("module_name"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("crate_major"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("min_crate_minor"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 34, docs: [] }, Variant { name: "ReportTransactStatus", fields: [Field { name: None, ty: UntrackedSymbol { id: 346, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryResponseInfo"), docs: [] }], index: 35, docs: [] }, Variant { name: "ClearTransactStatus", fields: [], index: 36, docs: [] }, Variant { name: "UniversalOrigin", fields: [Field { name: None, ty: UntrackedSymbol { id: 60, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }], index: 37, docs: [] }, Variant { name: "ExportMessage", fields: [Field { name: Some("network"), ty: UntrackedSymbol { id: 63, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("NetworkId"), docs: [] }, Field { name: Some("destination"), ty: UntrackedSymbol { id: 59, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("InteriorMultiLocation"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 325, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 38, docs: [] }, Variant { name: "LockAsset", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 330, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAsset"), docs: [] }, Field { name: Some("unlocker"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }], index: 39, docs: [] }, Variant { name: "UnlockAsset", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 330, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAsset"), docs: [] }, Field { name: Some("target"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }], index: 40, docs: [] }, Variant { name: "NoteUnlockable", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 330, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAsset"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }], index: 41, docs: [] }, Variant { name: "RequestUnlock", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 330, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiAsset"), docs: [] }, Field { name: Some("locker"), ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }], index: 42, docs: [] }, Variant { name: "SetFeesMode", fields: [Field { name: Some("jit_withdraw"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 43, docs: [] }, Variant { name: "SetTopic", fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 44, docs: [] }, Variant { name: "ClearTopic", fields: [], index: 45, docs: [] }, Variant { name: "AliasOrigin", fields: [Field { name: None, ty: UntrackedSymbol { id: 58, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiLocation"), docs: [] }], index: 46, docs: [] }, Variant { name: "UnpaidExecution", fields: [Field { name: Some("weight_limit"), ty: UntrackedSymbol { id: 350, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WeightLimit"), docs: [] }, Field { name: Some("check_origin"), ty: UntrackedSymbol { id: 343, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<MultiLocation>"), docs: [] }], index: 47, docs: [] }] }), docs: [] } }, PortableType { id: 403, ty: Type { path: Path { segments: ["xcm", "double_encoded", "DoubleEncoded"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("encoded"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }), docs: [] } }, PortableType { id: 404, ty: Type { path: Path { segments: ["staging_xcm", "v4", "Xcm"] }, type_params: [TypeParameter { name: "Call", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 405, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Instruction<Call>>"), docs: [] }] }), docs: [] } }, PortableType { id: 405, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 406, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 406, ty: Type { path: Path { segments: ["staging_xcm", "v4", "Instruction"] }, type_params: [TypeParameter { name: "Call", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "WithdrawAsset", fields: [Field { name: None, ty: UntrackedSymbol { id: 354, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }], index: 0, docs: [] }, Variant { name: "ReserveAssetDeposited", fields: [Field { name: None, ty: UntrackedSymbol { id: 354, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }], index: 1, docs: [] }, Variant { name: "ReceiveTeleportedAsset", fields: [Field { name: None, ty: UntrackedSymbol { id: 354, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }], index: 2, docs: [] }, Variant { name: "QueryResponse", fields: [Field { name: Some("query_id"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }, Field { name: Some("response"), ty: UntrackedSymbol { id: 359, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Response"), docs: [] }, Field { name: Some("max_weight"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("querier"), ty: UntrackedSymbol { id: 364, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Location>"), docs: [] }], index: 3, docs: [] }, Variant { name: "TransferAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 354, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 4, docs: [] }, Variant { name: "TransferReserveAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 354, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 351, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 5, docs: [] }, Variant { name: "Transact", fields: [Field { name: Some("origin_kind"), ty: UntrackedSymbol { id: 344, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OriginKind"), docs: [] }, Field { name: Some("require_weight_at_most"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 403, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DoubleEncoded<Call>"), docs: [] }], index: 6, docs: [] }, Variant { name: "HrmpNewChannelOpenRequest", fields: [Field { name: Some("sender"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_message_size"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_capacity"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 7, docs: [] }, Variant { name: "HrmpChannelAccepted", fields: [Field { name: Some("recipient"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 8, docs: [] }, Variant { name: "HrmpChannelClosing", fields: [Field { name: Some("initiator"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("sender"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("recipient"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 9, docs: [] }, Variant { name: "ClearOrigin", fields: [], index: 10, docs: [] }, Variant { name: "DescendOrigin", fields: [Field { name: None, ty: UntrackedSymbol { id: 70, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("InteriorLocation"), docs: [] }], index: 11, docs: [] }, Variant { name: "ReportError", fields: [Field { name: None, ty: UntrackedSymbol { id: 365, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryResponseInfo"), docs: [] }], index: 12, docs: [] }, Variant { name: "DepositAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 366, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 13, docs: [] }, Variant { name: "DepositReserveAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 366, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 351, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 14, docs: [] }, Variant { name: "ExchangeAsset", fields: [Field { name: Some("give"), ty: UntrackedSymbol { id: 366, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }, Field { name: Some("want"), ty: UntrackedSymbol { id: 354, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }, Field { name: Some("maximal"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 15, docs: [] }, Variant { name: "InitiateReserveWithdraw", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 366, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }, Field { name: Some("reserve"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 351, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 16, docs: [] }, Variant { name: "InitiateTeleport", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 366, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 351, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 17, docs: [] }, Variant { name: "ReportHolding", fields: [Field { name: Some("response_info"), ty: UntrackedSymbol { id: 365, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryResponseInfo"), docs: [] }, Field { name: Some("assets"), ty: UntrackedSymbol { id: 366, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }], index: 18, docs: [] }, Variant { name: "BuyExecution", fields: [Field { name: Some("fees"), ty: UntrackedSymbol { id: 356, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Asset"), docs: [] }, Field { name: Some("weight_limit"), ty: UntrackedSymbol { id: 350, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WeightLimit"), docs: [] }], index: 19, docs: [] }, Variant { name: "RefundSurplus", fields: [], index: 20, docs: [] }, Variant { name: "SetErrorHandler", fields: [Field { name: None, ty: UntrackedSymbol { id: 404, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<Call>"), docs: [] }], index: 21, docs: [] }, Variant { name: "SetAppendix", fields: [Field { name: None, ty: UntrackedSymbol { id: 404, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<Call>"), docs: [] }], index: 22, docs: [] }, Variant { name: "ClearError", fields: [], index: 23, docs: [] }, Variant { name: "ClaimAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 354, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }, Field { name: Some("ticket"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 24, docs: [] }, Variant { name: "Trap", fields: [Field { name: None, ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }], index: 25, docs: [] }, Variant { name: "SubscribeVersion", fields: [Field { name: Some("query_id"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }, Field { name: Some("max_response_weight"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }], index: 26, docs: [] }, Variant { name: "UnsubscribeVersion", fields: [], index: 27, docs: [] }, Variant { name: "BurnAsset", fields: [Field { name: None, ty: UntrackedSymbol { id: 354, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }], index: 28, docs: [] }, Variant { name: "ExpectAsset", fields: [Field { name: None, ty: UntrackedSymbol { id: 354, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }], index: 29, docs: [] }, Variant { name: "ExpectOrigin", fields: [Field { name: None, ty: UntrackedSymbol { id: 364, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Location>"), docs: [] }], index: 30, docs: [] }, Variant { name: "ExpectError", fields: [Field { name: None, ty: UntrackedSymbol { id: 334, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<(u32, Error)>"), docs: [] }], index: 31, docs: [] }, Variant { name: "ExpectTransactStatus", fields: [Field { name: None, ty: UntrackedSymbol { id: 341, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MaybeErrorCode"), docs: [] }], index: 32, docs: [] }, Variant { name: "QueryPallet", fields: [Field { name: Some("module_name"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("response_info"), ty: UntrackedSymbol { id: 365, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryResponseInfo"), docs: [] }], index: 33, docs: [] }, Variant { name: "ExpectPallet", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("name"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("module_name"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("crate_major"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("min_crate_minor"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 34, docs: [] }, Variant { name: "ReportTransactStatus", fields: [Field { name: None, ty: UntrackedSymbol { id: 365, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryResponseInfo"), docs: [] }], index: 35, docs: [] }, Variant { name: "ClearTransactStatus", fields: [], index: 36, docs: [] }, Variant { name: "UniversalOrigin", fields: [Field { name: None, ty: UntrackedSymbol { id: 72, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }], index: 37, docs: [] }, Variant { name: "ExportMessage", fields: [Field { name: Some("network"), ty: UntrackedSymbol { id: 74, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("NetworkId"), docs: [] }, Field { name: Some("destination"), ty: UntrackedSymbol { id: 70, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("InteriorLocation"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 351, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 38, docs: [] }, Variant { name: "LockAsset", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 356, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Asset"), docs: [] }, Field { name: Some("unlocker"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 39, docs: [] }, Variant { name: "UnlockAsset", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 356, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Asset"), docs: [] }, Field { name: Some("target"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 40, docs: [] }, Variant { name: "NoteUnlockable", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 356, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Asset"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 41, docs: [] }, Variant { name: "RequestUnlock", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 356, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Asset"), docs: [] }, Field { name: Some("locker"), ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 42, docs: [] }, Variant { name: "SetFeesMode", fields: [Field { name: Some("jit_withdraw"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 43, docs: [] }, Variant { name: "SetTopic", fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 44, docs: [] }, Variant { name: "ClearTopic", fields: [], index: 45, docs: [] }, Variant { name: "AliasOrigin", fields: [Field { name: None, ty: UntrackedSymbol { id: 69, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 46, docs: [] }, Variant { name: "UnpaidExecution", fields: [Field { name: Some("weight_limit"), ty: UntrackedSymbol { id: 350, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WeightLimit"), docs: [] }, Field { name: Some("check_origin"), ty: UntrackedSymbol { id: 364, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Location>"), docs: [] }], index: 47, docs: [] }] }), docs: [] } }, PortableType { id: 407, ty: Type { path: Path { segments: ["staging_xcm", "v5", "Xcm"] }, type_params: [TypeParameter { name: "Call", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 408, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Instruction<Call>>"), docs: [] }] }), docs: [] } }, PortableType { id: 408, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 409, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 409, ty: Type { path: Path { segments: ["staging_xcm", "v5", "Instruction"] }, type_params: [TypeParameter { name: "Call", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "WithdrawAsset", fields: [Field { name: None, ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }], index: 0, docs: [] }, Variant { name: "ReserveAssetDeposited", fields: [Field { name: None, ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }], index: 1, docs: [] }, Variant { name: "ReceiveTeleportedAsset", fields: [Field { name: None, ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }], index: 2, docs: [] }, Variant { name: "QueryResponse", fields: [Field { name: Some("query_id"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }, Field { name: Some("response"), ty: UntrackedSymbol { id: 377, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Response"), docs: [] }, Field { name: Some("max_weight"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("querier"), ty: UntrackedSymbol { id: 385, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Location>"), docs: [] }], index: 3, docs: [] }, Variant { name: "TransferAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 4, docs: [] }, Variant { name: "TransferReserveAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 369, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 5, docs: [] }, Variant { name: "Transact", fields: [Field { name: Some("origin_kind"), ty: UntrackedSymbol { id: 344, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OriginKind"), docs: [] }, Field { name: Some("fallback_max_weight"), ty: UntrackedSymbol { id: 386, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Weight>"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 403, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DoubleEncoded<Call>"), docs: [] }], index: 6, docs: [] }, Variant { name: "HrmpNewChannelOpenRequest", fields: [Field { name: Some("sender"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_message_size"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_capacity"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 7, docs: [] }, Variant { name: "HrmpChannelAccepted", fields: [Field { name: Some("recipient"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 8, docs: [] }, Variant { name: "HrmpChannelClosing", fields: [Field { name: Some("initiator"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("sender"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("recipient"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 9, docs: [] }, Variant { name: "ClearOrigin", fields: [], index: 10, docs: [] }, Variant { name: "DescendOrigin", fields: [Field { name: None, ty: UntrackedSymbol { id: 84, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("InteriorLocation"), docs: [] }], index: 11, docs: [] }, Variant { name: "ReportError", fields: [Field { name: None, ty: UntrackedSymbol { id: 387, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryResponseInfo"), docs: [] }], index: 12, docs: [] }, Variant { name: "DepositAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 388, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 13, docs: [] }, Variant { name: "DepositReserveAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 388, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 369, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 14, docs: [] }, Variant { name: "ExchangeAsset", fields: [Field { name: Some("give"), ty: UntrackedSymbol { id: 388, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }, Field { name: Some("want"), ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }, Field { name: Some("maximal"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 15, docs: [] }, Variant { name: "InitiateReserveWithdraw", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 388, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }, Field { name: Some("reserve"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 369, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 16, docs: [] }, Variant { name: "InitiateTeleport", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 388, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }, Field { name: Some("dest"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 369, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 17, docs: [] }, Variant { name: "ReportHolding", fields: [Field { name: Some("response_info"), ty: UntrackedSymbol { id: 387, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryResponseInfo"), docs: [] }, Field { name: Some("assets"), ty: UntrackedSymbol { id: 388, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetFilter"), docs: [] }], index: 18, docs: [] }, Variant { name: "BuyExecution", fields: [Field { name: Some("fees"), ty: UntrackedSymbol { id: 374, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Asset"), docs: [] }, Field { name: Some("weight_limit"), ty: UntrackedSymbol { id: 350, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WeightLimit"), docs: [] }], index: 19, docs: [] }, Variant { name: "RefundSurplus", fields: [], index: 20, docs: [] }, Variant { name: "SetErrorHandler", fields: [Field { name: None, ty: UntrackedSymbol { id: 407, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<Call>"), docs: [] }], index: 21, docs: [] }, Variant { name: "SetAppendix", fields: [Field { name: None, ty: UntrackedSymbol { id: 407, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<Call>"), docs: [] }], index: 22, docs: [] }, Variant { name: "ClearError", fields: [], index: 23, docs: [] }, Variant { name: "ClaimAsset", fields: [Field { name: Some("assets"), ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }, Field { name: Some("ticket"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 24, docs: [] }, Variant { name: "Trap", fields: [Field { name: None, ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }], index: 25, docs: [] }, Variant { name: "SubscribeVersion", fields: [Field { name: Some("query_id"), ty: UntrackedSymbol { id: 11, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }, Field { name: Some("max_response_weight"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }], index: 26, docs: [] }, Variant { name: "UnsubscribeVersion", fields: [], index: 27, docs: [] }, Variant { name: "BurnAsset", fields: [Field { name: None, ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }], index: 28, docs: [] }, Variant { name: "ExpectAsset", fields: [Field { name: None, ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }], index: 29, docs: [] }, Variant { name: "ExpectOrigin", fields: [Field { name: None, ty: UntrackedSymbol { id: 385, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Location>"), docs: [] }], index: 30, docs: [] }, Variant { name: "ExpectError", fields: [Field { name: None, ty: UntrackedSymbol { id: 378, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<(u32, Error)>"), docs: [] }], index: 31, docs: [] }, Variant { name: "ExpectTransactStatus", fields: [Field { name: None, ty: UntrackedSymbol { id: 341, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MaybeErrorCode"), docs: [] }], index: 32, docs: [] }, Variant { name: "QueryPallet", fields: [Field { name: Some("module_name"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("response_info"), ty: UntrackedSymbol { id: 387, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryResponseInfo"), docs: [] }], index: 33, docs: [] }, Variant { name: "ExpectPallet", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("name"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("module_name"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("crate_major"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("min_crate_minor"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 34, docs: [] }, Variant { name: "ReportTransactStatus", fields: [Field { name: None, ty: UntrackedSymbol { id: 387, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryResponseInfo"), docs: [] }], index: 35, docs: [] }, Variant { name: "ClearTransactStatus", fields: [], index: 36, docs: [] }, Variant { name: "UniversalOrigin", fields: [Field { name: None, ty: UntrackedSymbol { id: 86, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Junction"), docs: [] }], index: 37, docs: [] }, Variant { name: "ExportMessage", fields: [Field { name: Some("network"), ty: UntrackedSymbol { id: 88, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("NetworkId"), docs: [] }, Field { name: Some("destination"), ty: UntrackedSymbol { id: 84, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("InteriorLocation"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 369, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 38, docs: [] }, Variant { name: "LockAsset", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 374, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Asset"), docs: [] }, Field { name: Some("unlocker"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 39, docs: [] }, Variant { name: "UnlockAsset", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 374, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Asset"), docs: [] }, Field { name: Some("target"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 40, docs: [] }, Variant { name: "NoteUnlockable", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 374, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Asset"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 41, docs: [] }, Variant { name: "RequestUnlock", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 374, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Asset"), docs: [] }, Field { name: Some("locker"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 42, docs: [] }, Variant { name: "SetFeesMode", fields: [Field { name: Some("jit_withdraw"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 43, docs: [] }, Variant { name: "SetTopic", fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }], index: 44, docs: [] }, Variant { name: "ClearTopic", fields: [], index: 45, docs: [] }, Variant { name: "AliasOrigin", fields: [Field { name: None, ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }], index: 46, docs: [] }, Variant { name: "UnpaidExecution", fields: [Field { name: Some("weight_limit"), ty: UntrackedSymbol { id: 350, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("WeightLimit"), docs: [] }, Field { name: Some("check_origin"), ty: UntrackedSymbol { id: 385, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Location>"), docs: [] }], index: 47, docs: [] }, Variant { name: "PayFees", fields: [Field { name: Some("asset"), ty: UntrackedSymbol { id: 374, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Asset"), docs: [] }], index: 48, docs: [] }, Variant { name: "InitiateTransfer", fields: [Field { name: Some("destination"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("remote_fees"), ty: UntrackedSymbol { id: 391, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<AssetTransferFilter>"), docs: [] }, Field { name: Some("preserve_origin"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("assets"), ty: UntrackedSymbol { id: 393, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<AssetTransferFilter>"), docs: [] }, Field { name: Some("remote_xcm"), ty: UntrackedSymbol { id: 369, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }], index: 49, docs: [] }, Variant { name: "ExecuteWithOrigin", fields: [Field { name: Some("descendant_origin"), ty: UntrackedSymbol { id: 394, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<InteriorLocation>"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 407, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<Call>"), docs: [] }], index: 50, docs: [] }, Variant { name: "SetHints", fields: [Field { name: Some("hints"), ty: UntrackedSymbol { id: 395, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<Hint, HintNumVariants>"), docs: [] }], index: 51, docs: [] }] }), docs: [] } }, PortableType { id: 410, ty: Type { path: Path { segments: ["staging_xcm_executor", "traits", "asset_transfer", "TransferType"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Teleport", fields: [], index: 0, docs: [] }, Variant { name: "LocalReserve", fields: [], index: 1, docs: [] }, Variant { name: "DestinationReserve", fields: [], index: 2, docs: [] }, Variant { name: "RemoteReserve", fields: [Field { name: None, ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VersionedLocation"), docs: [] }], index: 3, docs: [] }] }), docs: [] } }, PortableType { id: 411, ty: Type { path: Path { segments: ["xcm", "VersionedAssetId"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "V3", fields: [Field { name: None, ty: UntrackedSymbol { id: 68, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("v3::AssetId"), docs: [] }], index: 3, docs: [] }, Variant { name: "V4", fields: [Field { name: None, ty: UntrackedSymbol { id: 82, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("v4::AssetId"), docs: [] }], index: 4, docs: [] }, Variant { name: "V5", fields: [Field { name: None, ty: UntrackedSymbol { id: 96, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("v5::AssetId"), docs: [] }], index: 5, docs: [] }] }), docs: [] } }, PortableType { id: 412, ty: Type { path: Path { segments: ["pallet_beefy", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "report_double_voting", fields: [Field { name: Some("equivocation_proof"), ty: UntrackedSymbol { id: 413, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<DoubleVotingProof<BlockNumberFor<T>, T::BeefyId,<T::BeefyId\nas RuntimeAppPublic>::Signature,>,>"), docs: [] }, Field { name: Some("key_owner_proof"), ty: UntrackedSymbol { id: 114, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::KeyOwnerProof"), docs: [] }], index: 0, docs: ["Report voter equivocation/misbehavior. This method will verify the", "equivocation proof and validate the given key ownership proof", "against the extracted offender. If both are valid, the offence", "will be reported."] }, Variant { name: "report_double_voting_unsigned", fields: [Field { name: Some("equivocation_proof"), ty: UntrackedSymbol { id: 413, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<DoubleVotingProof<BlockNumberFor<T>, T::BeefyId,<T::BeefyId\nas RuntimeAppPublic>::Signature,>,>"), docs: [] }, Field { name: Some("key_owner_proof"), ty: UntrackedSymbol { id: 114, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::KeyOwnerProof"), docs: [] }], index: 1, docs: ["Report voter equivocation/misbehavior. This method will verify the", "equivocation proof and validate the given key ownership proof", "against the extracted offender. If both are valid, the offence", "will be reported.", "", "This extrinsic must be called unsigned and it is expected that only", "block authors will call it (validated in `ValidateUnsigned`), as such", "if the block author is defined it will be defined as the equivocation", "reporter."] }, Variant { name: "set_new_genesis", fields: [Field { name: Some("delay_in_blocks"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }], index: 2, docs: ["Reset BEEFY consensus by setting a new BEEFY genesis at `delay_in_blocks` blocks in the", "future.", "", "Note: `delay_in_blocks` has to be at least 1."] }, Variant { name: "report_fork_voting", fields: [Field { name: Some("equivocation_proof"), ty: UntrackedSymbol { id: 420, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<ForkVotingProof<HeaderFor<T>, T::BeefyId,<T::AncestryHelper\nas AncestryHelper<HeaderFor<T>>>::Proof,>,>"), docs: [] }, Field { name: Some("key_owner_proof"), ty: UntrackedSymbol { id: 114, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::KeyOwnerProof"), docs: [] }], index: 3, docs: ["Report fork voting equivocation. This method will verify the equivocation proof", "and validate the given key ownership proof against the extracted offender.", "If both are valid, the offence will be reported."] }, Variant { name: "report_fork_voting_unsigned", fields: [Field { name: Some("equivocation_proof"), ty: UntrackedSymbol { id: 420, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<ForkVotingProof<HeaderFor<T>, T::BeefyId,<T::AncestryHelper\nas AncestryHelper<HeaderFor<T>>>::Proof,>,>"), docs: [] }, Field { name: Some("key_owner_proof"), ty: UntrackedSymbol { id: 114, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::KeyOwnerProof"), docs: [] }], index: 4, docs: ["Report fork voting equivocation. This method will verify the equivocation proof", "and validate the given key ownership proof against the extracted offender.", "If both are valid, the offence will be reported.", "", "This extrinsic must be called unsigned and it is expected that only", "block authors will call it (validated in `ValidateUnsigned`), as such", "if the block author is defined it will be defined as the equivocation", "reporter."] }, Variant { name: "report_future_block_voting", fields: [Field { name: Some("equivocation_proof"), ty: UntrackedSymbol { id: 424, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<FutureBlockVotingProof<BlockNumberFor<T>, T::BeefyId>>"), docs: [] }, Field { name: Some("key_owner_proof"), ty: UntrackedSymbol { id: 114, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::KeyOwnerProof"), docs: [] }], index: 5, docs: ["Report future block voting equivocation. This method will verify the equivocation proof", "and validate the given key ownership proof against the extracted offender.", "If both are valid, the offence will be reported."] }, Variant { name: "report_future_block_voting_unsigned", fields: [Field { name: Some("equivocation_proof"), ty: UntrackedSymbol { id: 424, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<FutureBlockVotingProof<BlockNumberFor<T>, T::BeefyId>>"), docs: [] }, Field { name: Some("key_owner_proof"), ty: UntrackedSymbol { id: 114, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::KeyOwnerProof"), docs: [] }], index: 6, docs: ["Report future block voting equivocation. This method will verify the equivocation proof", "and validate the given key ownership proof against the extracted offender.", "If both are valid, the offence will be reported.", "", "This extrinsic must be called unsigned and it is expected that only", "block authors will call it (validated in `ValidateUnsigned`), as such", "if the block author is defined it will be defined as the equivocation", "reporter."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 413, ty: Type { path: Path { segments: ["sp_consensus_beefy", "DoubleVotingProof"] }, type_params: [TypeParameter { name: "Number", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Id", ty: Some(UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Signature", ty: Some(UntrackedSymbol { id: 414, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("first"), ty: UntrackedSymbol { id: 415, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VoteMessage<Number, Id, Signature>"), docs: [] }, Field { name: Some("second"), ty: UntrackedSymbol { id: 415, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VoteMessage<Number, Id, Signature>"), docs: [] }] }), docs: [] } }, PortableType { id: 414, ty: Type { path: Path { segments: ["sp_consensus_beefy", "ecdsa_crypto", "Signature"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 169, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ecdsa::Signature"), docs: [] }] }), docs: [] } }, PortableType { id: 415, ty: Type { path: Path { segments: ["sp_consensus_beefy", "VoteMessage"] }, type_params: [TypeParameter { name: "Number", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Id", ty: Some(UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Signature", ty: Some(UntrackedSymbol { id: 414, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("commitment"), ty: UntrackedSymbol { id: 416, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Commitment<Number>"), docs: [] }, Field { name: Some("id"), ty: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Id"), docs: [] }, Field { name: Some("signature"), ty: UntrackedSymbol { id: 414, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Signature"), docs: [] }] }), docs: [] } }, PortableType { id: 416, ty: Type { path: Path { segments: ["sp_consensus_beefy", "commitment", "Commitment"] }, type_params: [TypeParameter { name: "TBlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("payload"), ty: UntrackedSymbol { id: 417, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Payload"), docs: [] }, Field { name: Some("block_number"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TBlockNumber"), docs: [] }, Field { name: Some("validator_set_id"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidatorSetId"), docs: [] }] }), docs: [] } }, PortableType { id: 417, ty: Type { path: Path { segments: ["sp_consensus_beefy", "payload", "Payload"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 418, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<(BeefyPayloadId, Vec<u8>)>"), docs: [] }] }), docs: [] } }, PortableType { id: 418, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 419, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 419, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 185, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 420, ty: Type { path: Path { segments: ["sp_consensus_beefy", "ForkVotingProof"] }, type_params: [TypeParameter { name: "Header", ty: Some(UntrackedSymbol { id: 111, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Id", ty: Some(UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "AncestryProof", ty: Some(UntrackedSymbol { id: 421, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("vote"), ty: UntrackedSymbol { id: 415, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VoteMessage<Header::Number, Id, Id::Signature>"), docs: [] }, Field { name: Some("ancestry_proof"), ty: UntrackedSymbol { id: 421, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AncestryProof"), docs: [] }, Field { name: Some("header"), ty: UntrackedSymbol { id: 111, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Header"), docs: [] }] }), docs: [] } }, PortableType { id: 421, ty: Type { path: Path { segments: ["sp_mmr_primitives", "AncestryProof"] }, type_params: [TypeParameter { name: "Hash", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("prev_peaks"), ty: UntrackedSymbol { id: 234, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Hash>"), docs: [] }, Field { name: Some("prev_leaf_count"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("leaf_count"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("NodeIndex"), docs: [] }, Field { name: Some("items"), ty: UntrackedSymbol { id: 422, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<(u64, Hash)>"), docs: [] }] }), docs: [] } }, PortableType { id: 422, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 423, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 423, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 424, ty: Type { path: Path { segments: ["sp_consensus_beefy", "FutureBlockVotingProof"] }, type_params: [TypeParameter { name: "Number", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Id", ty: Some(UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("vote"), ty: UntrackedSymbol { id: 415, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VoteMessage<Number, Id, Id::Signature>"), docs: [] }] }), docs: [] } }, PortableType { id: 425, ty: Type { path: Path { segments: ["polkadot_runtime_common", "identity_migrator", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "reap_identity", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 0, docs: ["Reap the `IdentityInfo` of `who` from the Identity pallet of `T`, unreserving any", "deposits held and removing storage items associated with `who`."] }, Variant { name: "poke_deposit", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 1, docs: ["Update the deposit of `who`. Meant to be called by the system with an XCM `Transact`", "Instruction."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 426, ty: Type { path: Path { segments: ["polkadot_runtime_common", "paras_sudo_wrapper", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "sudo_schedule_para_initialize", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("genesis"), ty: UntrackedSymbol { id: 427, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaGenesisArgs"), docs: [] }], index: 0, docs: ["Schedule a para to be initialized at the start of the next session.", "", "This should only be used for TESTING and not on PRODUCTION chains. It automatically", "assigns Coretime to the chain and increases the number of cores. Thus, there is no", "running coretime chain required."] }, Variant { name: "sudo_schedule_para_cleanup", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 1, docs: ["Schedule a para to be cleaned up at the start of the next session."] }, Variant { name: "sudo_schedule_parathread_upgrade", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 2, docs: ["Upgrade a parathread (on-demand parachain) to a lease holding parachain"] }, Variant { name: "sudo_schedule_parachain_downgrade", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 3, docs: ["Downgrade a lease holding parachain to an on-demand parachain"] }, Variant { name: "sudo_queue_downward_xcm", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("xcm"), ty: UntrackedSymbol { id: 324, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<xcm::opaque::VersionedXcm>"), docs: [] }], index: 4, docs: ["Send a downward XCM to the given para.", "", "The given parachain should exist and the payload should not exceed the preconfigured", "size `config.max_downward_message_size`."] }, Variant { name: "sudo_establish_hrmp_channel", fields: [Field { name: Some("sender"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("recipient"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("max_capacity"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_message_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 5, docs: ["Forcefully establish a channel from the sender to the recipient.", "", "This is equivalent to sending an `Hrmp::hrmp_init_open_channel` extrinsic followed by", "`Hrmp::hrmp_accept_open_channel`."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 427, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "paras", "ParaGenesisArgs"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("genesis_head"), ty: UntrackedSymbol { id: 275, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("HeadData"), docs: [] }, Field { name: Some("validation_code"), ty: UntrackedSymbol { id: 274, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidationCode"), docs: [] }, Field { name: Some("para_kind"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaKind"), docs: [] }] }), docs: [] } }, PortableType { id: 428, ty: Type { path: Path { segments: ["polkadot_runtime_common", "assigned_slots", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "assign_perm_parachain_slot", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 0, docs: ["Assign a permanent parachain slot and immediately create a lease for it."] }, Variant { name: "assign_temp_parachain_slot", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("lease_period_start"), ty: UntrackedSymbol { id: 429, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SlotLeasePeriodStart"), docs: [] }], index: 1, docs: ["Assign a temporary parachain slot. The function tries to create a lease for it", "immediately if `SlotLeasePeriodStart::Current` is specified, and if the number", "of currently active temporary slots is below `MaxTemporarySlotPerLeasePeriod`."] }, Variant { name: "unassign_parachain_slot", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 2, docs: ["Unassign a permanent or temporary parachain slot"] }, Variant { name: "set_max_permanent_slots", fields: [Field { name: Some("slots"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 3, docs: ["Sets the storage value [`MaxPermanentSlots`]."] }, Variant { name: "set_max_temporary_slots", fields: [Field { name: Some("slots"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 4, docs: ["Sets the storage value [`MaxTemporarySlots`]."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 429, ty: Type { path: Path { segments: ["polkadot_runtime_common", "assigned_slots", "SlotLeasePeriodStart"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Current", fields: [], index: 0, docs: [] }, Variant { name: "Next", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 430, ty: Type { path: Path { segments: ["rococo_runtime", "validator_manager", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "register_validators", fields: [Field { name: Some("validators"), ty: UntrackedSymbol { id: 124, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T::ValidatorId>"), docs: [] }], index: 0, docs: ["Add new validators to the set.", "", "The new validators will be active from current session + 2."] }, Variant { name: "deregister_validators", fields: [Field { name: Some("validators"), ty: UntrackedSymbol { id: 124, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T::ValidatorId>"), docs: [] }], index: 1, docs: ["Remove validators from the set.", "", "The removed validators will be deactivated from current session + 2."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 431, ty: Type { path: Path { segments: ["pallet_state_trie_migration", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "control_auto_migration", fields: [Field { name: Some("maybe_config"), ty: UntrackedSymbol { id: 432, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<MigrationLimits>"), docs: [] }], index: 0, docs: ["Control the automatic migration.", "", "The dispatch origin of this call must be [`Config::ControlOrigin`]."] }, Variant { name: "continue_migrate", fields: [Field { name: Some("limits"), ty: UntrackedSymbol { id: 433, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MigrationLimits"), docs: [] }, Field { name: Some("real_size_upper"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("witness_task"), ty: UntrackedSymbol { id: 434, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MigrationTask<T>"), docs: [] }], index: 1, docs: ["Continue the migration for the given `limits`.", "", "The dispatch origin of this call can be any signed account.", "", "This transaction has NO MONETARY INCENTIVES. calling it will not reward anyone. Albeit,", "Upon successful execution, the transaction fee is returned.", "", "The (potentially over-estimated) of the byte length of all the data read must be", "provided for up-front fee-payment and weighing. In essence, the caller is guaranteeing", "that executing the current `MigrationTask` with the given `limits` will not exceed", "`real_size_upper` bytes of read data.", "", "The `witness_task` is merely a helper to prevent the caller from being slashed or", "generally trigger a migration that they do not intend. This parameter is just a message", "from caller, saying that they believed `witness_task` was the last state of the", "migration, and they only wish for their transaction to do anything, if this assumption", "holds. In case `witness_task` does not match, the transaction fails.", "", "Based on the documentation of [`MigrationTask::migrate_until_exhaustion`], the", "recommended way of doing this is to pass a `limit` that only bounds `count`, as the", "`size` limit can always be overwritten."] }, Variant { name: "migrate_custom_top", fields: [Field { name: Some("keys"), ty: UntrackedSymbol { id: 108, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Vec<u8>>"), docs: [] }, Field { name: Some("witness_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 2, docs: ["Migrate the list of top keys by iterating each of them one by one.", "", "This does not affect the global migration process tracker ([`MigrationProcess`]), and", "should only be used in case any keys are leftover due to a bug."] }, Variant { name: "migrate_custom_child", fields: [Field { name: Some("root"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }, Field { name: Some("child_keys"), ty: UntrackedSymbol { id: 108, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Vec<u8>>"), docs: [] }, Field { name: Some("total_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 3, docs: ["Migrate the list of child keys by iterating each of them one by one.", "", "All of the given child keys must be present under one `child_root`.", "", "This does not affect the global migration process tracker ([`MigrationProcess`]), and", "should only be used in case any keys are leftover due to a bug."] }, Variant { name: "set_signed_max_limits", fields: [Field { name: Some("limits"), ty: UntrackedSymbol { id: 433, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MigrationLimits"), docs: [] }], index: 4, docs: ["Set the maximum limit of the signed migration."] }, Variant { name: "force_set_progress", fields: [Field { name: Some("progress_top"), ty: UntrackedSymbol { id: 435, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProgressOf<T>"), docs: [] }, Field { name: Some("progress_child"), ty: UntrackedSymbol { id: 435, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProgressOf<T>"), docs: [] }], index: 5, docs: ["Forcefully set the progress the running migration.", "", "This is only useful in one case: the next key to migrate is too big to be migrated with", "a signed account, in a parachain context, and we simply want to skip it. A reasonable", "example of this would be `:code:`, which is both very expensive to migrate, and commonly", "used, so probably it is already migrated.", "", "In case you mess things up, you can also, in principle, use this to reset the migration", "process."] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 432, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 433, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 433, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 433, ty: Type { path: Path { segments: ["pallet_state_trie_migration", "pallet", "MigrationLimits"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("item"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 434, ty: Type { path: Path { segments: ["pallet_state_trie_migration", "pallet", "MigrationTask"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("progress_top"), ty: UntrackedSymbol { id: 435, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProgressOf<T>"), docs: [] }, Field { name: Some("progress_child"), ty: UntrackedSymbol { id: 435, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProgressOf<T>"), docs: [] }, Field { name: Some("size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("top_items"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("child_items"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 435, ty: Type { path: Path { segments: ["pallet_state_trie_migration", "pallet", "Progress"] }, type_params: [TypeParameter { name: "MaxKeyLen", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "ToStart", fields: [], index: 0, docs: [] }, Variant { name: "LastKey", fields: [Field { name: None, ty: UntrackedSymbol { id: 436, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<u8, MaxKeyLen>"), docs: [] }], index: 1, docs: [] }, Variant { name: "Complete", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 436, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 437, ty: Type { path: Path { segments: ["pallet_root_testing", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "fill_block", fields: [Field { name: Some("ratio"), ty: UntrackedSymbol { id: 248, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Perbill"), docs: [] }], index: 0, docs: ["A dispatch that will fill the block weight up to the given ratio."] }, Variant { name: "trigger_defensive", fields: [], index: 1, docs: [] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 438, ty: Type { path: Path { segments: ["pallet_sudo", "pallet", "Call"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "sudo", fields: [Field { name: Some("call"), ty: UntrackedSymbol { id: 104, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }], index: 0, docs: ["Authenticates the sudo key and dispatches a function call with `Root` origin."] }, Variant { name: "sudo_unchecked_weight", fields: [Field { name: Some("call"), ty: UntrackedSymbol { id: 104, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }, Field { name: Some("weight"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }], index: 1, docs: ["Authenticates the sudo key and dispatches a function call with `Root` origin.", "This function does not check the weight of the call, and instead allows the", "Sudo user to specify the weight of the call.", "", "The dispatch origin for this call must be _Signed_."] }, Variant { name: "set_key", fields: [Field { name: Some("new"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }], index: 2, docs: ["Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo", "key."] }, Variant { name: "sudo_as", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountIdLookupOf<T>"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 104, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Box<<T as Config>::RuntimeCall>"), docs: [] }], index: 3, docs: ["Authenticates the sudo key and dispatches a function call with `Signed` origin from", "a given account.", "", "The dispatch origin for this call must be _Signed_."] }, Variant { name: "remove_key", fields: [], index: 4, docs: ["Permanently removes the sudo key.", "", "**This cannot be un-done.**"] }] }), docs: ["Contains a variant per dispatchable extrinsic that this pallet has."] } }, PortableType { id: 439, ty: Type { path: Path { segments: ["sp_runtime", "traits", "BlakeTwo256"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 440, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 441, ty: Type { path: Path { segments: ["pallet_conviction_voting", "types", "Tally"] }, type_params: [TypeParameter { name: "Votes", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Total", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("ayes"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Votes"), docs: [] }, Field { name: Some("nays"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Votes"), docs: [] }, Field { name: Some("support"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Votes"), docs: [] }] }), docs: [] } }, PortableType { id: 442, ty: Type { path: Path { segments: ["pallet_ranked_collective", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "MemberAdded", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 0, docs: ["A member `who` has been added."] }, Variant { name: "RankChanged", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("rank"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Rank"), docs: [] }], index: 1, docs: ["The member `who`se rank has been changed to the given `rank`."] }, Variant { name: "MemberRemoved", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("rank"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Rank"), docs: [] }], index: 2, docs: ["The member `who` of given `rank` has been removed from the collective."] }, Variant { name: "Voted", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("poll"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PollIndexOf<T, I>"), docs: [] }, Field { name: Some("vote"), ty: UntrackedSymbol { id: 443, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VoteRecord"), docs: [] }, Field { name: Some("tally"), ty: UntrackedSymbol { id: 444, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TallyOf<T, I>"), docs: [] }], index: 3, docs: ["The member `who` has voted for the `poll` with the given `vote` leading to an updated", "`tally`."] }, Variant { name: "MemberExchanged", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("new_who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 4, docs: ["The member `who` had their `AccountId` changed to `new_who`."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 443, ty: Type { path: Path { segments: ["pallet_ranked_collective", "VoteRecord"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Aye", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Votes"), docs: [] }], index: 0, docs: [] }, Variant { name: "Nay", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Votes"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 444, ty: Type { path: Path { segments: ["pallet_ranked_collective", "Tally"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }, TypeParameter { name: "M", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("bare_ayes"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MemberIndex"), docs: [] }, Field { name: Some("ayes"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Votes"), docs: [] }, Field { name: Some("nays"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Votes"), docs: [] }] }), docs: [] } }, PortableType { id: 445, ty: Type { path: Path { segments: ["pallet_referenda", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Submitted", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }, Field { name: Some("track"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TrackIdOf<T, I>"), docs: ["The track (and by extension proposal dispatch origin) of this referendum."] }, Field { name: Some("proposal"), ty: UntrackedSymbol { id: 103, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedCallOf<T, I>"), docs: ["The proposal for the referendum."] }], index: 0, docs: ["A referendum has been submitted."] }, Variant { name: "DecisionDepositPlaced", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The account who placed the deposit."] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: ["The amount placed by the account."] }], index: 1, docs: ["The decision deposit has been placed."] }, Variant { name: "DecisionDepositRefunded", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The account who placed the deposit."] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: ["The amount placed by the account."] }], index: 2, docs: ["The decision deposit has been refunded."] }, Variant { name: "DepositSlashed", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The account who placed the deposit."] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: ["The amount placed by the account."] }], index: 3, docs: ["A deposit has been slashed."] }, Variant { name: "DecisionStarted", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }, Field { name: Some("track"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TrackIdOf<T, I>"), docs: ["The track (and by extension proposal dispatch origin) of this referendum."] }, Field { name: Some("proposal"), ty: UntrackedSymbol { id: 103, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedCallOf<T, I>"), docs: ["The proposal for the referendum."] }, Field { name: Some("tally"), ty: UntrackedSymbol { id: 444, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Tally"), docs: ["The current tally of votes in this referendum."] }], index: 4, docs: ["A referendum has moved into the deciding phase."] }, Variant { name: "ConfirmStarted", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }], index: 5, docs: [] }, Variant { name: "ConfirmAborted", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }], index: 6, docs: [] }, Variant { name: "Confirmed", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }, Field { name: Some("tally"), ty: UntrackedSymbol { id: 444, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Tally"), docs: ["The final tally of votes in this referendum."] }], index: 7, docs: ["A referendum has ended its confirmation phase and is ready for approval."] }, Variant { name: "Approved", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }], index: 8, docs: ["A referendum has been approved and its proposal has been scheduled."] }, Variant { name: "Rejected", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }, Field { name: Some("tally"), ty: UntrackedSymbol { id: 444, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Tally"), docs: ["The final tally of votes in this referendum."] }], index: 9, docs: ["A proposal has been rejected by referendum."] }, Variant { name: "TimedOut", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }, Field { name: Some("tally"), ty: UntrackedSymbol { id: 444, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Tally"), docs: ["The final tally of votes in this referendum."] }], index: 10, docs: ["A referendum has been timed out without being decided."] }, Variant { name: "Cancelled", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }, Field { name: Some("tally"), ty: UntrackedSymbol { id: 444, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Tally"), docs: ["The final tally of votes in this referendum."] }], index: 11, docs: ["A referendum has been cancelled."] }, Variant { name: "Killed", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }, Field { name: Some("tally"), ty: UntrackedSymbol { id: 444, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Tally"), docs: ["The final tally of votes in this referendum."] }], index: 12, docs: ["A referendum has been killed."] }, Variant { name: "SubmissionDepositRefunded", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The account who placed the deposit."] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: ["The amount placed by the account."] }], index: 13, docs: ["The submission deposit has been refunded."] }, Variant { name: "MetadataSet", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }, Field { name: Some("hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: ["Preimage hash."] }], index: 14, docs: ["Metadata for a referendum has been set."] }, Variant { name: "MetadataCleared", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumIndex"), docs: ["Index of the referendum."] }, Field { name: Some("hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: ["Preimage hash."] }], index: 15, docs: ["Metadata for a referendum has been cleared."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 446, ty: Type { path: Path { segments: ["pallet_whitelist", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "CallWhitelisted", fields: [Field { name: Some("call_hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 0, docs: [] }, Variant { name: "WhitelistedCallRemoved", fields: [Field { name: Some("call_hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 1, docs: [] }, Variant { name: "WhitelistedCallDispatched", fields: [Field { name: Some("call_hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("result"), ty: UntrackedSymbol { id: 447, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResultWithPostInfo"), docs: [] }], index: 2, docs: [] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 447, ty: Type { path: Path { segments: ["Result"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 448, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 449, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ok", fields: [Field { name: None, ty: UntrackedSymbol { id: 448, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 0, docs: [] }, Variant { name: "Err", fields: [Field { name: None, ty: UntrackedSymbol { id: 449, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 448, ty: Type { path: Path { segments: ["frame_support", "dispatch", "PostDispatchInfo"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("actual_weight"), ty: UntrackedSymbol { id: 386, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Weight>"), docs: [] }, Field { name: Some("pays_fee"), ty: UntrackedSymbol { id: 25, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Pays"), docs: [] }] }), docs: [] } }, PortableType { id: 449, ty: Type { path: Path { segments: ["sp_runtime", "DispatchErrorWithPostInfo"] }, type_params: [TypeParameter { name: "Info", ty: Some(UntrackedSymbol { id: 448, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("post_info"), ty: UntrackedSymbol { id: 448, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Info"), docs: [] }, Field { name: Some("error"), ty: UntrackedSymbol { id: 26, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchError"), docs: [] }] }), docs: [] } }, PortableType { id: 450, ty: Type { path: Path { segments: ["polkadot_runtime_common", "claims", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Claimed", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("ethereum_address"), ty: UntrackedSymbol { id: 170, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("EthereumAddress"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 0, docs: ["Someone claimed some DOTs."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 451, ty: Type { path: Path { segments: ["pallet_utility", "pallet", "Event"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "BatchInterrupted", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("error"), ty: UntrackedSymbol { id: 26, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchError"), docs: [] }], index: 0, docs: ["Batch of dispatches did not complete fully. Index of first failing dispatch given, as", "well as the error."] }, Variant { name: "BatchCompleted", fields: [], index: 1, docs: ["Batch of dispatches completed fully with no error."] }, Variant { name: "BatchCompletedWithErrors", fields: [], index: 2, docs: ["Batch of dispatches completed but has errors."] }, Variant { name: "ItemCompleted", fields: [], index: 3, docs: ["A single item within a Batch of dispatches has completed with no error."] }, Variant { name: "ItemFailed", fields: [Field { name: Some("error"), ty: UntrackedSymbol { id: 26, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchError"), docs: [] }], index: 4, docs: ["A single item within a Batch of dispatches has completed with error."] }, Variant { name: "DispatchedAs", fields: [Field { name: Some("result"), ty: UntrackedSymbol { id: 452, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResult"), docs: [] }], index: 5, docs: ["A call was dispatched."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 452, ty: Type { path: Path { segments: ["Result"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 26, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ok", fields: [Field { name: None, ty: UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 0, docs: [] }, Variant { name: "Err", fields: [Field { name: None, ty: UntrackedSymbol { id: 26, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 453, ty: Type { path: Path { segments: ["pallet_identity", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "IdentitySet", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 0, docs: ["A name was set or reset (which will remove all judgements)."] }, Variant { name: "IdentityCleared", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 1, docs: ["A name was cleared, and the given balance returned."] }, Variant { name: "IdentityKilled", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 2, docs: ["A name was removed and the given balance slashed."] }, Variant { name: "JudgementRequested", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("registrar_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RegistrarIndex"), docs: [] }], index: 3, docs: ["A judgement was asked from a registrar."] }, Variant { name: "JudgementUnrequested", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("registrar_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RegistrarIndex"), docs: [] }], index: 4, docs: ["A judgement request was retracted."] }, Variant { name: "JudgementGiven", fields: [Field { name: Some("target"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("registrar_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RegistrarIndex"), docs: [] }], index: 5, docs: ["A judgement was given by a registrar."] }, Variant { name: "RegistrarAdded", fields: [Field { name: Some("registrar_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RegistrarIndex"), docs: [] }], index: 6, docs: ["A registrar was added."] }, Variant { name: "SubIdentityAdded", fields: [Field { name: Some("sub"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("main"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 7, docs: ["A sub-identity was added to an identity and the deposit paid."] }, Variant { name: "SubIdentitiesSet", fields: [Field { name: Some("main"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("number_of_subs"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("new_deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 8, docs: ["An account's sub-identities were set (in bulk)."] }, Variant { name: "SubIdentityRenamed", fields: [Field { name: Some("sub"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("main"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 9, docs: ["A given sub-account's associated name was changed by its super-identity."] }, Variant { name: "SubIdentityRemoved", fields: [Field { name: Some("sub"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("main"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 10, docs: ["A sub-identity was removed from an identity and the deposit freed."] }, Variant { name: "SubIdentityRevoked", fields: [Field { name: Some("sub"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("main"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 11, docs: ["A sub-identity was cleared, and the given deposit repatriated from the", "main identity account to the sub-identity account."] }, Variant { name: "AuthorityAdded", fields: [Field { name: Some("authority"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 12, docs: ["A username authority was added."] }, Variant { name: "AuthorityRemoved", fields: [Field { name: Some("authority"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 13, docs: ["A username authority was removed."] }, Variant { name: "UsernameSet", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("username"), ty: UntrackedSymbol { id: 219, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Username<T>"), docs: [] }], index: 14, docs: ["A username was set for `who`."] }, Variant { name: "UsernameQueued", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("username"), ty: UntrackedSymbol { id: 219, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Username<T>"), docs: [] }, Field { name: Some("expiration"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }], index: 15, docs: ["A username was queued, but `who` must accept it prior to `expiration`."] }, Variant { name: "PreapprovalExpired", fields: [Field { name: Some("whose"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 16, docs: ["A queued username passed its expiration without being claimed and was removed."] }, Variant { name: "PrimaryUsernameSet", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("username"), ty: UntrackedSymbol { id: 219, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Username<T>"), docs: [] }], index: 17, docs: ["A username was set as a primary and can be looked up from `who`."] }, Variant { name: "DanglingUsernameRemoved", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("username"), ty: UntrackedSymbol { id: 219, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Username<T>"), docs: [] }], index: 18, docs: ["A dangling username (as in, a username corresponding to an account that has removed its", "identity) has been removed."] }, Variant { name: "UsernameUnbound", fields: [Field { name: Some("username"), ty: UntrackedSymbol { id: 219, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Username<T>"), docs: [] }], index: 19, docs: ["A username has been unbound."] }, Variant { name: "UsernameRemoved", fields: [Field { name: Some("username"), ty: UntrackedSymbol { id: 219, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Username<T>"), docs: [] }], index: 20, docs: ["A username has been removed."] }, Variant { name: "UsernameKilled", fields: [Field { name: Some("username"), ty: UntrackedSymbol { id: 219, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Username<T>"), docs: [] }], index: 21, docs: ["A username has been killed."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 454, ty: Type { path: Path { segments: ["pallet_society", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Founded", fields: [Field { name: Some("founder"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 0, docs: ["The society is founded by the given identity."] }, Variant { name: "Bid", fields: [Field { name: Some("candidate_id"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("offer"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], index: 1, docs: ["A membership bid just happened. The given account is the candidate's ID and their offer", "is the second."] }, Variant { name: "Vouch", fields: [Field { name: Some("candidate_id"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("offer"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }, Field { name: Some("vouching"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 2, docs: ["A membership bid just happened by vouching. The given account is the candidate's ID and", "their offer is the second. The vouching party is the third."] }, Variant { name: "AutoUnbid", fields: [Field { name: Some("candidate"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 3, docs: ["A candidate was dropped (due to an excess of bids in the system)."] }, Variant { name: "Unbid", fields: [Field { name: Some("candidate"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 4, docs: ["A candidate was dropped (by their request)."] }, Variant { name: "Unvouch", fields: [Field { name: Some("candidate"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 5, docs: ["A candidate was dropped (by request of who vouched for them)."] }, Variant { name: "Inducted", fields: [Field { name: Some("primary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("candidates"), ty: UntrackedSymbol { id: 124, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T::AccountId>"), docs: [] }], index: 6, docs: ["A group of candidates have been inducted. The batch's primary is the first value, the", "batch in full is the second."] }, Variant { name: "SuspendedMemberJudgement", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("judged"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 7, docs: ["A suspended member has been judged."] }, Variant { name: "CandidateSuspended", fields: [Field { name: Some("candidate"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 8, docs: ["A candidate has been suspended"] }, Variant { name: "MemberSuspended", fields: [Field { name: Some("member"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 9, docs: ["A member has been suspended"] }, Variant { name: "Challenged", fields: [Field { name: Some("member"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 10, docs: ["A member has been challenged"] }, Variant { name: "Vote", fields: [Field { name: Some("candidate"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("voter"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("vote"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 11, docs: ["A vote has been placed"] }, Variant { name: "DefenderVote", fields: [Field { name: Some("voter"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("vote"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 12, docs: ["A vote has been placed for a defending member"] }, Variant { name: "NewParams", fields: [Field { name: Some("params"), ty: UntrackedSymbol { id: 455, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("GroupParamsFor<T, I>"), docs: [] }], index: 13, docs: ["A new set of \\[params\\] has been set for the group."] }, Variant { name: "Unfounded", fields: [Field { name: Some("founder"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 14, docs: ["Society is unfounded."] }, Variant { name: "Deposit", fields: [Field { name: Some("value"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], index: 15, docs: ["Some funds were deposited into the society account."] }, Variant { name: "Elevated", fields: [Field { name: Some("member"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("rank"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Rank"), docs: [] }], index: 16, docs: ["A \\[member\\] got elevated to \\[rank\\]."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 455, ty: Type { path: Path { segments: ["pallet_society", "GroupParams"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("max_members"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_intake"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_strikes"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("candidate_deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 456, ty: Type { path: Path { segments: ["pallet_recovery", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "RecoveryCreated", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 0, docs: ["A recovery process has been set up for an account."] }, Variant { name: "RecoveryInitiated", fields: [Field { name: Some("lost_account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("rescuer_account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 1, docs: ["A recovery process has been initiated for lost account by rescuer account."] }, Variant { name: "RecoveryVouched", fields: [Field { name: Some("lost_account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("rescuer_account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("sender"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 2, docs: ["A recovery process for lost account by rescuer account has been vouched for by sender."] }, Variant { name: "RecoveryClosed", fields: [Field { name: Some("lost_account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("rescuer_account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 3, docs: ["A recovery process for lost account by rescuer account has been closed."] }, Variant { name: "AccountRecovered", fields: [Field { name: Some("lost_account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("rescuer_account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 4, docs: ["Lost account has been successfully recovered by rescuer account."] }, Variant { name: "RecoveryRemoved", fields: [Field { name: Some("lost_account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 5, docs: ["A recovery process has been removed for an account."] }] }), docs: ["Events type."] } }, PortableType { id: 457, ty: Type { path: Path { segments: ["pallet_vesting", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "VestingUpdated", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("unvested"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 0, docs: ["The amount vested has been updated. This could indicate a change in funds available.", "The balance given is the amount which is left unvested (and thus locked)."] }, Variant { name: "VestingCompleted", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 1, docs: ["An \\[account\\] has become fully vested."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 458, ty: Type { path: Path { segments: ["pallet_scheduler", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Scheduled", fields: [Field { name: Some("when"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 0, docs: ["Scheduled some task."] }, Variant { name: "Canceled", fields: [Field { name: Some("when"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 1, docs: ["Canceled some task."] }, Variant { name: "Dispatched", fields: [Field { name: Some("task"), ty: UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskAddress<BlockNumberFor<T>>"), docs: [] }, Field { name: Some("id"), ty: UntrackedSymbol { id: 459, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<TaskName>"), docs: [] }, Field { name: Some("result"), ty: UntrackedSymbol { id: 452, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResult"), docs: [] }], index: 2, docs: ["Dispatched some task."] }, Variant { name: "RetrySet", fields: [Field { name: Some("task"), ty: UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskAddress<BlockNumberFor<T>>"), docs: [] }, Field { name: Some("id"), ty: UntrackedSymbol { id: 459, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<TaskName>"), docs: [] }, Field { name: Some("period"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }, Field { name: Some("retries"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }], index: 3, docs: ["Set a retry configuration for some task."] }, Variant { name: "RetryCancelled", fields: [Field { name: Some("task"), ty: UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskAddress<BlockNumberFor<T>>"), docs: [] }, Field { name: Some("id"), ty: UntrackedSymbol { id: 459, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<TaskName>"), docs: [] }], index: 4, docs: ["Cancel a retry configuration for some task."] }, Variant { name: "CallUnavailable", fields: [Field { name: Some("task"), ty: UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskAddress<BlockNumberFor<T>>"), docs: [] }, Field { name: Some("id"), ty: UntrackedSymbol { id: 459, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<TaskName>"), docs: [] }], index: 5, docs: ["The call for the provided hash was not found so the task has been aborted."] }, Variant { name: "PeriodicFailed", fields: [Field { name: Some("task"), ty: UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskAddress<BlockNumberFor<T>>"), docs: [] }, Field { name: Some("id"), ty: UntrackedSymbol { id: 459, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<TaskName>"), docs: [] }], index: 6, docs: ["The given task was unable to be renewed since the agenda is full at that block."] }, Variant { name: "RetryFailed", fields: [Field { name: Some("task"), ty: UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskAddress<BlockNumberFor<T>>"), docs: [] }, Field { name: Some("id"), ty: UntrackedSymbol { id: 459, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<TaskName>"), docs: [] }], index: 7, docs: ["The given task was unable to be retried since the agenda is full at that block or there", "was not enough weight to reschedule it."] }, Variant { name: "PermanentlyOverweight", fields: [Field { name: Some("task"), ty: UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TaskAddress<BlockNumberFor<T>>"), docs: [] }, Field { name: Some("id"), ty: UntrackedSymbol { id: 459, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<TaskName>"), docs: [] }], index: 8, docs: ["The given task can never be executed since it is overweight."] }] }), docs: ["Events type."] } }, PortableType { id: 459, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 460, ty: Type { path: Path { segments: ["pallet_proxy", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "ProxyExecuted", fields: [Field { name: Some("result"), ty: UntrackedSymbol { id: 452, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResult"), docs: [] }], index: 0, docs: ["A proxy was executed correctly, with the given."] }, Variant { name: "PureCreated", fields: [Field { name: Some("pure"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("proxy_type"), ty: UntrackedSymbol { id: 229, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::ProxyType"), docs: [] }, Field { name: Some("disambiguation_index"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u16"), docs: [] }], index: 1, docs: ["A pure account has been created by new proxy with given", "disambiguation index and proxy type."] }, Variant { name: "Announced", fields: [Field { name: Some("real"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("proxy"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("call_hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CallHashOf<T>"), docs: [] }], index: 2, docs: ["An announcement was placed to make a call in the future."] }, Variant { name: "ProxyAdded", fields: [Field { name: Some("delegator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("delegatee"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("proxy_type"), ty: UntrackedSymbol { id: 229, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::ProxyType"), docs: [] }, Field { name: Some("delay"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }], index: 3, docs: ["A proxy was added."] }, Variant { name: "ProxyRemoved", fields: [Field { name: Some("delegator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("delegatee"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("proxy_type"), ty: UntrackedSymbol { id: 229, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::ProxyType"), docs: [] }, Field { name: Some("delay"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }], index: 4, docs: ["A proxy was removed."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 461, ty: Type { path: Path { segments: ["pallet_multisig", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NewMultisig", fields: [Field { name: Some("approving"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("multisig"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("call_hash"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CallHash"), docs: [] }], index: 0, docs: ["A new multisig operation has begun."] }, Variant { name: "MultisigApproval", fields: [Field { name: Some("approving"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("timepoint"), ty: UntrackedSymbol { id: 232, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Timepoint<BlockNumberFor<T>>"), docs: [] }, Field { name: Some("multisig"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("call_hash"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CallHash"), docs: [] }], index: 1, docs: ["A multisig operation has been approved by someone."] }, Variant { name: "MultisigExecuted", fields: [Field { name: Some("approving"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("timepoint"), ty: UntrackedSymbol { id: 232, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Timepoint<BlockNumberFor<T>>"), docs: [] }, Field { name: Some("multisig"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("call_hash"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CallHash"), docs: [] }, Field { name: Some("result"), ty: UntrackedSymbol { id: 452, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResult"), docs: [] }], index: 2, docs: ["A multisig operation has been executed."] }, Variant { name: "MultisigCancelled", fields: [Field { name: Some("cancelling"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("timepoint"), ty: UntrackedSymbol { id: 232, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Timepoint<BlockNumberFor<T>>"), docs: [] }, Field { name: Some("multisig"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("call_hash"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CallHash"), docs: [] }], index: 3, docs: ["A multisig operation has been cancelled."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 462, ty: Type { path: Path { segments: ["pallet_preimage", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Noted", fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 0, docs: ["A preimage has been noted."] }, Variant { name: "Requested", fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 1, docs: ["A preimage has been requested."] }, Variant { name: "Cleared", fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }], index: 2, docs: ["A preimage has ben cleared."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 463, ty: Type { path: Path { segments: ["pallet_asset_rate", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "AssetRateCreated", fields: [Field { name: Some("asset_kind"), ty: UntrackedSymbol { id: 57, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetKind"), docs: [] }, Field { name: Some("rate"), ty: UntrackedSymbol { id: 236, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("FixedU128"), docs: [] }], index: 0, docs: [] }, Variant { name: "AssetRateRemoved", fields: [Field { name: Some("asset_kind"), ty: UntrackedSymbol { id: 57, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetKind"), docs: [] }], index: 1, docs: [] }, Variant { name: "AssetRateUpdated", fields: [Field { name: Some("asset_kind"), ty: UntrackedSymbol { id: 57, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AssetKind"), docs: [] }, Field { name: Some("old"), ty: UntrackedSymbol { id: 236, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("FixedU128"), docs: [] }, Field { name: Some("new"), ty: UntrackedSymbol { id: 236, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("FixedU128"), docs: [] }], index: 2, docs: [] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 464, ty: Type { path: Path { segments: ["pallet_bounties", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "BountyProposed", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 0, docs: ["New bounty proposal."] }, Variant { name: "BountyRejected", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("bond"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }], index: 1, docs: ["A bounty proposal was rejected; funds were slashed."] }, Variant { name: "BountyBecameActive", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 2, docs: ["A bounty proposal is funded and became active."] }, Variant { name: "BountyAwarded", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 3, docs: ["A bounty is awarded to a beneficiary."] }, Variant { name: "BountyClaimed", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("payout"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T, I>"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 4, docs: ["A bounty is claimed by beneficiary."] }, Variant { name: "BountyCanceled", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 5, docs: ["A bounty is cancelled."] }, Variant { name: "BountyExtended", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 6, docs: ["A bounty expiry is extended."] }, Variant { name: "BountyApproved", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 7, docs: ["A bounty is approved."] }, Variant { name: "CuratorProposed", fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("curator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 8, docs: ["A bounty curator is proposed."] }, Variant { name: "CuratorUnassigned", fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 9, docs: ["A bounty curator is unassigned."] }, Variant { name: "CuratorAccepted", fields: [Field { name: Some("bounty_id"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("curator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 10, docs: ["A bounty curator is accepted."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 465, ty: Type { path: Path { segments: ["pallet_child_bounties", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Added", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 0, docs: ["A child-bounty is added."] }, Variant { name: "Awarded", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 1, docs: ["A child-bounty is awarded to a beneficiary."] }, Variant { name: "Claimed", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("payout"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 2, docs: ["A child-bounty is claimed by beneficiary."] }, Variant { name: "Canceled", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("child_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }], index: 3, docs: ["A child-bounty is cancelled."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 466, ty: Type { path: Path { segments: ["pallet_nis", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "BidPlaced", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("duration"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 0, docs: ["A bid was successfully placed."] }, Variant { name: "BidRetracted", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("duration"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 1, docs: ["A bid was successfully removed (before being accepted)."] }, Variant { name: "BidDropped", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("duration"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 2, docs: ["A bid was dropped from a queue because of another, more substantial, bid was present."] }, Variant { name: "Issued", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReceiptIndex"), docs: ["The identity of the receipt."] }, Field { name: Some("expiry"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: ["The block number at which the receipt may be thawed."] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The owner of the receipt."] }, Field { name: Some("proportion"), ty: UntrackedSymbol { id: 46, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Perquintill"), docs: ["The proportion of the effective total issuance which the receipt represents."] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: ["The amount of funds which were debited from the owner."] }], index: 3, docs: ["A bid was accepted. The balance may not be released until expiry."] }, Variant { name: "Thawed", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReceiptIndex"), docs: ["The identity of the receipt."] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The owner."] }, Field { name: Some("proportion"), ty: UntrackedSymbol { id: 46, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Perquintill"), docs: ["The proportion of the effective total issuance by which the owner was debited."] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: ["The amount by which the owner was credited."] }, Field { name: Some("dropped"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: ["If `true` then the receipt is done."] }], index: 4, docs: ["An receipt has been (at least partially) thawed."] }, Variant { name: "Funded", fields: [Field { name: Some("deficit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 5, docs: ["An automatic funding of the deficit was made."] }, Variant { name: "Transferred", fields: [Field { name: Some("from"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("to"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReceiptIndex"), docs: [] }], index: 6, docs: ["A receipt was transferred."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 467, ty: Type { path: Path { segments: ["pallet_balances", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Endowed", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("free_balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 0, docs: ["An account was created with some free balance."] }, Variant { name: "DustLost", fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 1, docs: ["An account was removed whose balance was non-zero but below ExistentialDeposit,", "resulting in an outright loss."] }, Variant { name: "Transfer", fields: [Field { name: Some("from"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("to"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 2, docs: ["Transfer succeeded."] }, Variant { name: "BalanceSet", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("free"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 3, docs: ["A balance was set by root."] }, Variant { name: "Reserved", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 4, docs: ["Some balance was reserved (moved from free to reserved)."] }, Variant { name: "Unreserved", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 5, docs: ["Some balance was unreserved (moved from reserved to free)."] }, Variant { name: "ReserveRepatriated", fields: [Field { name: Some("from"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("to"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }, Field { name: Some("destination_status"), ty: UntrackedSymbol { id: 34, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Status"), docs: [] }], index: 6, docs: ["Some balance was moved from the reserve of the first account to the second account.", "Final argument indicates the destination balance type."] }, Variant { name: "Deposit", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 7, docs: ["Some amount was deposited (e.g. for transaction fees)."] }, Variant { name: "Withdraw", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 8, docs: ["Some amount was withdrawn from the account (e.g. for transaction fees)."] }, Variant { name: "Slashed", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 9, docs: ["Some amount was removed from the account (e.g. for misbehavior)."] }, Variant { name: "Minted", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 10, docs: ["Some amount was minted into an account."] }, Variant { name: "Burned", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 11, docs: ["Some amount was burned from an account."] }, Variant { name: "Suspended", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 12, docs: ["Some amount was suspended from an account (it can be restored later)."] }, Variant { name: "Restored", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 13, docs: ["Some amount was restored into an account."] }, Variant { name: "Upgraded", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 14, docs: ["An account was upgraded."] }, Variant { name: "Issued", fields: [Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 15, docs: ["Total issuance was increased by `amount`, creating a credit to be balanced."] }, Variant { name: "Rescinded", fields: [Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 16, docs: ["Total issuance was decreased by `amount`, creating a debt to be balanced."] }, Variant { name: "Locked", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 17, docs: ["Some balance was locked."] }, Variant { name: "Unlocked", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 18, docs: ["Some balance was unlocked."] }, Variant { name: "Frozen", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 19, docs: ["Some balance was frozen."] }, Variant { name: "Thawed", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 20, docs: ["Some balance was thawed."] }, Variant { name: "TotalIssuanceForced", fields: [Field { name: Some("old"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }, Field { name: Some("new"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Balance"), docs: [] }], index: 21, docs: ["The `TotalIssuance` was forcefully changed."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 468, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "inclusion", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "CandidateBacked", fields: [Field { name: None, ty: UntrackedSymbol { id: 469, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CandidateReceipt<T::Hash>"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 275, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("HeadData"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 470, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CoreIndex"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 471, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("GroupIndex"), docs: [] }], index: 0, docs: ["A candidate was backed. `[candidate, head_data]`"] }, Variant { name: "CandidateIncluded", fields: [Field { name: None, ty: UntrackedSymbol { id: 469, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CandidateReceipt<T::Hash>"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 275, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("HeadData"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 470, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CoreIndex"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 471, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("GroupIndex"), docs: [] }], index: 1, docs: ["A candidate was included. `[candidate, head_data]`"] }, Variant { name: "CandidateTimedOut", fields: [Field { name: None, ty: UntrackedSymbol { id: 469, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CandidateReceipt<T::Hash>"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 275, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("HeadData"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 470, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CoreIndex"), docs: [] }], index: 2, docs: ["A candidate timed out. `[candidate, head_data]`"] }, Variant { name: "UpwardMessagesReceived", fields: [Field { name: Some("from"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("count"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 3, docs: ["Some upward messages have been received and will be processed."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 469, ty: Type { path: Path { segments: ["polkadot_primitives", "vstaging", "CandidateReceiptV2"] }, type_params: [TypeParameter { name: "H", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("descriptor"), ty: UntrackedSymbol { id: 265, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CandidateDescriptorV2<H>"), docs: [] }, Field { name: Some("commitments_hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }] }), docs: [] } }, PortableType { id: 470, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "CoreIndex"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 471, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "GroupIndex"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 472, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "paras", "pallet", "Event"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "CurrentCodeUpdated", fields: [Field { name: None, ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 0, docs: ["Current code has been updated for a Para. `para_id`"] }, Variant { name: "CurrentHeadUpdated", fields: [Field { name: None, ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 1, docs: ["Current head has been updated for a Para. `para_id`"] }, Variant { name: "CodeUpgradeScheduled", fields: [Field { name: None, ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 2, docs: ["A code upgrade has been scheduled for a Para. `para_id`"] }, Variant { name: "NewHeadNoted", fields: [Field { name: None, ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 3, docs: ["A new head has been noted for a Para. `para_id`"] }, Variant { name: "ActionQueued", fields: [Field { name: None, ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SessionIndex"), docs: [] }], index: 4, docs: ["A para has been queued to execute pending actions. `para_id`"] }, Variant { name: "PvfCheckStarted", fields: [Field { name: None, ty: UntrackedSymbol { id: 267, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidationCodeHash"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 5, docs: ["The given para either initiated or subscribed to a PVF check for the given validation", "code. `code_hash` `para_id`"] }, Variant { name: "PvfCheckAccepted", fields: [Field { name: None, ty: UntrackedSymbol { id: 267, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidationCodeHash"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 6, docs: ["The given validation code was accepted by the PVF pre-checking vote.", "`code_hash` `para_id`"] }, Variant { name: "PvfCheckRejected", fields: [Field { name: None, ty: UntrackedSymbol { id: 267, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidationCodeHash"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 7, docs: ["The given validation code was rejected by the PVF pre-checking vote.", "`code_hash` `para_id`"] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 473, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "hrmp", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "OpenChannelRequested", fields: [Field { name: Some("sender"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("recipient"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("proposed_max_capacity"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("proposed_max_message_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 0, docs: ["Open HRMP channel requested."] }, Variant { name: "OpenChannelCanceled", fields: [Field { name: Some("by_parachain"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("channel_id"), ty: UntrackedSymbol { id: 291, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("HrmpChannelId"), docs: [] }], index: 1, docs: ["An HRMP channel request sent by the receiver was canceled by either party."] }, Variant { name: "OpenChannelAccepted", fields: [Field { name: Some("sender"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("recipient"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 2, docs: ["Open HRMP channel accepted."] }, Variant { name: "ChannelClosed", fields: [Field { name: Some("by_parachain"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("channel_id"), ty: UntrackedSymbol { id: 291, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("HrmpChannelId"), docs: [] }], index: 3, docs: ["HRMP channel closed."] }, Variant { name: "HrmpChannelForceOpened", fields: [Field { name: Some("sender"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("recipient"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("proposed_max_capacity"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("proposed_max_message_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 4, docs: ["An HRMP channel was opened via Root origin."] }, Variant { name: "HrmpSystemChannelOpened", fields: [Field { name: Some("sender"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("recipient"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("proposed_max_capacity"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("proposed_max_message_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 5, docs: ["An HRMP channel was opened with a system chain."] }, Variant { name: "OpenChannelDepositsUpdated", fields: [Field { name: Some("sender"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("recipient"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 6, docs: ["An HRMP channel's deposits were updated."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 474, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "disputes", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "DisputeInitiated", fields: [Field { name: None, ty: UntrackedSymbol { id: 280, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CandidateHash"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 475, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DisputeLocation"), docs: [] }], index: 0, docs: ["A dispute has been initiated. \\[candidate hash, dispute location\\]"] }, Variant { name: "DisputeConcluded", fields: [Field { name: None, ty: UntrackedSymbol { id: 280, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CandidateHash"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 476, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DisputeResult"), docs: [] }], index: 1, docs: ["A dispute has concluded for or against a candidate.", "`\\[para id, candidate hash, dispute result\\]`"] }, Variant { name: "Revert", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }], index: 2, docs: ["A dispute has concluded with supermajority against a candidate.", "Block authors should no longer build on top of this head and should", "instead revert the block at the given height. This should be the", "number of the child of the last known valid block in the chain."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 475, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "disputes", "DisputeLocation"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Local", fields: [], index: 0, docs: [] }, Variant { name: "Remote", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 476, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "disputes", "DisputeResult"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Valid", fields: [], index: 0, docs: [] }, Variant { name: "Invalid", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 477, ty: Type { path: Path { segments: ["pallet_message_queue", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "ProcessingFailed", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H256"), docs: ["The `blake2_256` hash of the message."] }, Field { name: Some("origin"), ty: UntrackedSymbol { id: 298, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MessageOriginOf<T>"), docs: ["The queue of the message."] }, Field { name: Some("error"), ty: UntrackedSymbol { id: 478, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProcessMessageError"), docs: ["The error that occurred.", "", "This error is pretty opaque. More fine-grained errors need to be emitted as events", "by the `MessageProcessor`."] }], index: 0, docs: ["Message discarded due to an error in the `MessageProcessor` (usually a format error)."] }, Variant { name: "Processed", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H256"), docs: ["The `blake2_256` hash of the message."] }, Field { name: Some("origin"), ty: UntrackedSymbol { id: 298, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MessageOriginOf<T>"), docs: ["The queue of the message."] }, Field { name: Some("weight_used"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: ["How much weight was used to process the message."] }, Field { name: Some("success"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: ["Whether the message was processed.", "", "Note that this does not mean that the underlying `MessageProcessor` was internally", "successful. It *solely* means that the MQ pallet will treat this as a success", "condition and discard the message. Any internal error needs to be emitted as events", "by the `MessageProcessor`."] }], index: 1, docs: ["Message is processed."] }, Variant { name: "OverweightEnqueued", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: ["The `blake2_256` hash of the message."] }, Field { name: Some("origin"), ty: UntrackedSymbol { id: 298, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MessageOriginOf<T>"), docs: ["The queue of the message."] }, Field { name: Some("page_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PageIndex"), docs: ["The page of the message."] }, Field { name: Some("message_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Size"), docs: ["The index of the message within the page."] }], index: 2, docs: ["Message placed in overweight queue."] }, Variant { name: "PageReaped", fields: [Field { name: Some("origin"), ty: UntrackedSymbol { id: 298, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MessageOriginOf<T>"), docs: ["The queue of the page."] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PageIndex"), docs: ["The index of the page."] }], index: 3, docs: ["This page was reaped."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 478, ty: Type { path: Path { segments: ["frame_support", "traits", "messages", "ProcessMessageError"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "BadFormat", fields: [], index: 0, docs: [] }, Variant { name: "Corrupt", fields: [], index: 1, docs: [] }, Variant { name: "Unsupported", fields: [], index: 2, docs: [] }, Variant { name: "Overweight", fields: [Field { name: None, ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }], index: 3, docs: [] }, Variant { name: "Yield", fields: [], index: 4, docs: [] }, Variant { name: "StackLimitReached", fields: [], index: 5, docs: [] }] }), docs: [] } }, PortableType { id: 479, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "on_demand", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "OnDemandOrderPlaced", fields: [Field { name: Some("para_id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("spot_price"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("ordered_by"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 0, docs: ["An order was placed at some spot price amount by orderer ordered_by"] }, Variant { name: "SpotPriceSet", fields: [Field { name: Some("spot_price"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 1, docs: ["The value of the spot price has likely changed"] }, Variant { name: "AccountCredited", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 2, docs: ["An account was given credits."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 480, ty: Type { path: Path { segments: ["polkadot_runtime_common", "paras_registrar", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Registered", fields: [Field { name: Some("para_id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("manager"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 0, docs: [] }, Variant { name: "Deregistered", fields: [Field { name: Some("para_id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 1, docs: [] }, Variant { name: "Reserved", fields: [Field { name: Some("para_id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 2, docs: [] }, Variant { name: "Swapped", fields: [Field { name: Some("para_id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("other_id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 3, docs: [] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 481, ty: Type { path: Path { segments: ["polkadot_runtime_common", "slots", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NewLeasePeriod", fields: [Field { name: Some("lease_period"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("LeasePeriodOf<T>"), docs: [] }], index: 0, docs: ["A new `[lease_period]` is beginning."] }, Variant { name: "Leased", fields: [Field { name: Some("para_id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("leaser"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("period_begin"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("LeasePeriodOf<T>"), docs: [] }, Field { name: Some("period_count"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("LeasePeriodOf<T>"), docs: [] }, Field { name: Some("extra_reserved"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("total_amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 1, docs: ["A para has won the right to a continuous set of lease periods as a parachain.", "First balance is any extra amount reserved on top of the para's existing deposit.", "Second balance is the total amount reserved."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 482, ty: Type { path: Path { segments: ["polkadot_runtime_common", "auctions", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "AuctionStarted", fields: [Field { name: Some("auction_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AuctionIndex"), docs: [] }, Field { name: Some("lease_period"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("LeasePeriodOf<T>"), docs: [] }, Field { name: Some("ending"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }], index: 0, docs: ["An auction started. Provides its index and the block number where it will begin to", "close and the first lease period of the quadruplet that is auctioned."] }, Variant { name: "AuctionClosed", fields: [Field { name: Some("auction_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AuctionIndex"), docs: [] }], index: 1, docs: ["An auction ended. All funds become unreserved."] }, Variant { name: "Reserved", fields: [Field { name: Some("bidder"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("extra_reserved"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("total_amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 2, docs: ["Funds were reserved for a winning bid. First balance is the extra amount reserved.", "Second is the total."] }, Variant { name: "Unreserved", fields: [Field { name: Some("bidder"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 3, docs: ["Funds were unreserved since bidder is no longer active. `[bidder, amount]`"] }, Variant { name: "ReserveConfiscated", fields: [Field { name: Some("para_id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("leaser"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 4, docs: ["Someone attempted to lease the same slot twice for a parachain. The amount is held in", "reserve but no parachain slot has been leased."] }, Variant { name: "BidAccepted", fields: [Field { name: Some("bidder"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("para_id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("first_slot"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("LeasePeriodOf<T>"), docs: [] }, Field { name: Some("last_slot"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("LeasePeriodOf<T>"), docs: [] }], index: 5, docs: ["A new bid has been accepted as the current winner."] }, Variant { name: "WinningOffset", fields: [Field { name: Some("auction_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AuctionIndex"), docs: [] }, Field { name: Some("block_number"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }], index: 6, docs: ["The winning offset was chosen for an auction. This will map into the `Winning` storage", "map."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 483, ty: Type { path: Path { segments: ["polkadot_runtime_common", "crowdloan", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Created", fields: [Field { name: Some("para_id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 0, docs: ["Create a new crowdloaning campaign."] }, Variant { name: "Contributed", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("fund_index"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 1, docs: ["Contributed to a crowd sale."] }, Variant { name: "Withdrew", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("fund_index"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 2, docs: ["Withdrew full balance of a contributor."] }, Variant { name: "PartiallyRefunded", fields: [Field { name: Some("para_id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 3, docs: ["The loans in a fund have been partially dissolved, i.e. there are some left", "over child keys that still need to be killed."] }, Variant { name: "AllRefunded", fields: [Field { name: Some("para_id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 4, docs: ["All loans in a fund have been refunded."] }, Variant { name: "Dissolved", fields: [Field { name: Some("para_id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 5, docs: ["Fund is dissolved."] }, Variant { name: "HandleBidResult", fields: [Field { name: Some("para_id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("result"), ty: UntrackedSymbol { id: 452, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResult"), docs: [] }], index: 6, docs: ["The result of trying to submit a new bid to the Slots pallet."] }, Variant { name: "Edited", fields: [Field { name: Some("para_id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 7, docs: ["The configuration to a crowdloan has been edited."] }, Variant { name: "MemoUpdated", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("para_id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("memo"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }], index: 8, docs: ["A memo has been updated."] }, Variant { name: "AddedToNewRaise", fields: [Field { name: Some("para_id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 9, docs: ["A parachain has been moved to `NewRaise`"] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 484, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "coretime", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "RevenueInfoRequested", fields: [Field { name: Some("when"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: [] }], index: 0, docs: ["The broker chain has asked for revenue information for a specific block."] }, Variant { name: "CoreAssigned", fields: [Field { name: Some("core"), ty: UntrackedSymbol { id: 470, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CoreIndex"), docs: [] }], index: 1, docs: ["A core has received a new assignment from the broker chain."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 485, ty: Type { path: Path { segments: ["pallet_migrations", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "UpgradeStarted", fields: [Field { name: Some("migrations"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: ["The number of migrations that this upgrade contains.", "", "This can be used to design a progress indicator in combination with counting the", "`MigrationCompleted` and `MigrationSkipped` events."] }], index: 0, docs: ["A Runtime upgrade started.", "", "Its end is indicated by `UpgradeCompleted` or `UpgradeFailed`."] }, Variant { name: "UpgradeCompleted", fields: [], index: 1, docs: ["The current runtime upgrade completed.", "", "This implies that all of its migrations completed successfully as well."] }, Variant { name: "UpgradeFailed", fields: [], index: 2, docs: ["Runtime upgrade failed.", "", "This is very bad and will require governance intervention."] }, Variant { name: "MigrationSkipped", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: ["The index of the skipped migration within the [`Config::Migrations`] list."] }], index: 3, docs: ["A migration was skipped since it was already executed in the past."] }, Variant { name: "MigrationAdvanced", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: ["The index of the migration within the [`Config::Migrations`] list."] }, Field { name: Some("took"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: ["The number of blocks that this migration took so far."] }], index: 4, docs: ["A migration progressed."] }, Variant { name: "MigrationCompleted", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: ["The index of the migration within the [`Config::Migrations`] list."] }, Field { name: Some("took"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: ["The number of blocks that this migration took so far."] }], index: 5, docs: ["A Migration completed."] }, Variant { name: "MigrationFailed", fields: [Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: ["The index of the migration within the [`Config::Migrations`] list."] }, Field { name: Some("took"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumberFor<T>"), docs: ["The number of blocks that this migration took so far."] }], index: 6, docs: ["A Migration failed.", "", "This implies that the whole upgrade failed and governance intervention is required."] }, Variant { name: "HistoricCleared", fields: [Field { name: Some("next_cursor"), ty: UntrackedSymbol { id: 322, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Vec<u8>>"), docs: ["Should be passed to `clear_historic` in a successive call."] }], index: 7, docs: ["The set of historical migrations has been cleared."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 486, ty: Type { path: Path { segments: ["pallet_xcm", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Attempted", fields: [Field { name: Some("outcome"), ty: UntrackedSymbol { id: 487, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("xcm::latest::Outcome"), docs: [] }], index: 0, docs: ["Execution of an XCM message was attempted."] }, Variant { name: "Sent", fields: [Field { name: Some("origin"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("destination"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("message"), ty: UntrackedSymbol { id: 369, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Xcm<()>"), docs: [] }, Field { name: Some("message_id"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("XcmHash"), docs: [] }], index: 1, docs: ["A XCM message was sent."] }, Variant { name: "UnexpectedResponse", fields: [Field { name: Some("origin"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("query_id"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }], index: 2, docs: ["Query response received which does not match a registered query. This may be because a", "matching query was never registered, it may be because it is a duplicate response, or", "because the query timed out."] }, Variant { name: "ResponseReady", fields: [Field { name: Some("query_id"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }, Field { name: Some("response"), ty: UntrackedSymbol { id: 377, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Response"), docs: [] }], index: 3, docs: ["Query response has been received and is ready for taking with `take_response`. There is", "no registered notification call."] }, Variant { name: "Notified", fields: [Field { name: Some("query_id"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }, Field { name: Some("pallet_index"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("call_index"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }], index: 4, docs: ["Query response has been received and query is removed. The registered notification has", "been dispatched and executed successfully."] }, Variant { name: "NotifyOverweight", fields: [Field { name: Some("query_id"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }, Field { name: Some("pallet_index"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("call_index"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("actual_weight"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("max_budgeted_weight"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }], index: 5, docs: ["Query response has been received and query is removed. The registered notification", "could not be dispatched because the dispatch weight is greater than the maximum weight", "originally budgeted by this runtime for the query result."] }, Variant { name: "NotifyDispatchError", fields: [Field { name: Some("query_id"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }, Field { name: Some("pallet_index"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("call_index"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }], index: 6, docs: ["Query response has been received and query is removed. There was a general error with", "dispatching the notification call."] }, Variant { name: "NotifyDecodeFailed", fields: [Field { name: Some("query_id"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }, Field { name: Some("pallet_index"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("call_index"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }], index: 7, docs: ["Query response has been received and query is removed. The dispatch was unable to be", "decoded into a `Call`; this might be due to dispatch function having a signature which", "is not `(origin, QueryId, Response)`."] }, Variant { name: "InvalidResponder", fields: [Field { name: Some("origin"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("query_id"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }, Field { name: Some("expected_location"), ty: UntrackedSymbol { id: 385, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Location>"), docs: [] }], index: 8, docs: ["Expected query response has been received but the origin location of the response does", "not match that expected. The query remains registered for a later, valid, response to", "be received and acted upon."] }, Variant { name: "InvalidResponderVersion", fields: [Field { name: Some("origin"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("query_id"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }], index: 9, docs: ["Expected query response has been received but the expected origin location placed in", "storage by this runtime previously cannot be decoded. The query remains registered.", "", "This is unexpected (since a location placed in storage in a previously executing", "runtime should be readable prior to query timeout) and dangerous since the possibly", "valid response will be dropped. Manual governance intervention is probably going to be", "needed."] }, Variant { name: "ResponseTaken", fields: [Field { name: Some("query_id"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }], index: 10, docs: ["Received query response has been read and removed."] }, Variant { name: "AssetsTrapped", fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H256"), docs: [] }, Field { name: Some("origin"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("assets"), ty: UntrackedSymbol { id: 398, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VersionedAssets"), docs: [] }], index: 11, docs: ["Some assets have been placed in an asset trap."] }, Variant { name: "VersionChangeNotified", fields: [Field { name: Some("destination"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("result"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("XcmVersion"), docs: [] }, Field { name: Some("cost"), ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }, Field { name: Some("message_id"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("XcmHash"), docs: [] }], index: 12, docs: ["An XCM version change notification message has been attempted to be sent.", "", "The cost of sending it (borne by the chain) is included."] }, Variant { name: "SupportedVersionChanged", fields: [Field { name: Some("location"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("version"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("XcmVersion"), docs: [] }], index: 13, docs: ["The supported version of a location has been changed. This might be through an", "automatic notification or a manual intervention."] }, Variant { name: "NotifyTargetSendFail", fields: [Field { name: Some("location"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("query_id"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }, Field { name: Some("error"), ty: UntrackedSymbol { id: 380, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("XcmError"), docs: [] }], index: 14, docs: ["A given location which had a version change subscription was dropped owing to an error", "sending the notification to it."] }, Variant { name: "NotifyTargetMigrationFail", fields: [Field { name: Some("location"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VersionedLocation"), docs: [] }, Field { name: Some("query_id"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }], index: 15, docs: ["A given location which had a version change subscription was dropped owing to an error", "migrating the location to our new XCM format."] }, Variant { name: "InvalidQuerierVersion", fields: [Field { name: Some("origin"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("query_id"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }], index: 16, docs: ["Expected query response has been received but the expected querier location placed in", "storage by this runtime previously cannot be decoded. The query remains registered.", "", "This is unexpected (since a location placed in storage in a previously executing", "runtime should be readable prior to query timeout) and dangerous since the possibly", "valid response will be dropped. Manual governance intervention is probably going to be", "needed."] }, Variant { name: "InvalidQuerier", fields: [Field { name: Some("origin"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("query_id"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueryId"), docs: [] }, Field { name: Some("expected_querier"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("maybe_actual_querier"), ty: UntrackedSymbol { id: 385, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Location>"), docs: [] }], index: 17, docs: ["Expected query response has been received but the querier location of the response does", "not match the expected. The query remains registered for a later, valid, response to", "be received and acted upon."] }, Variant { name: "VersionNotifyStarted", fields: [Field { name: Some("destination"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("cost"), ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }, Field { name: Some("message_id"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("XcmHash"), docs: [] }], index: 18, docs: ["A remote has requested XCM version change notification from us and we have honored it.", "A version information message is sent to them and its cost is included."] }, Variant { name: "VersionNotifyRequested", fields: [Field { name: Some("destination"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("cost"), ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }, Field { name: Some("message_id"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("XcmHash"), docs: [] }], index: 19, docs: ["We have requested that a remote chain send us XCM version change notifications."] }, Variant { name: "VersionNotifyUnrequested", fields: [Field { name: Some("destination"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("cost"), ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }, Field { name: Some("message_id"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("XcmHash"), docs: [] }], index: 20, docs: ["We have requested that a remote chain stops sending us XCM version change", "notifications."] }, Variant { name: "FeesPaid", fields: [Field { name: Some("paying"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("fees"), ty: UntrackedSymbol { id: 372, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Assets"), docs: [] }], index: 21, docs: ["Fees were paid from a location for an operation (often for using `SendXcm`)."] }, Variant { name: "AssetsClaimed", fields: [Field { name: Some("hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H256"), docs: [] }, Field { name: Some("origin"), ty: UntrackedSymbol { id: 83, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Location"), docs: [] }, Field { name: Some("assets"), ty: UntrackedSymbol { id: 398, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VersionedAssets"), docs: [] }], index: 22, docs: ["Some assets have been claimed from an asset trap"] }, Variant { name: "VersionMigrationFinished", fields: [Field { name: Some("version"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("XcmVersion"), docs: [] }], index: 23, docs: ["A XCM version migration finished."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 487, ty: Type { path: Path { segments: ["staging_xcm", "v5", "traits", "Outcome"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Complete", fields: [Field { name: Some("used"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }], index: 0, docs: [] }, Variant { name: "Incomplete", fields: [Field { name: Some("used"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("error"), ty: UntrackedSymbol { id: 380, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Error"), docs: [] }], index: 1, docs: [] }, Variant { name: "Error", fields: [Field { name: Some("error"), ty: UntrackedSymbol { id: 380, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Error"), docs: [] }], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 488, ty: Type { path: Path { segments: ["polkadot_runtime_common", "identity_migrator", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "IdentityReaped", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }], index: 0, docs: ["The identity and all sub accounts were reaped for `who`."] }, Variant { name: "DepositUpdated", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("identity"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }, Field { name: Some("subs"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 1, docs: ["The deposits held for `who` were updated. `identity` is the new deposit held for", "identity info, and `subs` is the new deposit held for the sub-accounts."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 489, ty: Type { path: Path { segments: ["polkadot_runtime_common", "assigned_slots", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "PermanentSlotAssigned", fields: [Field { name: None, ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 0, docs: ["A parachain was assigned a permanent parachain slot"] }, Variant { name: "TemporarySlotAssigned", fields: [Field { name: None, ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 1, docs: ["A parachain was assigned a temporary parachain slot"] }, Variant { name: "MaxPermanentSlotsChanged", fields: [Field { name: Some("slots"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 2, docs: ["The maximum number of permanent slots has been changed"] }, Variant { name: "MaxTemporarySlotsChanged", fields: [Field { name: Some("slots"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 3, docs: ["The maximum number of temporary slots has been changed"] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 490, ty: Type { path: Path { segments: ["rococo_runtime", "validator_manager", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "ValidatorsRegistered", fields: [Field { name: None, ty: UntrackedSymbol { id: 124, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T::ValidatorId>"), docs: [] }], index: 0, docs: ["New validators were added to the set."] }, Variant { name: "ValidatorsDeregistered", fields: [Field { name: None, ty: UntrackedSymbol { id: 124, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T::ValidatorId>"), docs: [] }], index: 1, docs: ["Validators were removed from the set."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 491, ty: Type { path: Path { segments: ["pallet_state_trie_migration", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Migrated", fields: [Field { name: Some("top"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("child"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("compute"), ty: UntrackedSymbol { id: 492, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MigrationCompute"), docs: [] }], index: 0, docs: ["Given number of `(top, child)` keys were migrated respectively, with the given", "`compute`."] }, Variant { name: "Slashed", fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }], index: 1, docs: ["Some account got slashed by the given amount."] }, Variant { name: "AutoMigrationFinished", fields: [], index: 2, docs: ["The auto migration task finished."] }, Variant { name: "Halted", fields: [Field { name: Some("error"), ty: UntrackedSymbol { id: 493, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Error<T>"), docs: [] }], index: 3, docs: ["Migration got halted due to an error or miss-configuration."] }] }), docs: ["Inner events of this pallet."] } }, PortableType { id: 492, ty: Type { path: Path { segments: ["pallet_state_trie_migration", "pallet", "MigrationCompute"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Signed", fields: [], index: 0, docs: [] }, Variant { name: "Auto", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 493, ty: Type { path: Path { segments: ["pallet_state_trie_migration", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "MaxSignedLimits", fields: [], index: 0, docs: ["Max signed limits not respected."] }, Variant { name: "KeyTooLong", fields: [], index: 1, docs: ["A key was longer than the configured maximum.", "", "This means that the migration halted at the current [`Progress`] and", "can be resumed with a larger [`crate::Config::MaxKeyLen`] value.", "Retrying with the same [`crate::Config::MaxKeyLen`] value will not work.", "The value should only be increased to avoid a storage migration for the currently", "stored [`crate::Progress::LastKey`]."] }, Variant { name: "NotEnoughFunds", fields: [], index: 2, docs: ["submitter does not have enough funds."] }, Variant { name: "BadWitness", fields: [], index: 3, docs: ["Bad witness data provided."] }, Variant { name: "SignedMigrationNotAllowed", fields: [], index: 4, docs: ["Signed migration is not allowed because the maximum limit is not set yet."] }, Variant { name: "BadChildRoot", fields: [], index: 5, docs: ["Bad child root provided."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 494, ty: Type { path: Path { segments: ["pallet_root_testing", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "DefensiveTestCall", fields: [], index: 0, docs: ["Event dispatched when the trigger_defensive extrinsic is called."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 495, ty: Type { path: Path { segments: ["pallet_sudo", "pallet", "Event"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Sudid", fields: [Field { name: Some("sudo_result"), ty: UntrackedSymbol { id: 452, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResult"), docs: ["The result of the call made by the sudo user."] }], index: 0, docs: ["A sudo call just took place."] }, Variant { name: "KeyChanged", fields: [Field { name: Some("old"), ty: UntrackedSymbol { id: 175, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<T::AccountId>"), docs: ["The old sudo key (if one was previously set)."] }, Field { name: Some("new"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::AccountId"), docs: ["The new sudo key (if one was set)."] }], index: 1, docs: ["The sudo key has been updated."] }, Variant { name: "KeyRemoved", fields: [], index: 2, docs: ["The key was permanently removed."] }, Variant { name: "SudoAsDone", fields: [Field { name: Some("sudo_result"), ty: UntrackedSymbol { id: 452, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResult"), docs: ["The result of the call made by the sudo user."] }], index: 3, docs: ["A [sudo_as](Pallet::sudo_as) call just took place."] }] }), docs: ["The `Event` enum of this pallet"] } }, PortableType { id: 496, ty: Type { path: Path { segments: ["frame_system", "Phase"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "ApplyExtrinsic", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 0, docs: [] }, Variant { name: "Finalization", fields: [], index: 1, docs: [] }, Variant { name: "Initialization", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 497, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 498, ty: Type { path: Path { segments: ["frame_system", "LastRuntimeUpgradeInfo"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("spec_version"), ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("codec::Compact<u32>"), docs: [] }, Field { name: Some("spec_name"), ty: UntrackedSymbol { id: 499, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Cow<'static, str>"), docs: [] }] }), docs: [] } }, PortableType { id: 499, ty: Type { path: Path { segments: ["Cow"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 500, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 500, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }] }), docs: [] } }, PortableType { id: 500, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Primitive(Str), docs: [] } }, PortableType { id: 501, ty: Type { path: Path { segments: ["frame_system", "CodeUpgradeAuthorization"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("code_hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Hash"), docs: [] }, Field { name: Some("check_version"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }] }), docs: [] } }, PortableType { id: 502, ty: Type { path: Path { segments: ["frame_system", "limits", "BlockWeights"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("base_block"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("max_block"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("per_class"), ty: UntrackedSymbol { id: 503, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PerDispatchClass<WeightsPerClass>"), docs: [] }] }), docs: [] } }, PortableType { id: 503, ty: Type { path: Path { segments: ["frame_support", "dispatch", "PerDispatchClass"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 504, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("normal"), ty: UntrackedSymbol { id: 504, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }, Field { name: Some("operational"), ty: UntrackedSymbol { id: 504, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }, Field { name: Some("mandatory"), ty: UntrackedSymbol { id: 504, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }] }), docs: [] } }, PortableType { id: 504, ty: Type { path: Path { segments: ["frame_system", "limits", "WeightsPerClass"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("base_extrinsic"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("max_extrinsic"), ty: UntrackedSymbol { id: 386, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Weight>"), docs: [] }, Field { name: Some("max_total"), ty: UntrackedSymbol { id: 386, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Weight>"), docs: [] }, Field { name: Some("reserved"), ty: UntrackedSymbol { id: 386, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Weight>"), docs: [] }] }), docs: [] } }, PortableType { id: 505, ty: Type { path: Path { segments: ["frame_system", "limits", "BlockLength"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("max"), ty: UntrackedSymbol { id: 506, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PerDispatchClass<u32>"), docs: [] }] }), docs: [] } }, PortableType { id: 506, ty: Type { path: Path { segments: ["frame_support", "dispatch", "PerDispatchClass"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("normal"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }, Field { name: Some("operational"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }, Field { name: Some("mandatory"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T"), docs: [] }] }), docs: [] } }, PortableType { id: 507, ty: Type { path: Path { segments: ["sp_weights", "RuntimeDbWeight"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("read"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("write"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }] }), docs: [] } }, PortableType { id: 508, ty: Type { path: Path { segments: ["sp_version", "RuntimeVersion"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("spec_name"), ty: UntrackedSymbol { id: 499, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Cow<'static, str>"), docs: [] }, Field { name: Some("impl_name"), ty: UntrackedSymbol { id: 499, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Cow<'static, str>"), docs: [] }, Field { name: Some("authoring_version"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("spec_version"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("impl_version"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("apis"), ty: UntrackedSymbol { id: 509, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ApisVec"), docs: [] }, Field { name: Some("transaction_version"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("system_version"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }] }), docs: [] } }, PortableType { id: 509, ty: Type { path: Path { segments: ["Cow"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 510, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 510, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }] }), docs: [] } }, PortableType { id: 510, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 511, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 511, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 190, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 512, ty: Type { path: Path { segments: ["frame_system", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "InvalidSpecName", fields: [], index: 0, docs: ["The name of specification does not match between the current runtime", "and the new runtime."] }, Variant { name: "SpecVersionNeedsToIncrease", fields: [], index: 1, docs: ["The specification version is not allowed to decrease between the current runtime", "and the new runtime."] }, Variant { name: "FailedToExtractRuntimeVersion", fields: [], index: 2, docs: ["Failed to extract the runtime version from the new runtime.", "", "Either calling `Core_version` or decoding `RuntimeVersion` failed."] }, Variant { name: "NonDefaultComposite", fields: [], index: 3, docs: ["Suicide called when the account has non-default composite data."] }, Variant { name: "NonZeroRefCount", fields: [], index: 4, docs: ["There is a non-zero reference count preventing the account from being purged."] }, Variant { name: "CallFiltered", fields: [], index: 5, docs: ["The origin filter prevent the call to be dispatched."] }, Variant { name: "MultiBlockMigrationsOngoing", fields: [], index: 6, docs: ["A multi-block migration is ongoing and prevents the current code from being replaced."] }, Variant { name: "NothingAuthorized", fields: [], index: 7, docs: ["No upgrade authorized."] }, Variant { name: "Unauthorized", fields: [], index: 8, docs: ["The submitted code is not authorized."] }] }), docs: ["Error for the System pallet"] } }, PortableType { id: 513, ty: Type { path: Path { segments: ["bounded_collections", "weak_bounded_vec", "WeakBoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 514, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 515, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 514, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 112, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 515, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 514, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 516, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 517, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 517, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 518, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 519, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 519, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 519, ty: Type { path: Path { segments: ["sp_consensus_babe", "digests", "PreDigest"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Primary", fields: [Field { name: None, ty: UntrackedSymbol { id: 520, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PrimaryPreDigest"), docs: [] }], index: 1, docs: [] }, Variant { name: "SecondaryPlain", fields: [Field { name: None, ty: UntrackedSymbol { id: 522, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SecondaryPlainPreDigest"), docs: [] }], index: 2, docs: [] }, Variant { name: "SecondaryVRF", fields: [Field { name: None, ty: UntrackedSymbol { id: 523, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SecondaryVRFPreDigest"), docs: [] }], index: 3, docs: [] }] }), docs: [] } }, PortableType { id: 520, ty: Type { path: Path { segments: ["sp_consensus_babe", "digests", "PrimaryPreDigest"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("authority_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("super::AuthorityIndex"), docs: [] }, Field { name: Some("slot"), ty: UntrackedSymbol { id: 113, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Slot"), docs: [] }, Field { name: Some("vrf_signature"), ty: UntrackedSymbol { id: 521, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VrfSignature"), docs: [] }] }), docs: [] } }, PortableType { id: 521, ty: Type { path: Path { segments: ["sp_core", "sr25519", "vrf", "VrfSignature"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("pre_output"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VrfPreOutput"), docs: [] }, Field { name: Some("proof"), ty: UntrackedSymbol { id: 145, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VrfProof"), docs: [] }] }), docs: [] } }, PortableType { id: 522, ty: Type { path: Path { segments: ["sp_consensus_babe", "digests", "SecondaryPlainPreDigest"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("authority_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("super::AuthorityIndex"), docs: [] }, Field { name: Some("slot"), ty: UntrackedSymbol { id: 113, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Slot"), docs: [] }] }), docs: [] } }, PortableType { id: 523, ty: Type { path: Path { segments: ["sp_consensus_babe", "digests", "SecondaryVRFPreDigest"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("authority_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("super::AuthorityIndex"), docs: [] }, Field { name: Some("slot"), ty: UntrackedSymbol { id: 113, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Slot"), docs: [] }, Field { name: Some("vrf_signature"), ty: UntrackedSymbol { id: 521, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VrfSignature"), docs: [] }] }), docs: [] } }, PortableType { id: 524, ty: Type { path: Path { segments: ["sp_consensus_babe", "BabeEpochConfiguration"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("c"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("(u64, u64)"), docs: [] }, Field { name: Some("allowed_slots"), ty: UntrackedSymbol { id: 117, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AllowedSlots"), docs: [] }] }), docs: [] } }, PortableType { id: 525, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 526, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 527, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 526, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 527, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 526, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 528, ty: Type { path: Path { segments: ["pallet_babe", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "InvalidEquivocationProof", fields: [], index: 0, docs: ["An equivocation proof provided as part of an equivocation report is invalid."] }, Variant { name: "InvalidKeyOwnershipProof", fields: [], index: 1, docs: ["A key ownership proof provided as part of an equivocation report is invalid."] }, Variant { name: "DuplicateOffenceReport", fields: [], index: 2, docs: ["A given equivocation report is valid but already previously reported."] }, Variant { name: "InvalidConfiguration", fields: [], index: 3, docs: ["Submitted configuration is invalid."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 529, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 530, ty: Type { path: Path { segments: ["pallet_indices", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NotAssigned", fields: [], index: 0, docs: ["The index was not already assigned."] }, Variant { name: "NotOwner", fields: [], index: 1, docs: ["The index is assigned to another account."] }, Variant { name: "InUse", fields: [], index: 2, docs: ["The index was not available."] }, Variant { name: "NotTransfer", fields: [], index: 3, docs: ["The source and destination accounts are identical."] }, Variant { name: "Permanent", fields: [], index: 4, docs: ["The index is permanent and may not be freed/changed."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 531, ty: Type { path: Path { segments: ["bounded_collections", "weak_bounded_vec", "WeakBoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 532, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 534, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 532, ty: Type { path: Path { segments: ["pallet_balances", "types", "BalanceLock"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 190, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("LockIdentifier"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("reasons"), ty: UntrackedSymbol { id: 533, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Reasons"), docs: [] }] }), docs: [] } }, PortableType { id: 533, ty: Type { path: Path { segments: ["pallet_balances", "types", "Reasons"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Fee", fields: [], index: 0, docs: [] }, Variant { name: "Misc", fields: [], index: 1, docs: [] }, Variant { name: "All", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 534, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 532, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 535, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 536, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 537, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 536, ty: Type { path: Path { segments: ["pallet_balances", "types", "ReserveData"] }, type_params: [TypeParameter { name: "ReserveIdentifier", ty: Some(UntrackedSymbol { id: 190, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 190, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReserveIdentifier"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 537, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 536, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 538, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 539, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 544, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 539, ty: Type { path: Path { segments: ["frame_support", "traits", "tokens", "misc", "IdAmount"] }, type_params: [TypeParameter { name: "Id", ty: Some(UntrackedSymbol { id: 540, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 540, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Id"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 540, ty: Type { path: Path { segments: ["rococo_runtime", "RuntimeHoldReason"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Preimage", fields: [Field { name: None, ty: UntrackedSymbol { id: 541, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_preimage::HoldReason"), docs: [] }], index: 32, docs: [] }, Variant { name: "Nis", fields: [Field { name: None, ty: UntrackedSymbol { id: 542, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_nis::HoldReason"), docs: [] }], index: 38, docs: [] }, Variant { name: "StateTrieMigration", fields: [Field { name: None, ty: UntrackedSymbol { id: 543, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_state_trie_migration::HoldReason"), docs: [] }], index: 254, docs: [] }] }), docs: [] } }, PortableType { id: 541, ty: Type { path: Path { segments: ["pallet_preimage", "pallet", "HoldReason"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Preimage", fields: [], index: 0, docs: [] }] }), docs: [] } }, PortableType { id: 542, ty: Type { path: Path { segments: ["pallet_nis", "pallet", "HoldReason"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NftReceipt", fields: [], index: 0, docs: [] }] }), docs: [] } }, PortableType { id: 543, ty: Type { path: Path { segments: ["pallet_state_trie_migration", "pallet", "HoldReason"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "SlashForMigrate", fields: [], index: 0, docs: [] }] }), docs: [] } }, PortableType { id: 544, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 539, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 545, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 546, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 547, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 546, ty: Type { path: Path { segments: ["frame_support", "traits", "tokens", "misc", "IdAmount"] }, type_params: [TypeParameter { name: "Id", ty: Some(UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Id"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 547, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 546, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 548, ty: Type { path: Path { segments: ["pallet_balances", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "VestingBalance", fields: [], index: 0, docs: ["Vesting balance too high to send value."] }, Variant { name: "LiquidityRestrictions", fields: [], index: 1, docs: ["Account liquidity restrictions prevent withdrawal."] }, Variant { name: "InsufficientBalance", fields: [], index: 2, docs: ["Balance too low to send value."] }, Variant { name: "ExistentialDeposit", fields: [], index: 3, docs: ["Value too low to create account due to existential deposit."] }, Variant { name: "Expendability", fields: [], index: 4, docs: ["Transfer/payment would kill account."] }, Variant { name: "ExistingVestingSchedule", fields: [], index: 5, docs: ["A vesting schedule already exists for this account."] }, Variant { name: "DeadAccount", fields: [], index: 6, docs: ["Beneficiary account must pre-exist."] }, Variant { name: "TooManyReserves", fields: [], index: 7, docs: ["Number of named reserves exceed `MaxReserves`."] }, Variant { name: "TooManyHolds", fields: [], index: 8, docs: ["Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`."] }, Variant { name: "TooManyFreezes", fields: [], index: 9, docs: ["Number of freezes exceed `MaxFreezes`."] }, Variant { name: "IssuanceDeactivated", fields: [], index: 10, docs: ["The issuance cannot be modified since it is already deactivated."] }, Variant { name: "DeltaZero", fields: [], index: 11, docs: ["The delta cannot be zero."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 549, ty: Type { path: Path { segments: ["pallet_transaction_payment", "Releases"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "V1Ancient", fields: [], index: 0, docs: [] }, Variant { name: "V2", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 550, ty: Type { path: Path { segments: ["sp_staking", "offence", "OffenceDetails"] }, type_params: [TypeParameter { name: "Reporter", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Offender", ty: Some(UntrackedSymbol { id: 551, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("offender"), ty: UntrackedSymbol { id: 551, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Offender"), docs: [] }, Field { name: Some("reporters"), ty: UntrackedSymbol { id: 124, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Reporter>"), docs: [] }] }), docs: [] } }, PortableType { id: 551, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 552, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 50, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 553, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 554, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 555, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 555, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 133, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 556, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 557, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 558, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 558, ty: Type { path: Path { segments: ["sp_core", "crypto", "KeyTypeId"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 18, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 4]"), docs: [] }] }), docs: [] } }, PortableType { id: 559, ty: Type { path: Path { segments: ["pallet_session", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "InvalidProof", fields: [], index: 0, docs: ["Invalid ownership proof."] }, Variant { name: "NoAssociatedValidatorId", fields: [], index: 1, docs: ["No associated validator ID for account."] }, Variant { name: "DuplicatedKey", fields: [], index: 2, docs: ["Registered duplicate key."] }, Variant { name: "NoKeys", fields: [], index: 3, docs: ["No keys are associated with this account."] }, Variant { name: "NoAccount", fields: [], index: 4, docs: ["Key setting account is not live, so it's impossible to associate keys."] }] }), docs: ["Error for the session pallet."] } }, PortableType { id: 560, ty: Type { path: Path { segments: ["pallet_grandpa", "StoredState"] }, type_params: [TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Live", fields: [], index: 0, docs: [] }, Variant { name: "PendingPause", fields: [Field { name: Some("scheduled_at"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }, Field { name: Some("delay"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }], index: 1, docs: [] }, Variant { name: "Paused", fields: [], index: 2, docs: [] }, Variant { name: "PendingResume", fields: [Field { name: Some("scheduled_at"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }, Field { name: Some("delay"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }], index: 3, docs: [] }] }), docs: [] } }, PortableType { id: 561, ty: Type { path: Path { segments: ["pallet_grandpa", "StoredPendingChange"] }, type_params: [TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Limit", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("scheduled_at"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }, Field { name: Some("delay"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }, Field { name: Some("next_authorities"), ty: UntrackedSymbol { id: 562, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedAuthorityList<Limit>"), docs: [] }, Field { name: Some("forced"), ty: UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<N>"), docs: [] }] }), docs: [] } }, PortableType { id: 562, ty: Type { path: Path { segments: ["bounded_collections", "weak_bounded_vec", "WeakBoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 54, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 53, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 563, ty: Type { path: Path { segments: ["pallet_grandpa", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "PauseFailed", fields: [], index: 0, docs: ["Attempt to signal GRANDPA pause when the authority set isn't live", "(either paused or already pending pause)."] }, Variant { name: "ResumeFailed", fields: [], index: 1, docs: ["Attempt to signal GRANDPA resume when the authority set isn't paused", "(either live or already pending resume)."] }, Variant { name: "ChangePending", fields: [], index: 2, docs: ["Attempt to signal GRANDPA change with one already pending."] }, Variant { name: "TooSoon", fields: [], index: 3, docs: ["Cannot signal forced change so soon after last."] }, Variant { name: "InvalidKeyOwnershipProof", fields: [], index: 4, docs: ["A key ownership proof provided as part of an equivocation report is invalid."] }, Variant { name: "InvalidEquivocationProof", fields: [], index: 5, docs: ["An equivocation proof provided as part of an equivocation report is invalid."] }, Variant { name: "DuplicateOffenceReport", fields: [], index: 6, docs: ["A given equivocation report is valid but already previously reported."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 564, ty: Type { path: Path { segments: ["bounded_collections", "weak_bounded_vec", "WeakBoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 136, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 565, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 565, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 136, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 566, ty: Type { path: Path { segments: ["pallet_treasury", "Proposal"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("proposer"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("bond"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 567, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 556, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 568, ty: Type { path: Path { segments: ["pallet_treasury", "SpendStatus"] }, type_params: [TypeParameter { name: "AssetKind", ty: Some(UntrackedSymbol { id: 57, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "AssetBalance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Beneficiary", ty: Some(UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "PaymentId", ty: Some(UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("asset_kind"), ty: UntrackedSymbol { id: 57, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetKind"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AssetBalance"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Beneficiary"), docs: [] }, Field { name: Some("valid_from"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }, Field { name: Some("expire_at"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }, Field { name: Some("status"), ty: UntrackedSymbol { id: 569, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PaymentState<PaymentId>"), docs: [] }] }), docs: [] } }, PortableType { id: 569, ty: Type { path: Path { segments: ["pallet_treasury", "PaymentState"] }, type_params: [TypeParameter { name: "Id", ty: Some(UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Pending", fields: [], index: 0, docs: [] }, Variant { name: "Attempted", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Id"), docs: [] }], index: 1, docs: [] }, Variant { name: "Failed", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 570, ty: Type { path: Path { segments: ["sp_arithmetic", "per_things", "Permill"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 571, ty: Type { path: Path { segments: ["frame_support", "PalletId"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 190, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 8]"), docs: [] }] }), docs: [] } }, PortableType { id: 572, ty: Type { path: Path { segments: ["pallet_treasury", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "InvalidIndex", fields: [], index: 0, docs: ["No proposal, bounty or spend at that index."] }, Variant { name: "TooManyApprovals", fields: [], index: 1, docs: ["Too many approvals in the queue."] }, Variant { name: "InsufficientPermission", fields: [], index: 2, docs: ["The spend origin is valid but the amount it is allowed to spend is lower than the", "amount to be spent."] }, Variant { name: "ProposalNotApproved", fields: [], index: 3, docs: ["Proposal has not been approved."] }, Variant { name: "FailedToConvertBalance", fields: [], index: 4, docs: ["The balance of the asset kind is not convertible to the balance of the native asset."] }, Variant { name: "SpendExpired", fields: [], index: 5, docs: ["The spend has expired and cannot be claimed."] }, Variant { name: "EarlyPayout", fields: [], index: 6, docs: ["The spend is not yet eligible for payout."] }, Variant { name: "AlreadyAttempted", fields: [], index: 7, docs: ["The payment has already been attempted."] }, Variant { name: "PayoutError", fields: [], index: 8, docs: ["There was some issue with the mechanism of payment."] }, Variant { name: "NotAttempted", fields: [], index: 9, docs: ["The payout was not yet attempted/claimed."] }, Variant { name: "Inconclusive", fields: [], index: 10, docs: ["The payment has neither failed nor succeeded yet."] }] }), docs: ["Error for the treasury pallet."] } }, PortableType { id: 573, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 574, ty: Type { path: Path { segments: ["pallet_conviction_voting", "vote", "Voting"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "PollIndex", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "MaxVotes", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Casting", fields: [Field { name: None, ty: UntrackedSymbol { id: 575, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Casting<Balance, BlockNumber, PollIndex, MaxVotes>"), docs: [] }], index: 0, docs: [] }, Variant { name: "Delegating", fields: [Field { name: None, ty: UntrackedSymbol { id: 581, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Delegating<Balance, AccountId, BlockNumber>"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 575, ty: Type { path: Path { segments: ["pallet_conviction_voting", "vote", "Casting"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "PollIndex", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "MaxVotes", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("votes"), ty: UntrackedSymbol { id: 576, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<(PollIndex, AccountVote<Balance>), MaxVotes>"), docs: [] }, Field { name: Some("delegations"), ty: UntrackedSymbol { id: 579, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Delegations<Balance>"), docs: [] }, Field { name: Some("prior"), ty: UntrackedSymbol { id: 580, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PriorLock<BlockNumber, Balance>"), docs: [] }] }), docs: [] } }, PortableType { id: 576, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 577, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 578, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 577, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 99, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 578, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 577, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 579, ty: Type { path: Path { segments: ["pallet_conviction_voting", "types", "Delegations"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("votes"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("capital"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 580, ty: Type { path: Path { segments: ["pallet_conviction_voting", "vote", "PriorLock"] }, type_params: [TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 581, ty: Type { path: Path { segments: ["pallet_conviction_voting", "vote", "Delegating"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("balance"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("target"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("conviction"), ty: UntrackedSymbol { id: 153, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Conviction"), docs: [] }, Field { name: Some("delegations"), ty: UntrackedSymbol { id: 579, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Delegations<Balance>"), docs: [] }, Field { name: Some("prior"), ty: UntrackedSymbol { id: 580, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PriorLock<BlockNumber, Balance>"), docs: [] }] }), docs: [] } }, PortableType { id: 582, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 583, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 584, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 583, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 584, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 583, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 585, ty: Type { path: Path { segments: ["pallet_conviction_voting", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NotOngoing", fields: [], index: 0, docs: ["Poll is not ongoing."] }, Variant { name: "NotVoter", fields: [], index: 1, docs: ["The given account did not vote on the poll."] }, Variant { name: "NoPermission", fields: [], index: 2, docs: ["The actor has no permission to conduct the action."] }, Variant { name: "NoPermissionYet", fields: [], index: 3, docs: ["The actor has no permission to conduct the action right now but will do in the future."] }, Variant { name: "AlreadyDelegating", fields: [], index: 4, docs: ["The account is already delegating."] }, Variant { name: "AlreadyVoting", fields: [], index: 5, docs: ["The account currently has votes attached to it and the operation cannot succeed until", "these are removed through `remove_vote`."] }, Variant { name: "InsufficientFunds", fields: [], index: 6, docs: ["Too high a balance was provided that the account cannot afford."] }, Variant { name: "NotDelegating", fields: [], index: 7, docs: ["The account is not currently delegating."] }, Variant { name: "Nonsense", fields: [], index: 8, docs: ["Delegation to oneself makes no sense."] }, Variant { name: "MaxVotesReached", fields: [], index: 9, docs: ["Maximum number of votes reached."] }, Variant { name: "ClassNeeded", fields: [], index: 10, docs: ["The class must be supplied since it is not easily determinable from the state."] }, Variant { name: "BadClass", fields: [], index: 11, docs: ["The class ID supplied is invalid."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 586, ty: Type { path: Path { segments: ["pallet_referenda", "types", "ReferendumInfo"] }, type_params: [TypeParameter { name: "TrackId", ty: Some(UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "RuntimeOrigin", ty: Some(UntrackedSymbol { id: 156, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Moment", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Call", ty: Some(UntrackedSymbol { id: 103, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Tally", ty: Some(UntrackedSymbol { id: 441, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "ScheduleAddress", ty: Some(UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ongoing", fields: [Field { name: None, ty: UntrackedSymbol { id: 587, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumStatus<TrackId, RuntimeOrigin, Moment, Call, Balance, Tally,\nAccountId, ScheduleAddress,>"), docs: [] }], index: 0, docs: [] }, Variant { name: "Approved", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Moment"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 589, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Deposit<AccountId, Balance>>"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 589, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Deposit<AccountId, Balance>>"), docs: [] }], index: 1, docs: [] }, Variant { name: "Rejected", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Moment"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 589, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Deposit<AccountId, Balance>>"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 589, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Deposit<AccountId, Balance>>"), docs: [] }], index: 2, docs: [] }, Variant { name: "Cancelled", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Moment"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 589, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Deposit<AccountId, Balance>>"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 589, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Deposit<AccountId, Balance>>"), docs: [] }], index: 3, docs: [] }, Variant { name: "TimedOut", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Moment"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 589, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Deposit<AccountId, Balance>>"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 589, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Deposit<AccountId, Balance>>"), docs: [] }], index: 4, docs: [] }, Variant { name: "Killed", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Moment"), docs: [] }], index: 5, docs: [] }] }), docs: [] } }, PortableType { id: 587, ty: Type { path: Path { segments: ["pallet_referenda", "types", "ReferendumStatus"] }, type_params: [TypeParameter { name: "TrackId", ty: Some(UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "RuntimeOrigin", ty: Some(UntrackedSymbol { id: 156, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Moment", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Call", ty: Some(UntrackedSymbol { id: 103, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Tally", ty: Some(UntrackedSymbol { id: 441, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "ScheduleAddress", ty: Some(UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("track"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TrackId"), docs: [] }, Field { name: Some("origin"), ty: UntrackedSymbol { id: 156, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RuntimeOrigin"), docs: [] }, Field { name: Some("proposal"), ty: UntrackedSymbol { id: 103, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Call"), docs: [] }, Field { name: Some("enactment"), ty: UntrackedSymbol { id: 162, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchTime<Moment>"), docs: [] }, Field { name: Some("submitted"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Moment"), docs: [] }, Field { name: Some("submission_deposit"), ty: UntrackedSymbol { id: 588, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Deposit<AccountId, Balance>"), docs: [] }, Field { name: Some("decision_deposit"), ty: UntrackedSymbol { id: 589, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Deposit<AccountId, Balance>>"), docs: [] }, Field { name: Some("deciding"), ty: UntrackedSymbol { id: 590, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<DecidingStatus<Moment>>"), docs: [] }, Field { name: Some("tally"), ty: UntrackedSymbol { id: 441, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Tally"), docs: [] }, Field { name: Some("in_queue"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("alarm"), ty: UntrackedSymbol { id: 592, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<(Moment, ScheduleAddress)>"), docs: [] }] }), docs: [] } }, PortableType { id: 588, ty: Type { path: Path { segments: ["pallet_referenda", "types", "Deposit"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 589, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 588, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 588, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 590, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 591, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 591, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 591, ty: Type { path: Path { segments: ["pallet_referenda", "types", "DecidingStatus"] }, type_params: [TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("since"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }, Field { name: Some("confirming"), ty: UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<BlockNumber>"), docs: [] }] }), docs: [] } }, PortableType { id: 592, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 593, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 593, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 593, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 594, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 595, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 596, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 595, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 596, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 595, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 597, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 598, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 598, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 599, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 599, ty: Type { path: Path { segments: ["pallet_referenda", "types", "TrackInfo"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Moment", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("name"), ty: UntrackedSymbol { id: 500, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("&'static str"), docs: [] }, Field { name: Some("max_deciding"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("decision_deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("prepare_period"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Moment"), docs: [] }, Field { name: Some("decision_period"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Moment"), docs: [] }, Field { name: Some("confirm_period"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Moment"), docs: [] }, Field { name: Some("min_enactment_period"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Moment"), docs: [] }, Field { name: Some("min_approval"), ty: UntrackedSymbol { id: 600, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Curve"), docs: [] }, Field { name: Some("min_support"), ty: UntrackedSymbol { id: 600, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Curve"), docs: [] }] }), docs: [] } }, PortableType { id: 600, ty: Type { path: Path { segments: ["pallet_referenda", "types", "Curve"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "LinearDecreasing", fields: [Field { name: Some("length"), ty: UntrackedSymbol { id: 248, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Perbill"), docs: [] }, Field { name: Some("floor"), ty: UntrackedSymbol { id: 248, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Perbill"), docs: [] }, Field { name: Some("ceil"), ty: UntrackedSymbol { id: 248, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Perbill"), docs: [] }], index: 0, docs: [] }, Variant { name: "SteppedDecreasing", fields: [Field { name: Some("begin"), ty: UntrackedSymbol { id: 248, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Perbill"), docs: [] }, Field { name: Some("end"), ty: UntrackedSymbol { id: 248, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Perbill"), docs: [] }, Field { name: Some("step"), ty: UntrackedSymbol { id: 248, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Perbill"), docs: [] }, Field { name: Some("period"), ty: UntrackedSymbol { id: 248, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Perbill"), docs: [] }], index: 1, docs: [] }, Variant { name: "Reciprocal", fields: [Field { name: Some("factor"), ty: UntrackedSymbol { id: 601, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("FixedI64"), docs: [] }, Field { name: Some("x_offset"), ty: UntrackedSymbol { id: 601, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("FixedI64"), docs: [] }, Field { name: Some("y_offset"), ty: UntrackedSymbol { id: 601, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("FixedI64"), docs: [] }], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 601, ty: Type { path: Path { segments: ["sp_arithmetic", "fixed_point", "FixedI64"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 602, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("i64"), docs: [] }] }), docs: [] } }, PortableType { id: 602, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Primitive(I64), docs: [] } }, PortableType { id: 603, ty: Type { path: Path { segments: ["pallet_referenda", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NotOngoing", fields: [], index: 0, docs: ["Referendum is not ongoing."] }, Variant { name: "HasDeposit", fields: [], index: 1, docs: ["Referendum's decision deposit is already paid."] }, Variant { name: "BadTrack", fields: [], index: 2, docs: ["The track identifier given was invalid."] }, Variant { name: "Full", fields: [], index: 3, docs: ["There are already a full complement of referenda in progress for this track."] }, Variant { name: "QueueEmpty", fields: [], index: 4, docs: ["The queue of the track is empty."] }, Variant { name: "BadReferendum", fields: [], index: 5, docs: ["The referendum index provided is invalid in this context."] }, Variant { name: "NothingToDo", fields: [], index: 6, docs: ["There was nothing to do in the advancement."] }, Variant { name: "NoTrack", fields: [], index: 7, docs: ["No track exists for the proposal origin."] }, Variant { name: "Unfinished", fields: [], index: 8, docs: ["Any deposit cannot be refunded until after the decision is over."] }, Variant { name: "NoPermission", fields: [], index: 9, docs: ["The deposit refunder is not the depositor."] }, Variant { name: "NoDeposit", fields: [], index: 10, docs: ["The deposit cannot be refunded since none was made."] }, Variant { name: "BadStatus", fields: [], index: 11, docs: ["The referendum status is invalid for this operation."] }, Variant { name: "PreimageNotExist", fields: [], index: 12, docs: ["The preimage does not exist."] }, Variant { name: "PreimageStoredWithDifferentLength", fields: [], index: 13, docs: ["The preimage is stored with a different length than the one provided."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 604, ty: Type { path: Path { segments: ["pallet_ranked_collective", "MemberRecord"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("rank"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Rank"), docs: [] }] }), docs: [] } }, PortableType { id: 605, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 606, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 607, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 608, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 609, ty: Type { path: Path { segments: ["pallet_ranked_collective", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "AlreadyMember", fields: [], index: 0, docs: ["Account is already a member."] }, Variant { name: "NotMember", fields: [], index: 1, docs: ["Account is not a member."] }, Variant { name: "NotPolling", fields: [], index: 2, docs: ["The given poll index is unknown or has closed."] }, Variant { name: "Ongoing", fields: [], index: 3, docs: ["The given poll is still ongoing."] }, Variant { name: "NoneRemaining", fields: [], index: 4, docs: ["There are no further records to be removed."] }, Variant { name: "Corruption", fields: [], index: 5, docs: ["Unexpected error in state."] }, Variant { name: "RankTooLow", fields: [], index: 6, docs: ["The member's rank is too low to vote."] }, Variant { name: "InvalidWitness", fields: [], index: 7, docs: ["The information provided is incorrect."] }, Variant { name: "NoPermission", fields: [], index: 8, docs: ["The origin is not sufficiently privileged to do the operation."] }, Variant { name: "SameMember", fields: [], index: 9, docs: ["The new member to exchange is the same as the old member"] }, Variant { name: "TooManyMembers", fields: [], index: 10, docs: ["The max member count for the rank has been reached."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 610, ty: Type { path: Path { segments: ["pallet_referenda", "types", "ReferendumInfo"] }, type_params: [TypeParameter { name: "TrackId", ty: Some(UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "RuntimeOrigin", ty: Some(UntrackedSymbol { id: 156, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Moment", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Call", ty: Some(UntrackedSymbol { id: 103, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Tally", ty: Some(UntrackedSymbol { id: 444, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "ScheduleAddress", ty: Some(UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ongoing", fields: [Field { name: None, ty: UntrackedSymbol { id: 611, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReferendumStatus<TrackId, RuntimeOrigin, Moment, Call, Balance, Tally,\nAccountId, ScheduleAddress,>"), docs: [] }], index: 0, docs: [] }, Variant { name: "Approved", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Moment"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 589, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Deposit<AccountId, Balance>>"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 589, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Deposit<AccountId, Balance>>"), docs: [] }], index: 1, docs: [] }, Variant { name: "Rejected", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Moment"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 589, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Deposit<AccountId, Balance>>"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 589, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Deposit<AccountId, Balance>>"), docs: [] }], index: 2, docs: [] }, Variant { name: "Cancelled", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Moment"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 589, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Deposit<AccountId, Balance>>"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 589, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Deposit<AccountId, Balance>>"), docs: [] }], index: 3, docs: [] }, Variant { name: "TimedOut", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Moment"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 589, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Deposit<AccountId, Balance>>"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 589, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Deposit<AccountId, Balance>>"), docs: [] }], index: 4, docs: [] }, Variant { name: "Killed", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Moment"), docs: [] }], index: 5, docs: [] }] }), docs: [] } }, PortableType { id: 611, ty: Type { path: Path { segments: ["pallet_referenda", "types", "ReferendumStatus"] }, type_params: [TypeParameter { name: "TrackId", ty: Some(UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "RuntimeOrigin", ty: Some(UntrackedSymbol { id: 156, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Moment", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Call", ty: Some(UntrackedSymbol { id: 103, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Tally", ty: Some(UntrackedSymbol { id: 444, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "ScheduleAddress", ty: Some(UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("track"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TrackId"), docs: [] }, Field { name: Some("origin"), ty: UntrackedSymbol { id: 156, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RuntimeOrigin"), docs: [] }, Field { name: Some("proposal"), ty: UntrackedSymbol { id: 103, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Call"), docs: [] }, Field { name: Some("enactment"), ty: UntrackedSymbol { id: 162, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchTime<Moment>"), docs: [] }, Field { name: Some("submitted"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Moment"), docs: [] }, Field { name: Some("submission_deposit"), ty: UntrackedSymbol { id: 588, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Deposit<AccountId, Balance>"), docs: [] }, Field { name: Some("decision_deposit"), ty: UntrackedSymbol { id: 589, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Deposit<AccountId, Balance>>"), docs: [] }, Field { name: Some("deciding"), ty: UntrackedSymbol { id: 590, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<DecidingStatus<Moment>>"), docs: [] }, Field { name: Some("tally"), ty: UntrackedSymbol { id: 444, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Tally"), docs: [] }, Field { name: Some("in_queue"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("alarm"), ty: UntrackedSymbol { id: 592, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<(Moment, ScheduleAddress)>"), docs: [] }] }), docs: [] } }, PortableType { id: 612, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 497, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 613, ty: Type { path: Path { segments: ["pallet_referenda", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NotOngoing", fields: [], index: 0, docs: ["Referendum is not ongoing."] }, Variant { name: "HasDeposit", fields: [], index: 1, docs: ["Referendum's decision deposit is already paid."] }, Variant { name: "BadTrack", fields: [], index: 2, docs: ["The track identifier given was invalid."] }, Variant { name: "Full", fields: [], index: 3, docs: ["There are already a full complement of referenda in progress for this track."] }, Variant { name: "QueueEmpty", fields: [], index: 4, docs: ["The queue of the track is empty."] }, Variant { name: "BadReferendum", fields: [], index: 5, docs: ["The referendum index provided is invalid in this context."] }, Variant { name: "NothingToDo", fields: [], index: 6, docs: ["There was nothing to do in the advancement."] }, Variant { name: "NoTrack", fields: [], index: 7, docs: ["No track exists for the proposal origin."] }, Variant { name: "Unfinished", fields: [], index: 8, docs: ["Any deposit cannot be refunded until after the decision is over."] }, Variant { name: "NoPermission", fields: [], index: 9, docs: ["The deposit refunder is not the depositor."] }, Variant { name: "NoDeposit", fields: [], index: 10, docs: ["The deposit cannot be refunded since none was made."] }, Variant { name: "BadStatus", fields: [], index: 11, docs: ["The referendum status is invalid for this operation."] }, Variant { name: "PreimageNotExist", fields: [], index: 12, docs: ["The preimage does not exist."] }, Variant { name: "PreimageStoredWithDifferentLength", fields: [], index: 13, docs: ["The preimage is stored with a different length than the one provided."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 614, ty: Type { path: Path { segments: ["pallet_whitelist", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "UnavailablePreImage", fields: [], index: 0, docs: ["The preimage of the call hash could not be loaded."] }, Variant { name: "UndecodableCall", fields: [], index: 1, docs: ["The call could not be decoded."] }, Variant { name: "InvalidCallWeightWitness", fields: [], index: 2, docs: ["The weight of the decoded call was higher than the witness."] }, Variant { name: "CallIsNotWhitelisted", fields: [], index: 3, docs: ["The call was not whitelisted."] }, Variant { name: "CallAlreadyWhitelisted", fields: [], index: 4, docs: ["The call was already whitelisted; No-Op."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 615, ty: Type { path: Path { segments: ["polkadot_runtime_common", "claims", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "InvalidEthereumSignature", fields: [], index: 0, docs: ["Invalid Ethereum signature."] }, Variant { name: "SignerHasNoClaim", fields: [], index: 1, docs: ["Ethereum address has no claim."] }, Variant { name: "SenderHasNoClaim", fields: [], index: 2, docs: ["Account ID sending transaction has no claim."] }, Variant { name: "PotUnderflow", fields: [], index: 3, docs: ["There's not enough in the pot to pay out some unvested amount. Generally implies a", "logic error."] }, Variant { name: "InvalidStatement", fields: [], index: 4, docs: ["A needed statement was not included."] }, Variant { name: "VestedBalanceExists", fields: [], index: 5, docs: ["The account already has a vested balance."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 616, ty: Type { path: Path { segments: ["pallet_utility", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "TooManyCalls", fields: [], index: 0, docs: ["Too many calls batched."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 617, ty: Type { path: Path { segments: ["pallet_identity", "types", "Registration"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "MaxJudgements", ty: None }, TypeParameter { name: "IdentityInfo", ty: Some(UntrackedSymbol { id: 179, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("judgements"), ty: UntrackedSymbol { id: 618, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>"), docs: [] }, Field { name: Some("deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("info"), ty: UntrackedSymbol { id: 179, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("IdentityInfo"), docs: [] }] }), docs: [] } }, PortableType { id: 618, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 619, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 620, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 619, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 216, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 620, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 619, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 621, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 622, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 622, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 124, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 623, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 624, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 626, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 624, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 625, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 625, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 625, ty: Type { path: Path { segments: ["pallet_identity", "types", "RegistrarInfo"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "IdField", ty: Some(UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("account"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("fee"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("fields"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("IdField"), docs: [] }] }), docs: [] } }, PortableType { id: 626, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 624, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 627, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 628, ty: Type { path: Path { segments: ["pallet_identity", "types", "AuthorityProperties"] }, type_params: [TypeParameter { name: "Account", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("account_id"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Account"), docs: [] }, Field { name: Some("allocation"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Allocation"), docs: [] }] }), docs: [] } }, PortableType { id: 629, ty: Type { path: Path { segments: ["pallet_identity", "types", "UsernameInformation"] }, type_params: [TypeParameter { name: "Account", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("owner"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Account"), docs: [] }, Field { name: Some("provider"), ty: UntrackedSymbol { id: 630, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Provider<Balance>"), docs: [] }] }), docs: [] } }, PortableType { id: 630, ty: Type { path: Path { segments: ["pallet_identity", "types", "Provider"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Allocation", fields: [], index: 0, docs: [] }, Variant { name: "AuthorityDeposit", fields: [Field { name: None, ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }], index: 1, docs: [] }, Variant { name: "System", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 631, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 630, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 632, ty: Type { path: Path { segments: ["pallet_identity", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "TooManySubAccounts", fields: [], index: 0, docs: ["Too many subs-accounts."] }, Variant { name: "NotFound", fields: [], index: 1, docs: ["Account isn't found."] }, Variant { name: "NotNamed", fields: [], index: 2, docs: ["Account isn't named."] }, Variant { name: "EmptyIndex", fields: [], index: 3, docs: ["Empty index."] }, Variant { name: "FeeChanged", fields: [], index: 4, docs: ["Fee is changed."] }, Variant { name: "NoIdentity", fields: [], index: 5, docs: ["No identity found."] }, Variant { name: "StickyJudgement", fields: [], index: 6, docs: ["Sticky judgement."] }, Variant { name: "JudgementGiven", fields: [], index: 7, docs: ["Judgement given."] }, Variant { name: "InvalidJudgement", fields: [], index: 8, docs: ["Invalid judgement."] }, Variant { name: "InvalidIndex", fields: [], index: 9, docs: ["The index is invalid."] }, Variant { name: "InvalidTarget", fields: [], index: 10, docs: ["The target is invalid."] }, Variant { name: "TooManyRegistrars", fields: [], index: 11, docs: ["Maximum amount of registrars reached. Cannot add any more."] }, Variant { name: "AlreadyClaimed", fields: [], index: 12, docs: ["Account ID is already named."] }, Variant { name: "NotSub", fields: [], index: 13, docs: ["Sender is not a sub-account."] }, Variant { name: "NotOwned", fields: [], index: 14, docs: ["Sub-account isn't owned by sender."] }, Variant { name: "JudgementForDifferentIdentity", fields: [], index: 15, docs: ["The provided judgement was for a different identity."] }, Variant { name: "JudgementPaymentFailed", fields: [], index: 16, docs: ["Error that occurs when there is an issue paying for judgement."] }, Variant { name: "InvalidSuffix", fields: [], index: 17, docs: ["The provided suffix is too long."] }, Variant { name: "NotUsernameAuthority", fields: [], index: 18, docs: ["The sender does not have permission to issue a username."] }, Variant { name: "NoAllocation", fields: [], index: 19, docs: ["The authority cannot allocate any more usernames."] }, Variant { name: "InvalidSignature", fields: [], index: 20, docs: ["The signature on a username was not valid."] }, Variant { name: "RequiresSignature", fields: [], index: 21, docs: ["Setting this username requires a signature, but none was provided."] }, Variant { name: "InvalidUsername", fields: [], index: 22, docs: ["The username does not meet the requirements."] }, Variant { name: "UsernameTaken", fields: [], index: 23, docs: ["The username is already taken."] }, Variant { name: "NoUsername", fields: [], index: 24, docs: ["The requested username does not exist."] }, Variant { name: "NotExpired", fields: [], index: 25, docs: ["The username cannot be forcefully removed because it can still be accepted."] }, Variant { name: "TooEarly", fields: [], index: 26, docs: ["The username cannot be removed because it's still in the grace period."] }, Variant { name: "NotUnbinding", fields: [], index: 27, docs: ["The username cannot be removed because it is not unbinding."] }, Variant { name: "AlreadyUnbinding", fields: [], index: 28, docs: ["The username cannot be unbound because it is already unbinding."] }, Variant { name: "InsufficientPrivileges", fields: [], index: 29, docs: ["The action cannot be performed because of insufficient privileges (e.g. authority", "trying to unbind a username provided by the system)."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 633, ty: Type { path: Path { segments: ["pallet_society", "MemberRecord"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("rank"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Rank"), docs: [] }, Field { name: Some("strikes"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("StrikeCount"), docs: [] }, Field { name: Some("vouching"), ty: UntrackedSymbol { id: 634, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<VouchingStatus>"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 634, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 635, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 635, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 635, ty: Type { path: Path { segments: ["pallet_society", "VouchingStatus"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Vouching", fields: [], index: 0, docs: [] }, Variant { name: "Banned", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 636, ty: Type { path: Path { segments: ["pallet_society", "PayoutRecord"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "PayoutsVec", ty: Some(UntrackedSymbol { id: 637, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("paid"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("payouts"), ty: UntrackedSymbol { id: 637, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PayoutsVec"), docs: [] }] }), docs: [] } }, PortableType { id: 637, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 595, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 596, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 638, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 639, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 641, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 639, ty: Type { path: Path { segments: ["pallet_society", "Bid"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("kind"), ty: UntrackedSymbol { id: 640, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BidKind<AccountId, Balance>"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 640, ty: Type { path: Path { segments: ["pallet_society", "BidKind"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Deposit", fields: [Field { name: None, ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }], index: 0, docs: [] }, Variant { name: "Vouch", fields: [Field { name: None, ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 641, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 639, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 642, ty: Type { path: Path { segments: ["pallet_society", "Candidacy"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("round"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RoundIndex"), docs: [] }, Field { name: Some("kind"), ty: UntrackedSymbol { id: 640, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BidKind<AccountId, Balance>"), docs: [] }, Field { name: Some("bid"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("tally"), ty: UntrackedSymbol { id: 643, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Tally"), docs: [] }, Field { name: Some("skeptic_struck"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }] }), docs: [] } }, PortableType { id: 643, ty: Type { path: Path { segments: ["pallet_society", "Tally"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("approvals"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VoteCount"), docs: [] }, Field { name: Some("rejections"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VoteCount"), docs: [] }] }), docs: [] } }, PortableType { id: 644, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 645, ty: Type { path: Path { segments: ["pallet_society", "Vote"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("approve"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("weight"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 646, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 647, ty: Type { path: Path { segments: ["pallet_society", "IntakeRecord"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("bid"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("round"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("RoundIndex"), docs: [] }] }), docs: [] } }, PortableType { id: 648, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 643, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 649, ty: Type { path: Path { segments: ["pallet_society", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NotMember", fields: [], index: 0, docs: ["User is not a member."] }, Variant { name: "AlreadyMember", fields: [], index: 1, docs: ["User is already a member."] }, Variant { name: "Suspended", fields: [], index: 2, docs: ["User is suspended."] }, Variant { name: "NotSuspended", fields: [], index: 3, docs: ["User is not suspended."] }, Variant { name: "NoPayout", fields: [], index: 4, docs: ["Nothing to payout."] }, Variant { name: "AlreadyFounded", fields: [], index: 5, docs: ["Society already founded."] }, Variant { name: "InsufficientPot", fields: [], index: 6, docs: ["Not enough in pot to accept candidate."] }, Variant { name: "AlreadyVouching", fields: [], index: 7, docs: ["Member is already vouching or banned from vouching again."] }, Variant { name: "NotVouchingOnBidder", fields: [], index: 8, docs: ["Member is not vouching."] }, Variant { name: "Head", fields: [], index: 9, docs: ["Cannot remove the head of the chain."] }, Variant { name: "Founder", fields: [], index: 10, docs: ["Cannot remove the founder."] }, Variant { name: "AlreadyBid", fields: [], index: 11, docs: ["User has already made a bid."] }, Variant { name: "AlreadyCandidate", fields: [], index: 12, docs: ["User is already a candidate."] }, Variant { name: "NotCandidate", fields: [], index: 13, docs: ["User is not a candidate."] }, Variant { name: "MaxMembers", fields: [], index: 14, docs: ["Too many members in the society."] }, Variant { name: "NotFounder", fields: [], index: 15, docs: ["The caller is not the founder."] }, Variant { name: "NotHead", fields: [], index: 16, docs: ["The caller is not the head."] }, Variant { name: "NotApproved", fields: [], index: 17, docs: ["The membership cannot be claimed as the candidate was not clearly approved."] }, Variant { name: "NotRejected", fields: [], index: 18, docs: ["The candidate cannot be kicked as the candidate was not clearly rejected."] }, Variant { name: "Approved", fields: [], index: 19, docs: ["The candidacy cannot be dropped as the candidate was clearly approved."] }, Variant { name: "Rejected", fields: [], index: 20, docs: ["The candidacy cannot be bestowed as the candidate was clearly rejected."] }, Variant { name: "InProgress", fields: [], index: 21, docs: ["The candidacy cannot be concluded as the voting is still in progress."] }, Variant { name: "TooEarly", fields: [], index: 22, docs: ["The candidacy cannot be pruned until a full additional intake period has passed."] }, Variant { name: "Voted", fields: [], index: 23, docs: ["The skeptic already voted."] }, Variant { name: "Expired", fields: [], index: 24, docs: ["The skeptic need not vote on candidates from expired rounds."] }, Variant { name: "NotBidder", fields: [], index: 25, docs: ["User is not a bidder."] }, Variant { name: "NoDefender", fields: [], index: 26, docs: ["There is no defender currently."] }, Variant { name: "NotGroup", fields: [], index: 27, docs: ["Group doesn't exist."] }, Variant { name: "AlreadyElevated", fields: [], index: 28, docs: ["The member is already elevated to this rank."] }, Variant { name: "AlreadyPunished", fields: [], index: 29, docs: ["The skeptic has already been punished for this offence."] }, Variant { name: "InsufficientFunds", fields: [], index: 30, docs: ["Funds are insufficient to pay off society debts."] }, Variant { name: "NoVotes", fields: [], index: 31, docs: ["The candidate/defender has no stale votes to remove."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 650, ty: Type { path: Path { segments: ["pallet_recovery", "RecoveryConfig"] }, type_params: [TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Friends", ty: Some(UntrackedSymbol { id: 651, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("delay_period"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }, Field { name: Some("deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("friends"), ty: UntrackedSymbol { id: 651, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Friends"), docs: [] }, Field { name: Some("threshold"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u16"), docs: [] }] }), docs: [] } }, PortableType { id: 651, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 124, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 652, ty: Type { path: Path { segments: ["pallet_recovery", "ActiveRecovery"] }, type_params: [TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Friends", ty: Some(UntrackedSymbol { id: 651, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("created"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }, Field { name: Some("deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("friends"), ty: UntrackedSymbol { id: 651, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Friends"), docs: [] }] }), docs: [] } }, PortableType { id: 653, ty: Type { path: Path { segments: ["pallet_recovery", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NotAllowed", fields: [], index: 0, docs: ["User is not allowed to make a call on behalf of this account"] }, Variant { name: "ZeroThreshold", fields: [], index: 1, docs: ["Threshold must be greater than zero"] }, Variant { name: "NotEnoughFriends", fields: [], index: 2, docs: ["Friends list must be greater than zero and threshold"] }, Variant { name: "MaxFriends", fields: [], index: 3, docs: ["Friends list must be less than max friends"] }, Variant { name: "NotSorted", fields: [], index: 4, docs: ["Friends list must be sorted and free of duplicates"] }, Variant { name: "NotRecoverable", fields: [], index: 5, docs: ["This account is not set up for recovery"] }, Variant { name: "AlreadyRecoverable", fields: [], index: 6, docs: ["This account is already set up for recovery"] }, Variant { name: "AlreadyStarted", fields: [], index: 7, docs: ["A recovery process has already started for this account"] }, Variant { name: "NotStarted", fields: [], index: 8, docs: ["A recovery process has not started for this rescuer"] }, Variant { name: "NotFriend", fields: [], index: 9, docs: ["This account is not a friend who can vouch"] }, Variant { name: "DelayPeriod", fields: [], index: 10, docs: ["The friend must wait until the delay period to vouch for this recovery"] }, Variant { name: "AlreadyVouched", fields: [], index: 11, docs: ["This user has already vouched for this recovery"] }, Variant { name: "Threshold", fields: [], index: 12, docs: ["The threshold for recovering this account has not been met"] }, Variant { name: "StillActive", fields: [], index: 13, docs: ["There are still active recovery attempts that need to be closed"] }, Variant { name: "AlreadyProxy", fields: [], index: 14, docs: ["This account is already set up for recovery"] }, Variant { name: "BadState", fields: [], index: 15, docs: ["Some internal state is broken."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 654, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 223, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 655, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 655, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 223, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 656, ty: Type { path: Path { segments: ["pallet_vesting", "Releases"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "V0", fields: [], index: 0, docs: [] }, Variant { name: "V1", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 657, ty: Type { path: Path { segments: ["pallet_vesting", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NotVesting", fields: [], index: 0, docs: ["The account given is not vesting."] }, Variant { name: "AtMaxVestingSchedules", fields: [], index: 1, docs: ["The account already has `MaxVestingSchedules` count of schedules and thus", "cannot add another one. Consider merging existing schedules in order to add another."] }, Variant { name: "AmountLow", fields: [], index: 2, docs: ["Amount being transferred is too low to create a vesting schedule."] }, Variant { name: "ScheduleIndexOutOfBounds", fields: [], index: 3, docs: ["An index was out of bounds of the vesting schedules."] }, Variant { name: "InvalidScheduleParams", fields: [], index: 4, docs: ["Failed to create a new schedule because some parameter was invalid."] }] }), docs: ["Error for the vesting pallet."] } }, PortableType { id: 658, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 659, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 661, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 659, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 660, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 660, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 660, ty: Type { path: Path { segments: ["pallet_scheduler", "Scheduled"] }, type_params: [TypeParameter { name: "Name", ty: Some(UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Call", ty: Some(UntrackedSymbol { id: 103, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "PalletsOrigin", ty: Some(UntrackedSymbol { id: 156, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("maybe_id"), ty: UntrackedSymbol { id: 459, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Name>"), docs: [] }, Field { name: Some("priority"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("schedule::Priority"), docs: [] }, Field { name: Some("call"), ty: UntrackedSymbol { id: 103, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Call"), docs: [] }, Field { name: Some("maybe_periodic"), ty: UntrackedSymbol { id: 225, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<schedule::Period<BlockNumber>>"), docs: [] }, Field { name: Some("origin"), ty: UntrackedSymbol { id: 156, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PalletsOrigin"), docs: [] }] }), docs: [] } }, PortableType { id: 661, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 659, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 662, ty: Type { path: Path { segments: ["pallet_scheduler", "RetryConfig"] }, type_params: [TypeParameter { name: "Period", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("total_retries"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("remaining"), ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }, Field { name: Some("period"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Period"), docs: [] }] }), docs: [] } }, PortableType { id: 663, ty: Type { path: Path { segments: ["pallet_scheduler", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "FailedToSchedule", fields: [], index: 0, docs: ["Failed to schedule a call"] }, Variant { name: "NotFound", fields: [], index: 1, docs: ["Cannot find the scheduled call."] }, Variant { name: "TargetBlockNumberInPast", fields: [], index: 2, docs: ["Given target block number is in the past."] }, Variant { name: "RescheduleNoChange", fields: [], index: 3, docs: ["Reschedule failed because it does not change scheduled time."] }, Variant { name: "Named", fields: [], index: 4, docs: ["Attempt to use a non-named function on a named task."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 664, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 665, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 665, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 666, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 667, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 666, ty: Type { path: Path { segments: ["pallet_proxy", "ProxyDefinition"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "ProxyType", ty: Some(UntrackedSymbol { id: 229, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("delegate"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("proxy_type"), ty: UntrackedSymbol { id: 229, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ProxyType"), docs: [] }, Field { name: Some("delay"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }] }), docs: [] } }, PortableType { id: 667, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 666, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 668, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 669, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 669, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 670, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 671, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 670, ty: Type { path: Path { segments: ["pallet_proxy", "Announcement"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Hash", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("real"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("call_hash"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }, Field { name: Some("height"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }] }), docs: [] } }, PortableType { id: 671, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 670, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 672, ty: Type { path: Path { segments: ["pallet_proxy", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "TooMany", fields: [], index: 0, docs: ["There are too many proxies registered or too many announcements pending."] }, Variant { name: "NotFound", fields: [], index: 1, docs: ["Proxy registration not found."] }, Variant { name: "NotProxy", fields: [], index: 2, docs: ["Sender is not a proxy of the account to be proxied."] }, Variant { name: "Unproxyable", fields: [], index: 3, docs: ["A call which is incompatible with the proxy type's filter was attempted."] }, Variant { name: "Duplicate", fields: [], index: 4, docs: ["Account is already a proxy."] }, Variant { name: "NoPermission", fields: [], index: 5, docs: ["Call may not be made by proxy because it may escalate its privileges."] }, Variant { name: "Unannounced", fields: [], index: 6, docs: ["Announcement, if made at all, was made too recently."] }, Variant { name: "NoSelfProxy", fields: [], index: 7, docs: ["Cannot add self as proxy."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 673, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 674, ty: Type { path: Path { segments: ["pallet_multisig", "Multisig"] }, type_params: [TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "MaxApprovals", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("when"), ty: UntrackedSymbol { id: 232, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Timepoint<BlockNumber>"), docs: [] }, Field { name: Some("deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("depositor"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("approvals"), ty: UntrackedSymbol { id: 675, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<AccountId, MaxApprovals>"), docs: [] }] }), docs: [] } }, PortableType { id: 675, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 124, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 676, ty: Type { path: Path { segments: ["pallet_multisig", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "MinimumThreshold", fields: [], index: 0, docs: ["Threshold must be 2 or greater."] }, Variant { name: "AlreadyApproved", fields: [], index: 1, docs: ["Call is already approved by this signatory."] }, Variant { name: "NoApprovalsNeeded", fields: [], index: 2, docs: ["Call doesn't need any (more) approvals."] }, Variant { name: "TooFewSignatories", fields: [], index: 3, docs: ["There are too few signatories in the list."] }, Variant { name: "TooManySignatories", fields: [], index: 4, docs: ["There are too many signatories in the list."] }, Variant { name: "SignatoriesOutOfOrder", fields: [], index: 5, docs: ["The signatories were provided out of order; they should be ordered."] }, Variant { name: "SenderInSignatories", fields: [], index: 6, docs: ["The sender was contained in the other signatories; it shouldn't be."] }, Variant { name: "NotFound", fields: [], index: 7, docs: ["Multisig operation not found when attempting to cancel."] }, Variant { name: "NotOwner", fields: [], index: 8, docs: ["Only the account that originally created the multisig is able to cancel it."] }, Variant { name: "NoTimepoint", fields: [], index: 9, docs: ["No timepoint was given, yet the multisig operation is already underway."] }, Variant { name: "WrongTimepoint", fields: [], index: 10, docs: ["A different timepoint was given to the multisig operation that is underway."] }, Variant { name: "UnexpectedTimepoint", fields: [], index: 11, docs: ["A timepoint was given, yet no multisig operation is underway."] }, Variant { name: "MaxWeightTooLow", fields: [], index: 12, docs: ["The maximum weight information provided was too low."] }, Variant { name: "AlreadyStored", fields: [], index: 13, docs: ["The data to be stored is already stored."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 677, ty: Type { path: Path { segments: ["pallet_preimage", "OldRequestStatus"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Unrequested", fields: [Field { name: Some("deposit"), ty: UntrackedSymbol { id: 678, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("(AccountId, Balance)"), docs: [] }, Field { name: Some("len"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 0, docs: [] }, Variant { name: "Requested", fields: [Field { name: Some("deposit"), ty: UntrackedSymbol { id: 679, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<(AccountId, Balance)>"), docs: [] }, Field { name: Some("count"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("len"), ty: UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<u32>"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 678, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 679, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 678, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 678, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 680, ty: Type { path: Path { segments: ["pallet_preimage", "RequestStatus"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Ticket", ty: Some(UntrackedSymbol { id: 681, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Unrequested", fields: [Field { name: Some("ticket"), ty: UntrackedSymbol { id: 682, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("(AccountId, Ticket)"), docs: [] }, Field { name: Some("len"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 0, docs: [] }, Variant { name: "Requested", fields: [Field { name: Some("maybe_ticket"), ty: UntrackedSymbol { id: 683, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<(AccountId, Ticket)>"), docs: [] }, Field { name: Some("count"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("maybe_len"), ty: UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<u32>"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 681, ty: Type { path: Path { segments: ["frame_support", "traits", "tokens", "fungible", "HoldConsideration"] }, type_params: [TypeParameter { name: "A", ty: None }, TypeParameter { name: "F", ty: None }, TypeParameter { name: "R", ty: None }, TypeParameter { name: "D", ty: None }, TypeParameter { name: "Fp", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("F::Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 682, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 681, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 683, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 682, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 682, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 684, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 685, ty: Type { path: Path { segments: ["pallet_preimage", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "TooBig", fields: [], index: 0, docs: ["Preimage is too large to store on-chain."] }, Variant { name: "AlreadyNoted", fields: [], index: 1, docs: ["Preimage has already been noted on-chain."] }, Variant { name: "NotAuthorized", fields: [], index: 2, docs: ["The user is not authorized to perform this action."] }, Variant { name: "NotNoted", fields: [], index: 3, docs: ["The preimage cannot be removed since it has not yet been noted."] }, Variant { name: "Requested", fields: [], index: 4, docs: ["A preimage may not be removed when there are outstanding requests."] }, Variant { name: "NotRequested", fields: [], index: 5, docs: ["The preimage request cannot be removed since no outstanding requests exist."] }, Variant { name: "TooMany", fields: [], index: 6, docs: ["More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once."] }, Variant { name: "TooFew", fields: [], index: 7, docs: ["Too few hashes were requested to be upgraded (i.e. zero)."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 686, ty: Type { path: Path { segments: ["pallet_asset_rate", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "UnknownAssetKind", fields: [], index: 0, docs: ["The given asset ID is unknown."] }, Variant { name: "AlreadyExists", fields: [], index: 1, docs: ["The given asset ID already has an assigned conversion rate and cannot be re-created."] }, Variant { name: "Overflow", fields: [], index: 2, docs: ["Overflow ocurred when calculating the inverse rate."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 687, ty: Type { path: Path { segments: ["pallet_bounties", "Bounty"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("proposer"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("fee"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("curator_deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("bond"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("status"), ty: UntrackedSymbol { id: 688, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyStatus<AccountId, BlockNumber>"), docs: [] }] }), docs: [] } }, PortableType { id: 688, ty: Type { path: Path { segments: ["pallet_bounties", "BountyStatus"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Proposed", fields: [], index: 0, docs: [] }, Variant { name: "Approved", fields: [], index: 1, docs: [] }, Variant { name: "Funded", fields: [], index: 2, docs: [] }, Variant { name: "CuratorProposed", fields: [Field { name: Some("curator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }], index: 3, docs: [] }, Variant { name: "Active", fields: [Field { name: Some("curator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("update_due"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }], index: 4, docs: [] }, Variant { name: "PendingPayout", fields: [Field { name: Some("curator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("unlock_at"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }], index: 5, docs: [] }, Variant { name: "ApprovedWithCurator", fields: [Field { name: Some("curator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }], index: 6, docs: [] }] }), docs: [] } }, PortableType { id: 689, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 690, ty: Type { path: Path { segments: ["pallet_bounties", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "InsufficientProposersBalance", fields: [], index: 0, docs: ["Proposer's balance is too low."] }, Variant { name: "InvalidIndex", fields: [], index: 1, docs: ["No proposal or bounty at that index."] }, Variant { name: "ReasonTooBig", fields: [], index: 2, docs: ["The reason given is just too big."] }, Variant { name: "UnexpectedStatus", fields: [], index: 3, docs: ["The bounty status is unexpected."] }, Variant { name: "RequireCurator", fields: [], index: 4, docs: ["Require bounty curator."] }, Variant { name: "InvalidValue", fields: [], index: 5, docs: ["Invalid bounty value."] }, Variant { name: "InvalidFee", fields: [], index: 6, docs: ["Invalid bounty fee."] }, Variant { name: "PendingPayout", fields: [], index: 7, docs: ["A bounty payout is pending.", "To cancel the bounty, you must unassign and slash the curator."] }, Variant { name: "Premature", fields: [], index: 8, docs: ["The bounties cannot be claimed/closed because it's still in the countdown period."] }, Variant { name: "HasActiveChildBounty", fields: [], index: 9, docs: ["The bounty cannot be closed because it has active child bounties."] }, Variant { name: "TooManyQueued", fields: [], index: 10, docs: ["Too many approvals are already queued."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 691, ty: Type { path: Path { segments: ["pallet_child_bounties", "ChildBounty"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("parent_bounty"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BountyIndex"), docs: [] }, Field { name: Some("value"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("fee"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("curator_deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("status"), ty: UntrackedSymbol { id: 692, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ChildBountyStatus<AccountId, BlockNumber>"), docs: [] }] }), docs: [] } }, PortableType { id: 692, ty: Type { path: Path { segments: ["pallet_child_bounties", "ChildBountyStatus"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Added", fields: [], index: 0, docs: [] }, Variant { name: "CuratorProposed", fields: [Field { name: Some("curator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }], index: 1, docs: [] }, Variant { name: "Active", fields: [Field { name: Some("curator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }], index: 2, docs: [] }, Variant { name: "PendingPayout", fields: [Field { name: Some("curator"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("beneficiary"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("unlock_at"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }], index: 3, docs: [] }] }), docs: [] } }, PortableType { id: 693, ty: Type { path: Path { segments: ["pallet_child_bounties", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "ParentBountyNotActive", fields: [], index: 0, docs: ["The parent bounty is not in active state."] }, Variant { name: "InsufficientBountyBalance", fields: [], index: 1, docs: ["The bounty balance is not enough to add new child-bounty."] }, Variant { name: "TooManyChildBounties", fields: [], index: 2, docs: ["Number of child bounties exceeds limit `MaxActiveChildBountyCount`."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 694, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 595, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 596, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 695, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 696, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 697, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 696, ty: Type { path: Path { segments: ["pallet_nis", "pallet", "Bid"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("who"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }] }), docs: [] } }, PortableType { id: 697, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 696, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 698, ty: Type { path: Path { segments: ["pallet_nis", "pallet", "SummaryRecord"] }, type_params: [TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("proportion_owed"), ty: UntrackedSymbol { id: 46, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Perquintill"), docs: [] }, Field { name: Some("index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ReceiptIndex"), docs: [] }, Field { name: Some("thawed"), ty: UntrackedSymbol { id: 46, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Perquintill"), docs: [] }, Field { name: Some("last_period"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }, Field { name: Some("receipts_on_hold"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 699, ty: Type { path: Path { segments: ["pallet_nis", "pallet", "ReceiptRecord"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("proportion"), ty: UntrackedSymbol { id: 46, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Perquintill"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 679, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<(AccountId, Balance)>"), docs: [] }, Field { name: Some("expiry"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }] }), docs: [] } }, PortableType { id: 700, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 46, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 701, ty: Type { path: Path { segments: ["pallet_nis", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "DurationTooSmall", fields: [], index: 0, docs: ["The duration of the bid is less than one."] }, Variant { name: "DurationTooBig", fields: [], index: 1, docs: ["The duration is the bid is greater than the number of queues."] }, Variant { name: "AmountTooSmall", fields: [], index: 2, docs: ["The amount of the bid is less than the minimum allowed."] }, Variant { name: "BidTooLow", fields: [], index: 3, docs: ["The queue for the bid's duration is full and the amount bid is too low to get in", "through replacing an existing bid."] }, Variant { name: "UnknownReceipt", fields: [], index: 4, docs: ["Receipt index is unknown."] }, Variant { name: "NotOwner", fields: [], index: 5, docs: ["Not the owner of the receipt."] }, Variant { name: "NotExpired", fields: [], index: 6, docs: ["Bond not yet at expiry date."] }, Variant { name: "UnknownBid", fields: [], index: 7, docs: ["The given bid for retraction is not found."] }, Variant { name: "PortionTooBig", fields: [], index: 8, docs: ["The portion supplied is beyond the value of the receipt."] }, Variant { name: "Unfunded", fields: [], index: 9, docs: ["Not enough funds are held to pay out."] }, Variant { name: "AlreadyFunded", fields: [], index: 10, docs: ["There are enough funds for what is required."] }, Variant { name: "Throttled", fields: [], index: 11, docs: ["The thaw throttle has been reached for this period."] }, Variant { name: "MakesDust", fields: [], index: 12, docs: ["The operation would result in a receipt worth an insignificant value."] }, Variant { name: "AlreadyCommunal", fields: [], index: 13, docs: ["The receipt is already communal."] }, Variant { name: "AlreadyPrivate", fields: [], index: 14, docs: ["The receipt is already private."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 702, ty: Type { path: Path { segments: ["bounded_collections", "weak_bounded_vec", "WeakBoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 532, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 534, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 703, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 536, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 537, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 704, ty: Type { path: Path { segments: ["pallet_balances", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }, TypeParameter { name: "I", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "VestingBalance", fields: [], index: 0, docs: ["Vesting balance too high to send value."] }, Variant { name: "LiquidityRestrictions", fields: [], index: 1, docs: ["Account liquidity restrictions prevent withdrawal."] }, Variant { name: "InsufficientBalance", fields: [], index: 2, docs: ["Balance too low to send value."] }, Variant { name: "ExistentialDeposit", fields: [], index: 3, docs: ["Value too low to create account due to existential deposit."] }, Variant { name: "Expendability", fields: [], index: 4, docs: ["Transfer/payment would kill account."] }, Variant { name: "ExistingVestingSchedule", fields: [], index: 5, docs: ["A vesting schedule already exists for this account."] }, Variant { name: "DeadAccount", fields: [], index: 6, docs: ["Beneficiary account must pre-exist."] }, Variant { name: "TooManyReserves", fields: [], index: 7, docs: ["Number of named reserves exceed `MaxReserves`."] }, Variant { name: "TooManyHolds", fields: [], index: 8, docs: ["Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`."] }, Variant { name: "TooManyFreezes", fields: [], index: 9, docs: ["Number of freezes exceed `MaxFreezes`."] }, Variant { name: "IssuanceDeactivated", fields: [], index: 10, docs: ["The issuance cannot be modified since it is already deactivated."] }, Variant { name: "DeltaZero", fields: [], index: 11, docs: ["The delta cannot be zero."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 705, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "configuration", "HostConfiguration"] }, type_params: [TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("max_code_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_head_data_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_upward_queue_count"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_upward_queue_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_upward_message_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_upward_message_num_per_candidate"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("hrmp_max_message_num_per_candidate"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("validation_upgrade_cooldown"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }, Field { name: Some("validation_upgrade_delay"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }, Field { name: Some("async_backing_params"), ty: UntrackedSymbol { id: 242, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AsyncBackingParams"), docs: [] }, Field { name: Some("max_pov_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_downward_message_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("hrmp_max_parachain_outbound_channels"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("hrmp_sender_deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("hrmp_recipient_deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("hrmp_channel_max_capacity"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("hrmp_channel_max_total_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("hrmp_max_parachain_inbound_channels"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("hrmp_channel_max_message_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("executor_params"), ty: UntrackedSymbol { id: 243, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ExecutorParams"), docs: [] }, Field { name: Some("code_retention_period"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }, Field { name: Some("max_validators"), ty: UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<u32>"), docs: [] }, Field { name: Some("dispute_period"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SessionIndex"), docs: [] }, Field { name: Some("dispute_post_conclusion_acceptance_period"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }, Field { name: Some("no_show_slots"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("n_delay_tranches"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("zeroth_delay_tranche_width"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("needed_approvals"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("relay_vrf_modulo_samples"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("pvf_voting_ttl"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SessionIndex"), docs: [] }, Field { name: Some("minimum_validation_upgrade_delay"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }, Field { name: Some("minimum_backing_votes"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("node_features"), ty: UntrackedSymbol { id: 258, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("NodeFeatures"), docs: [] }, Field { name: Some("approval_voting_params"), ty: UntrackedSymbol { id: 249, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ApprovalVotingParams"), docs: [] }, Field { name: Some("scheduler_params"), ty: UntrackedSymbol { id: 250, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SchedulerParams<BlockNumber>"), docs: [] }] }), docs: [] } }, PortableType { id: 706, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 707, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 707, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 705, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 708, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "configuration", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "InvalidNewValue", fields: [], index: 0, docs: ["The new value for a configuration parameter is invalid."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 709, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 260, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 710, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 134, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 711, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "shared", "AllowedRelayParentsTracker"] }, type_params: [TypeParameter { name: "Hash", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("buffer"), ty: UntrackedSymbol { id: 712, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VecDeque<RelayParentInfo<Hash>>"), docs: [] }, Field { name: Some("latest_number"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }] }), docs: [] } }, PortableType { id: 712, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 713, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 713, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "shared", "RelayParentInfo"] }, type_params: [TypeParameter { name: "Hash", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("relay_parent"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }, Field { name: Some("state_root"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Hash"), docs: [] }, Field { name: Some("claim_queue"), ty: UntrackedSymbol { id: 714, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BTreeMap<Id, BTreeMap<u8, BTreeSet<CoreIndex>>>"), docs: [] }] }), docs: [] } }, PortableType { id: 714, ty: Type { path: Path { segments: ["BTreeMap"] }, type_params: [TypeParameter { name: "K", ty: Some(UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "V", ty: Some(UntrackedSymbol { id: 715, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 720, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }] }), docs: [] } }, PortableType { id: 715, ty: Type { path: Path { segments: ["BTreeMap"] }, type_params: [TypeParameter { name: "K", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "V", ty: Some(UntrackedSymbol { id: 716, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 718, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }] }), docs: [] } }, PortableType { id: 716, ty: Type { path: Path { segments: ["BTreeSet"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 470, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 717, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }] }), docs: [] } }, PortableType { id: 717, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 470, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 718, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 719, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 719, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 716, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 720, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 721, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 721, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 715, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 722, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 723, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 723, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "inclusion", "CandidatePendingAvailability"] }, type_params: [TypeParameter { name: "H", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("core"), ty: UntrackedSymbol { id: 470, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CoreIndex"), docs: [] }, Field { name: Some("hash"), ty: UntrackedSymbol { id: 280, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CandidateHash"), docs: [] }, Field { name: Some("descriptor"), ty: UntrackedSymbol { id: 265, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CandidateDescriptor<H>"), docs: [] }, Field { name: Some("commitments"), ty: UntrackedSymbol { id: 268, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CandidateCommitments"), docs: [] }, Field { name: Some("availability_votes"), ty: UntrackedSymbol { id: 258, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BitVec<u8, BitOrderLsb0>"), docs: [] }, Field { name: Some("backers"), ty: UntrackedSymbol { id: 258, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BitVec<u8, BitOrderLsb0>"), docs: [] }, Field { name: Some("relay_parent_number"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }, Field { name: Some("backed_in_number"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }, Field { name: Some("backing_group"), ty: UntrackedSymbol { id: 471, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("GroupIndex"), docs: [] }] }), docs: [] } }, PortableType { id: 724, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "inclusion", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "ValidatorIndexOutOfBounds", fields: [], index: 0, docs: ["Validator index out of bounds."] }, Variant { name: "UnscheduledCandidate", fields: [], index: 1, docs: ["Candidate submitted but para not scheduled."] }, Variant { name: "HeadDataTooLarge", fields: [], index: 2, docs: ["Head data exceeds the configured maximum."] }, Variant { name: "PrematureCodeUpgrade", fields: [], index: 3, docs: ["Code upgrade prematurely."] }, Variant { name: "NewCodeTooLarge", fields: [], index: 4, docs: ["Output code is too large"] }, Variant { name: "DisallowedRelayParent", fields: [], index: 5, docs: ["The candidate's relay-parent was not allowed. Either it was", "not recent enough or it didn't advance based on the last parachain block."] }, Variant { name: "InvalidAssignment", fields: [], index: 6, docs: ["Failed to compute group index for the core: either it's out of bounds", "or the relay parent doesn't belong to the current session."] }, Variant { name: "InvalidGroupIndex", fields: [], index: 7, docs: ["Invalid group index in core assignment."] }, Variant { name: "InsufficientBacking", fields: [], index: 8, docs: ["Insufficient (non-majority) backing."] }, Variant { name: "InvalidBacking", fields: [], index: 9, docs: ["Invalid (bad signature, unknown validator, etc.) backing."] }, Variant { name: "ValidationDataHashMismatch", fields: [], index: 10, docs: ["The validation data hash does not match expected."] }, Variant { name: "IncorrectDownwardMessageHandling", fields: [], index: 11, docs: ["The downward message queue is not processed correctly."] }, Variant { name: "InvalidUpwardMessages", fields: [], index: 12, docs: ["At least one upward message sent does not pass the acceptance criteria."] }, Variant { name: "HrmpWatermarkMishandling", fields: [], index: 13, docs: ["The candidate didn't follow the rules of HRMP watermark advancement."] }, Variant { name: "InvalidOutboundHrmp", fields: [], index: 14, docs: ["The HRMP messages sent by the candidate is not valid."] }, Variant { name: "InvalidValidationCodeHash", fields: [], index: 15, docs: ["The validation code hash of the candidate is not valid."] }, Variant { name: "ParaHeadMismatch", fields: [], index: 16, docs: ["The `para_head` hash in the candidate descriptor doesn't match the hash of the actual", "para head in the commitments."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 725, ty: Type { path: Path { segments: ["polkadot_primitives", "vstaging", "ScrapedOnChainVotes"] }, type_params: [TypeParameter { name: "H", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("session"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SessionIndex"), docs: [] }, Field { name: Some("backing_validators_per_candidate"), ty: UntrackedSymbol { id: 726, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<\n(CandidateReceiptV2<H>, Vec<(ValidatorIndex, ValidityAttestation)>)>"), docs: [] }, Field { name: Some("disputes"), ty: UntrackedSymbol { id: 278, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MultiDisputeStatementSet"), docs: [] }] }), docs: [] } }, PortableType { id: 726, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 727, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 727, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 469, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 728, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 728, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 729, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 729, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 260, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 277, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 730, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "paras_inherent", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "TooManyInclusionInherents", fields: [], index: 0, docs: ["Inclusion inherent called more than once per block."] }, Variant { name: "InvalidParentHeader", fields: [], index: 1, docs: ["The hash of the submitted parent header doesn't correspond to the saved block hash of", "the parent."] }, Variant { name: "InherentDataFilteredDuringExecution", fields: [], index: 2, docs: ["Inherent data was filtered during execution. This should have only been done", "during creation."] }, Variant { name: "UnscheduledCandidate", fields: [], index: 3, docs: ["Too many candidates supplied."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 731, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 709, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 732, ty: Type { path: Path { segments: ["BTreeMap"] }, type_params: [TypeParameter { name: "K", ty: Some(UntrackedSymbol { id: 470, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "V", ty: Some(UntrackedSymbol { id: 733, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 735, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }] }), docs: [] } }, PortableType { id: 733, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 734, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 734, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "scheduler", "common", "Assignment"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Pool", fields: [Field { name: Some("para_id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("core_index"), ty: UntrackedSymbol { id: 470, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CoreIndex"), docs: [] }], index: 0, docs: [] }, Variant { name: "Bulk", fields: [Field { name: None, ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 735, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 736, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 736, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 470, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 733, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 737, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "paras", "PvfCheckActiveVoteState"] }, type_params: [TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("votes_accept"), ty: UntrackedSymbol { id: 258, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BitVec<u8, BitOrderLsb0>"), docs: [] }, Field { name: Some("votes_reject"), ty: UntrackedSymbol { id: 258, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BitVec<u8, BitOrderLsb0>"), docs: [] }, Field { name: Some("age"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SessionIndex"), docs: [] }, Field { name: Some("created_at"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }, Field { name: Some("causes"), ty: UntrackedSymbol { id: 738, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<PvfCheckCause<BlockNumber>>"), docs: [] }] }), docs: [] } }, PortableType { id: 738, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 739, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 739, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "paras", "PvfCheckCause"] }, type_params: [TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Onboarding", fields: [Field { name: None, ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }], index: 0, docs: [] }, Variant { name: "Upgrade", fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("included_at"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }, Field { name: Some("upgrade_strategy"), ty: UntrackedSymbol { id: 740, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("UpgradeStrategy"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 740, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "paras", "UpgradeStrategy"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "SetGoAheadSignal", fields: [], index: 0, docs: [] }, Variant { name: "ApplyAtExpectedBlock", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 741, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 267, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 742, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 743, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "paras", "ParaLifecycle"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Onboarding", fields: [], index: 0, docs: [] }, Variant { name: "Parathread", fields: [], index: 1, docs: [] }, Variant { name: "Parachain", fields: [], index: 2, docs: [] }, Variant { name: "UpgradingParathread", fields: [], index: 3, docs: [] }, Variant { name: "DowngradingParachain", fields: [], index: 4, docs: [] }, Variant { name: "OffboardingParathread", fields: [], index: 5, docs: [] }, Variant { name: "OffboardingParachain", fields: [], index: 6, docs: [] }] }), docs: [] } }, PortableType { id: 744, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 745, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "paras", "ParaPastCodeMeta"] }, type_params: [TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("upgrade_times"), ty: UntrackedSymbol { id: 746, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<ReplacementTimes<N>>"), docs: [] }, Field { name: Some("last_pruned"), ty: UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<N>"), docs: [] }] }), docs: [] } }, PortableType { id: 746, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 747, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 747, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "paras", "ReplacementTimes"] }, type_params: [TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("expected_at"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }, Field { name: Some("activated_at"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }] }), docs: [] } }, PortableType { id: 748, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 744, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 749, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "UpgradeGoAhead"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Abort", fields: [], index: 0, docs: [] }, Variant { name: "GoAhead", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 750, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "UpgradeRestriction"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Present", fields: [], index: 0, docs: [] }] }), docs: [] } }, PortableType { id: 751, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "paras", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NotRegistered", fields: [], index: 0, docs: ["Para is not registered in our system."] }, Variant { name: "CannotOnboard", fields: [], index: 1, docs: ["Para cannot be onboarded because it is already tracked by our system."] }, Variant { name: "CannotOffboard", fields: [], index: 2, docs: ["Para cannot be offboarded at this time."] }, Variant { name: "CannotUpgrade", fields: [], index: 3, docs: ["Para cannot be upgraded to a lease holding parachain."] }, Variant { name: "CannotDowngrade", fields: [], index: 4, docs: ["Para cannot be downgraded to an on-demand parachain."] }, Variant { name: "PvfCheckStatementStale", fields: [], index: 5, docs: ["The statement for PVF pre-checking is stale."] }, Variant { name: "PvfCheckStatementFuture", fields: [], index: 6, docs: ["The statement for PVF pre-checking is for a future session."] }, Variant { name: "PvfCheckValidatorIndexOutOfBounds", fields: [], index: 7, docs: ["Claimed validator index is out of bounds."] }, Variant { name: "PvfCheckInvalidSignature", fields: [], index: 8, docs: ["The signature for the PVF pre-checking is invalid."] }, Variant { name: "PvfCheckDoubleVote", fields: [], index: 9, docs: ["The given validator already has cast a vote."] }, Variant { name: "PvfCheckSubjectInvalid", fields: [], index: 10, docs: ["The given PVF does not exist at the moment of process a vote."] }, Variant { name: "CannotUpgradeCode", fields: [], index: 11, docs: ["Parachain cannot currently schedule a code upgrade."] }, Variant { name: "InvalidCode", fields: [], index: 12, docs: ["Invalid validation code size."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 752, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 753, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 753, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "initializer", "BufferedSessionChange"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("validators"), ty: UntrackedSymbol { id: 710, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<ValidatorId>"), docs: [] }, Field { name: Some("queued"), ty: UntrackedSymbol { id: 710, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<ValidatorId>"), docs: [] }, Field { name: Some("session_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SessionIndex"), docs: [] }] }), docs: [] } }, PortableType { id: 754, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 755, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 755, ty: Type { path: Path { segments: ["polkadot_core_primitives", "InboundDownwardMessage"] }, type_params: [TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("sent_at"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }, Field { name: Some("msg"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DownwardMessage"), docs: [] }] }), docs: [] } }, PortableType { id: 756, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "hrmp", "HrmpOpenChannelRequest"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("confirmed"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("_age"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SessionIndex"), docs: [] }, Field { name: Some("sender_deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("max_message_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_capacity"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_total_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 757, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 291, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 758, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "hrmp", "HrmpChannel"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("max_capacity"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_total_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_message_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("msg_count"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("total_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("mqc_head"), ty: UntrackedSymbol { id: 163, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Hash>"), docs: [] }, Field { name: Some("sender_deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("recipient_deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 759, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 760, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 760, ty: Type { path: Path { segments: ["polkadot_core_primitives", "InboundHrmpMessage"] }, type_params: [TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("sent_at"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }, Field { name: Some("data"), ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("alloc::vec::Vec<u8>"), docs: [] }] }), docs: [] } }, PortableType { id: 761, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 762, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 762, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 742, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 763, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "hrmp", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "OpenHrmpChannelToSelf", fields: [], index: 0, docs: ["The sender tried to open a channel to themselves."] }, Variant { name: "OpenHrmpChannelInvalidRecipient", fields: [], index: 1, docs: ["The recipient is not a valid para."] }, Variant { name: "OpenHrmpChannelZeroCapacity", fields: [], index: 2, docs: ["The requested capacity is zero."] }, Variant { name: "OpenHrmpChannelCapacityExceedsLimit", fields: [], index: 3, docs: ["The requested capacity exceeds the global limit."] }, Variant { name: "OpenHrmpChannelZeroMessageSize", fields: [], index: 4, docs: ["The requested maximum message size is 0."] }, Variant { name: "OpenHrmpChannelMessageSizeExceedsLimit", fields: [], index: 5, docs: ["The open request requested the message size that exceeds the global limit."] }, Variant { name: "OpenHrmpChannelAlreadyExists", fields: [], index: 6, docs: ["The channel already exists"] }, Variant { name: "OpenHrmpChannelAlreadyRequested", fields: [], index: 7, docs: ["There is already a request to open the same channel."] }, Variant { name: "OpenHrmpChannelLimitExceeded", fields: [], index: 8, docs: ["The sender already has the maximum number of allowed outbound channels."] }, Variant { name: "AcceptHrmpChannelDoesntExist", fields: [], index: 9, docs: ["The channel from the sender to the origin doesn't exist."] }, Variant { name: "AcceptHrmpChannelAlreadyConfirmed", fields: [], index: 10, docs: ["The channel is already confirmed."] }, Variant { name: "AcceptHrmpChannelLimitExceeded", fields: [], index: 11, docs: ["The recipient already has the maximum number of allowed inbound channels."] }, Variant { name: "CloseHrmpChannelUnauthorized", fields: [], index: 12, docs: ["The origin tries to close a channel where it is neither the sender nor the recipient."] }, Variant { name: "CloseHrmpChannelDoesntExist", fields: [], index: 13, docs: ["The channel to be closed doesn't exist."] }, Variant { name: "CloseHrmpChannelAlreadyUnderway", fields: [], index: 14, docs: ["The channel close request is already requested."] }, Variant { name: "CancelHrmpOpenChannelUnauthorized", fields: [], index: 15, docs: ["Canceling is requested by neither the sender nor recipient of the open channel request."] }, Variant { name: "OpenHrmpChannelDoesntExist", fields: [], index: 16, docs: ["The open request doesn't exist."] }, Variant { name: "OpenHrmpChannelAlreadyConfirmed", fields: [], index: 17, docs: ["Cannot cancel an HRMP open channel request because it is already confirmed."] }, Variant { name: "WrongWitness", fields: [], index: 18, docs: ["The provided witness data is wrong."] }, Variant { name: "ChannelCreationNotAuthorized", fields: [], index: 19, docs: ["The channel between these two chains cannot be authorized."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 764, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 135, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 765, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "SessionInfo"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("active_validator_indices"), ty: UntrackedSymbol { id: 709, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<ValidatorIndex>"), docs: [] }, Field { name: Some("random_seed"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("[u8; 32]"), docs: [] }, Field { name: Some("dispute_period"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SessionIndex"), docs: [] }, Field { name: Some("validators"), ty: UntrackedSymbol { id: 766, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("IndexedVec<ValidatorIndex, ValidatorId>"), docs: [] }, Field { name: Some("discovery_keys"), ty: UntrackedSymbol { id: 565, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<AuthorityDiscoveryId>"), docs: [] }, Field { name: Some("assignment_keys"), ty: UntrackedSymbol { id: 764, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<AssignmentId>"), docs: [] }, Field { name: Some("validator_groups"), ty: UntrackedSymbol { id: 767, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("IndexedVec<GroupIndex, Vec<ValidatorIndex>>"), docs: [] }, Field { name: Some("n_cores"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("zeroth_delay_tranche_width"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("relay_vrf_modulo_samples"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("n_delay_tranches"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("no_show_slots"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("needed_approvals"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 766, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "IndexedVec"] }, type_params: [TypeParameter { name: "K", ty: Some(UntrackedSymbol { id: 260, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "V", ty: Some(UntrackedSymbol { id: 134, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 710, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<V>"), docs: [] }] }), docs: [] } }, PortableType { id: 767, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "IndexedVec"] }, type_params: [TypeParameter { name: "K", ty: Some(UntrackedSymbol { id: 471, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "V", ty: Some(UntrackedSymbol { id: 709, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 731, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<V>"), docs: [] }] }), docs: [] } }, PortableType { id: 768, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 280, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 769, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "DisputeState"] }, type_params: [TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("validators_for"), ty: UntrackedSymbol { id: 258, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BitVec<u8, bitvec::order::Lsb0>"), docs: [] }, Field { name: Some("validators_against"), ty: UntrackedSymbol { id: 258, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BitVec<u8, bitvec::order::Lsb0>"), docs: [] }, Field { name: Some("start"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }, Field { name: Some("concluded_at"), ty: UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<N>"), docs: [] }] }), docs: [] } }, PortableType { id: 770, ty: Type { path: Path { segments: ["BTreeSet"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 260, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 709, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }] }), docs: [] } }, PortableType { id: 771, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "disputes", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "DuplicateDisputeStatementSets", fields: [], index: 0, docs: ["Duplicate dispute statement sets provided."] }, Variant { name: "AncientDisputeStatement", fields: [], index: 1, docs: ["Ancient dispute statement provided."] }, Variant { name: "ValidatorIndexOutOfBounds", fields: [], index: 2, docs: ["Validator index on statement is out of bounds for session."] }, Variant { name: "InvalidSignature", fields: [], index: 3, docs: ["Invalid signature on statement."] }, Variant { name: "DuplicateStatement", fields: [], index: 4, docs: ["Validator vote submitted more than once to dispute."] }, Variant { name: "SingleSidedDispute", fields: [], index: 5, docs: ["A dispute where there are only votes on one side."] }, Variant { name: "MaliciousBacker", fields: [], index: 6, docs: ["A dispute vote from a malicious backer."] }, Variant { name: "MissingBackingVotes", fields: [], index: 7, docs: ["No backing votes were provides along dispute statements."] }, Variant { name: "UnconfirmedDispute", fields: [], index: 8, docs: ["Unconfirmed dispute statement sets provided."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 772, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "slashing", "PendingSlashes"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("keys"), ty: UntrackedSymbol { id: 773, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BTreeMap<ValidatorIndex, ValidatorId>"), docs: [] }, Field { name: Some("kind"), ty: UntrackedSymbol { id: 296, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("SlashingOffenceKind"), docs: [] }] }), docs: [] } }, PortableType { id: 773, ty: Type { path: Path { segments: ["BTreeMap"] }, type_params: [TypeParameter { name: "K", ty: Some(UntrackedSymbol { id: 260, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "V", ty: Some(UntrackedSymbol { id: 134, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 774, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }] }), docs: [] } }, PortableType { id: 774, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 775, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 775, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 260, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 134, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 776, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "disputes", "slashing", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "InvalidKeyOwnershipProof", fields: [], index: 0, docs: ["The key ownership proof is invalid."] }, Variant { name: "InvalidSessionIndex", fields: [], index: 1, docs: ["The session index is too old or invalid."] }, Variant { name: "InvalidCandidateHash", fields: [], index: 2, docs: ["The candidate hash is invalid."] }, Variant { name: "InvalidValidatorIndex", fields: [], index: 3, docs: ["There is no pending slash for the given validator index and time", "slot."] }, Variant { name: "ValidatorIndexIdMismatch", fields: [], index: 4, docs: ["The validator index does not match the validator id."] }, Variant { name: "DuplicateSlashingReport", fields: [], index: 5, docs: ["The given slashing report is valid but already previously reported."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 777, ty: Type { path: Path { segments: ["pallet_message_queue", "BookState"] }, type_params: [TypeParameter { name: "MessageOrigin", ty: Some(UntrackedSymbol { id: 298, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("begin"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PageIndex"), docs: [] }, Field { name: Some("end"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PageIndex"), docs: [] }, Field { name: Some("count"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PageIndex"), docs: [] }, Field { name: Some("ready_neighbours"), ty: UntrackedSymbol { id: 778, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Neighbours<MessageOrigin>>"), docs: [] }, Field { name: Some("message_count"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("size"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }] }), docs: [] } }, PortableType { id: 778, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 779, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 779, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 779, ty: Type { path: Path { segments: ["pallet_message_queue", "Neighbours"] }, type_params: [TypeParameter { name: "MessageOrigin", ty: Some(UntrackedSymbol { id: 298, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("prev"), ty: UntrackedSymbol { id: 298, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MessageOrigin"), docs: [] }, Field { name: Some("next"), ty: UntrackedSymbol { id: 298, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("MessageOrigin"), docs: [] }] }), docs: [] } }, PortableType { id: 780, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 298, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 781, ty: Type { path: Path { segments: ["pallet_message_queue", "Page"] }, type_params: [TypeParameter { name: "Size", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "HeapSize", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("remaining"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Size"), docs: [] }, Field { name: Some("remaining_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Size"), docs: [] }, Field { name: Some("first_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Size"), docs: [] }, Field { name: Some("first"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Size"), docs: [] }, Field { name: Some("last"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Size"), docs: [] }, Field { name: Some("heap"), ty: UntrackedSymbol { id: 782, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<u8, IntoU32<HeapSize, Size>>"), docs: [] }] }), docs: [] } }, PortableType { id: 782, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 783, ty: Type { path: Path { segments: ["pallet_message_queue", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NotReapable", fields: [], index: 0, docs: ["Page is not reapable because it has items remaining to be processed and is not old", "enough."] }, Variant { name: "NoPage", fields: [], index: 1, docs: ["Page to be reaped does not exist."] }, Variant { name: "NoMessage", fields: [], index: 2, docs: ["The referenced message could not be found."] }, Variant { name: "AlreadyProcessed", fields: [], index: 3, docs: ["The message was already processed and cannot be processed again."] }, Variant { name: "Queued", fields: [], index: 4, docs: ["The message is queued for future execution."] }, Variant { name: "InsufficientWeight", fields: [], index: 5, docs: ["There is temporarily not enough weight to continue servicing messages."] }, Variant { name: "TemporarilyUnprocessable", fields: [], index: 6, docs: ["This message is temporarily unprocessable.", "", "Such errors are expected, but not guaranteed, to resolve themselves eventually through", "retrying."] }, Variant { name: "QueuePaused", fields: [], index: 7, docs: ["The queue is paused and no message can be executed from it.", "", "This can change at any time and may resolve in the future by re-trying."] }, Variant { name: "RecursiveDisallowed", fields: [], index: 8, docs: ["Another call is in progress and needs to finish before this call can happen."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 784, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "on_demand", "types", "CoreAffinityCount"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("core_index"), ty: UntrackedSymbol { id: 470, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CoreIndex"), docs: [] }, Field { name: Some("count"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 785, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "on_demand", "types", "QueueStatusType"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("traffic"), ty: UntrackedSymbol { id: 236, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("FixedU128"), docs: [] }, Field { name: Some("next_index"), ty: UntrackedSymbol { id: 786, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueueIndex"), docs: [] }, Field { name: Some("smallest_index"), ty: UntrackedSymbol { id: 786, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueueIndex"), docs: [] }, Field { name: Some("freed_indices"), ty: UntrackedSymbol { id: 787, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BinaryHeap<ReverseQueueIndex>"), docs: [] }] }), docs: [] } }, PortableType { id: 786, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "on_demand", "types", "QueueIndex"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 787, ty: Type { path: Path { segments: ["BinaryHeap"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 788, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 789, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }] }), docs: [] } }, PortableType { id: 788, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "on_demand", "types", "ReverseQueueIndex"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 789, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 788, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 790, ty: Type { path: Path { segments: ["BinaryHeap"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 791, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 792, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }] }), docs: [] } }, PortableType { id: 791, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "on_demand", "types", "EnqueuedOrder"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("para_id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ParaId"), docs: [] }, Field { name: Some("idx"), ty: UntrackedSymbol { id: 786, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("QueueIndex"), docs: [] }] }), docs: [] } }, PortableType { id: 792, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 791, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 793, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 794, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 794, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 795, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "on_demand", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "QueueFull", fields: [], index: 0, docs: ["The order queue is full, `place_order` will not continue."] }, Variant { name: "SpotPriceHigherThanMaxAmount", fields: [], index: 1, docs: ["The current spot price is higher than the max amount specified in the `place_order`", "call, making it invalid."] }, Variant { name: "InsufficientCredits", fields: [], index: 2, docs: ["The account doesn't have enough credits to purchase on-demand coretime."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 796, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 470, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 797, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "assigner_coretime", "Schedule"] }, type_params: [TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("assignments"), ty: UntrackedSymbol { id: 309, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<(CoreAssignment, PartsOf57600)>"), docs: [] }, Field { name: Some("end_hint"), ty: UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<N>"), docs: [] }, Field { name: Some("next_schedule"), ty: UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<N>"), docs: [] }] }), docs: [] } }, PortableType { id: 798, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "assigner_coretime", "CoreDescriptor"] }, type_params: [TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("queue"), ty: UntrackedSymbol { id: 799, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<QueueDescriptor<N>>"), docs: [] }, Field { name: Some("current_work"), ty: UntrackedSymbol { id: 801, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<WorkState<N>>"), docs: [] }] }), docs: [] } }, PortableType { id: 799, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 800, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 800, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 800, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "assigner_coretime", "QueueDescriptor"] }, type_params: [TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("first"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }, Field { name: Some("last"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }] }), docs: [] } }, PortableType { id: 801, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 802, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 802, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 802, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "assigner_coretime", "WorkState"] }, type_params: [TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("assignments"), ty: UntrackedSymbol { id: 803, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<(CoreAssignment, AssignmentState)>"), docs: [] }, Field { name: Some("end_hint"), ty: UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<N>"), docs: [] }, Field { name: Some("pos"), ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u16"), docs: [] }, Field { name: Some("step"), ty: UntrackedSymbol { id: 312, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PartsOf57600"), docs: [] }] }), docs: [] } }, PortableType { id: 803, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 804, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 804, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 311, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 805, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 805, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "assigner_coretime", "AssignmentState"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("ratio"), ty: UntrackedSymbol { id: 312, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PartsOf57600"), docs: [] }, Field { name: Some("remaining"), ty: UntrackedSymbol { id: 312, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("PartsOf57600"), docs: [] }] }), docs: [] } }, PortableType { id: 806, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "assigner_coretime", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "AssignmentsEmpty", fields: [], index: 0, docs: [] }, Variant { name: "DisallowedInsert", fields: [], index: 1, docs: ["assign_core is only allowed to append new assignments at the end of already existing", "ones or update the last entry."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 807, ty: Type { path: Path { segments: ["polkadot_runtime_common", "paras_registrar", "ParaInfo"] }, type_params: [TypeParameter { name: "Account", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("manager"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Account"), docs: [] }, Field { name: Some("deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("locked"), ty: UntrackedSymbol { id: 808, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<bool>"), docs: [] }] }), docs: [] } }, PortableType { id: 808, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 809, ty: Type { path: Path { segments: ["polkadot_runtime_common", "paras_registrar", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NotRegistered", fields: [], index: 0, docs: ["The ID is not registered."] }, Variant { name: "AlreadyRegistered", fields: [], index: 1, docs: ["The ID is already registered."] }, Variant { name: "NotOwner", fields: [], index: 2, docs: ["The caller is not the owner of this Id."] }, Variant { name: "CodeTooLarge", fields: [], index: 3, docs: ["Invalid para code size."] }, Variant { name: "HeadDataTooLarge", fields: [], index: 4, docs: ["Invalid para head data size."] }, Variant { name: "NotParachain", fields: [], index: 5, docs: ["Para is not a Parachain."] }, Variant { name: "NotParathread", fields: [], index: 6, docs: ["Para is not a Parathread (on-demand parachain)."] }, Variant { name: "CannotDeregister", fields: [], index: 7, docs: ["Cannot deregister para"] }, Variant { name: "CannotDowngrade", fields: [], index: 8, docs: ["Cannot schedule downgrade of lease holding parachain to on-demand parachain"] }, Variant { name: "CannotUpgrade", fields: [], index: 9, docs: ["Cannot schedule upgrade of on-demand parachain to lease holding parachain"] }, Variant { name: "ParaLocked", fields: [], index: 10, docs: ["Para is locked from manipulation by the manager. Must use parachain or relay chain", "governance."] }, Variant { name: "NotReserved", fields: [], index: 11, docs: ["The ID given for registration has not been reserved."] }, Variant { name: "InvalidCode", fields: [], index: 12, docs: ["The validation code is invalid."] }, Variant { name: "CannotSwap", fields: [], index: 13, docs: ["Cannot perform a parachain slot / lifecycle swap. Check that the state of both paras", "are correct for the swap to work."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 810, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 679, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 811, ty: Type { path: Path { segments: ["polkadot_runtime_common", "slots", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "ParaNotOnboarding", fields: [], index: 0, docs: ["The parachain ID is not onboarding."] }, Variant { name: "LeaseError", fields: [], index: 1, docs: ["There was an error with the lease."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 812, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 813, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Array(TypeDefArray { len: 36, type_param: UntrackedSymbol { id: 814, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 814, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 815, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 815, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 815, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 816, ty: Type { path: Path { segments: ["polkadot_runtime_common", "auctions", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "AuctionInProgress", fields: [], index: 0, docs: ["This auction is already in progress."] }, Variant { name: "LeasePeriodInPast", fields: [], index: 1, docs: ["The lease period is in the past."] }, Variant { name: "ParaNotRegistered", fields: [], index: 2, docs: ["Para is not registered"] }, Variant { name: "NotCurrentAuction", fields: [], index: 3, docs: ["Not a current auction."] }, Variant { name: "NotAuction", fields: [], index: 4, docs: ["Not an auction."] }, Variant { name: "AuctionEnded", fields: [], index: 5, docs: ["Auction has already ended."] }, Variant { name: "AlreadyLeasedOut", fields: [], index: 6, docs: ["The para is already leased out for part of this range."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 817, ty: Type { path: Path { segments: ["polkadot_runtime_common", "crowdloan", "FundInfo"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "LeasePeriod", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("depositor"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("verifier"), ty: UntrackedSymbol { id: 306, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<MultiSigner>"), docs: [] }, Field { name: Some("deposit"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("raised"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("end"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }, Field { name: Some("cap"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("last_contribution"), ty: UntrackedSymbol { id: 818, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("LastContribution<BlockNumber>"), docs: [] }, Field { name: Some("first_period"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("LeasePeriod"), docs: [] }, Field { name: Some("last_period"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("LeasePeriod"), docs: [] }, Field { name: Some("fund_index"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("FundIndex"), docs: [] }] }), docs: [] } }, PortableType { id: 818, ty: Type { path: Path { segments: ["polkadot_runtime_common", "crowdloan", "LastContribution"] }, type_params: [TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Never", fields: [], index: 0, docs: [] }, Variant { name: "PreEnding", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }], index: 1, docs: [] }, Variant { name: "Ending", fields: [Field { name: None, ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 819, ty: Type { path: Path { segments: ["polkadot_runtime_common", "crowdloan", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "FirstPeriodInPast", fields: [], index: 0, docs: ["The current lease period is more than the first lease period."] }, Variant { name: "FirstPeriodTooFarInFuture", fields: [], index: 1, docs: ["The first lease period needs to at least be less than 3 `max_value`."] }, Variant { name: "LastPeriodBeforeFirstPeriod", fields: [], index: 2, docs: ["Last lease period must be greater than first lease period."] }, Variant { name: "LastPeriodTooFarInFuture", fields: [], index: 3, docs: ["The last lease period cannot be more than 3 periods after the first period."] }, Variant { name: "CannotEndInPast", fields: [], index: 4, docs: ["The campaign ends before the current block number. The end must be in the future."] }, Variant { name: "EndTooFarInFuture", fields: [], index: 5, docs: ["The end date for this crowdloan is not sensible."] }, Variant { name: "Overflow", fields: [], index: 6, docs: ["There was an overflow."] }, Variant { name: "ContributionTooSmall", fields: [], index: 7, docs: ["The contribution was below the minimum, `MinContribution`."] }, Variant { name: "InvalidParaId", fields: [], index: 8, docs: ["Invalid fund index."] }, Variant { name: "CapExceeded", fields: [], index: 9, docs: ["Contributions exceed maximum amount."] }, Variant { name: "ContributionPeriodOver", fields: [], index: 10, docs: ["The contribution period has already ended."] }, Variant { name: "InvalidOrigin", fields: [], index: 11, docs: ["The origin of this call is invalid."] }, Variant { name: "NotParachain", fields: [], index: 12, docs: ["This crowdloan does not correspond to a parachain."] }, Variant { name: "LeaseActive", fields: [], index: 13, docs: ["This parachain lease is still active and retirement cannot yet begin."] }, Variant { name: "BidOrLeaseActive", fields: [], index: 14, docs: ["This parachain's bid or lease is still active and withdraw cannot yet begin."] }, Variant { name: "FundNotEnded", fields: [], index: 15, docs: ["The crowdloan has not yet ended."] }, Variant { name: "NoContributions", fields: [], index: 16, docs: ["There are no contributions stored in this crowdloan."] }, Variant { name: "NotReadyToDissolve", fields: [], index: 17, docs: ["The crowdloan is not ready to dissolve. Potentially still has a slot or in retirement", "period."] }, Variant { name: "InvalidSignature", fields: [], index: 18, docs: ["Invalid signature."] }, Variant { name: "MemoTooLarge", fields: [], index: 19, docs: ["The provided memo is too large."] }, Variant { name: "AlreadyInNewRaise", fields: [], index: 20, docs: ["The fund is already in `NewRaise`"] }, Variant { name: "VrfDelayInProgress", fields: [], index: 21, docs: ["No contributions allowed during the VRF delay"] }, Variant { name: "NoLeasePeriod", fields: [], index: 22, docs: ["A lease period has not started yet, due to an offset in the starting block."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 820, ty: Type { path: Path { segments: ["polkadot_runtime_parachains", "coretime", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "NotBroker", fields: [], index: 0, docs: ["The paraid making the call is not the coretime brokerage system parachain."] }, Variant { name: "RequestedFutureRevenue", fields: [], index: 1, docs: ["Requested revenue information `when` parameter was in the future from the current", "block height."] }, Variant { name: "AssetTransferFailed", fields: [], index: 2, docs: ["Failed to transfer assets to the coretime chain"] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 821, ty: Type { path: Path { segments: ["pallet_migrations", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ongoing", fields: [], index: 0, docs: ["The operation cannot complete since some MBMs are ongoing."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 822, ty: Type { path: Path { segments: ["pallet_xcm", "pallet", "QueryStatus"] }, type_params: [TypeParameter { name: "BlockNumber", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Pending", fields: [Field { name: Some("responder"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VersionedLocation"), docs: [] }, Field { name: Some("maybe_match_querier"), ty: UntrackedSymbol { id: 823, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<VersionedLocation>"), docs: [] }, Field { name: Some("maybe_notify"), ty: UntrackedSymbol { id: 824, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<(u8, u8)>"), docs: [] }, Field { name: Some("timeout"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }], index: 0, docs: [] }, Variant { name: "VersionNotifier", fields: [Field { name: Some("origin"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VersionedLocation"), docs: [] }, Field { name: Some("is_active"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }], index: 1, docs: [] }, Variant { name: "Ready", fields: [Field { name: Some("response"), ty: UntrackedSymbol { id: 826, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VersionedResponse"), docs: [] }, Field { name: Some("at"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BlockNumber"), docs: [] }], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 823, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 824, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 825, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 825, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 825, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 826, ty: Type { path: Path { segments: ["xcm", "VersionedResponse"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "V3", fields: [Field { name: None, ty: UntrackedSymbol { id: 333, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("v3::Response"), docs: [] }], index: 3, docs: [] }, Variant { name: "V4", fields: [Field { name: None, ty: UntrackedSymbol { id: 359, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("v4::Response"), docs: [] }], index: 4, docs: [] }, Variant { name: "V5", fields: [Field { name: None, ty: UntrackedSymbol { id: 377, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("v5::Response"), docs: [] }], index: 5, docs: [] }] }), docs: [] } }, PortableType { id: 827, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 828, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 829, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 830, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 831, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 830, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 831, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 830, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 832, ty: Type { path: Path { segments: ["pallet_xcm", "pallet", "VersionMigrationStage"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "MigrateSupportedVersion", fields: [], index: 0, docs: [] }, Variant { name: "MigrateVersionNotifiers", fields: [], index: 1, docs: [] }, Variant { name: "NotifyCurrentTargets", fields: [Field { name: None, ty: UntrackedSymbol { id: 322, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<Vec<u8>>"), docs: [] }], index: 2, docs: [] }, Variant { name: "MigrateAndNotifyOldTargets", fields: [], index: 3, docs: [] }] }), docs: [] } }, PortableType { id: 833, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 411, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 834, ty: Type { path: Path { segments: ["pallet_xcm", "pallet", "RemoteLockedFungibleRecord"] }, type_params: [TypeParameter { name: "ConsumerIdentifier", ty: Some(UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "MaxConsumers", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("amount"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u128"), docs: [] }, Field { name: Some("owner"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VersionedLocation"), docs: [] }, Field { name: Some("locker"), ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VersionedLocation"), docs: [] }, Field { name: Some("consumers"), ty: UntrackedSymbol { id: 835, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BoundedVec<(ConsumerIdentifier, u128), MaxConsumers>"), docs: [] }] }), docs: [] } }, PortableType { id: 835, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 836, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 837, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 836, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 837, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 836, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 838, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 839, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 840, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 839, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 840, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 839, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 841, ty: Type { path: Path { segments: ["pallet_xcm", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Unreachable", fields: [], index: 0, docs: ["The desired destination was unreachable, generally because there is a no way of routing", "to it."] }, Variant { name: "SendFailure", fields: [], index: 1, docs: ["There was some other issue (i.e. not to do with routing) in sending the message.", "Perhaps a lack of space for buffering the message."] }, Variant { name: "Filtered", fields: [], index: 2, docs: ["The message execution fails the filter."] }, Variant { name: "UnweighableMessage", fields: [], index: 3, docs: ["The message's weight could not be determined."] }, Variant { name: "DestinationNotInvertible", fields: [], index: 4, docs: ["The destination `Location` provided cannot be inverted."] }, Variant { name: "Empty", fields: [], index: 5, docs: ["The assets to be sent are empty."] }, Variant { name: "CannotReanchor", fields: [], index: 6, docs: ["Could not re-anchor the assets to declare the fees for the destination chain."] }, Variant { name: "TooManyAssets", fields: [], index: 7, docs: ["Too many assets have been attempted for transfer."] }, Variant { name: "InvalidOrigin", fields: [], index: 8, docs: ["Origin is invalid for sending."] }, Variant { name: "BadVersion", fields: [], index: 9, docs: ["The version of the `Versioned` value used is not able to be interpreted."] }, Variant { name: "BadLocation", fields: [], index: 10, docs: ["The given location could not be used (e.g. because it cannot be expressed in the", "desired version of XCM)."] }, Variant { name: "NoSubscription", fields: [], index: 11, docs: ["The referenced subscription could not be found."] }, Variant { name: "AlreadySubscribed", fields: [], index: 12, docs: ["The location is invalid since it already has a subscription from us."] }, Variant { name: "CannotCheckOutTeleport", fields: [], index: 13, docs: ["Could not check-out the assets for teleportation to the destination chain."] }, Variant { name: "LowBalance", fields: [], index: 14, docs: ["The owner does not own (all) of the asset that they wish to do the operation on."] }, Variant { name: "TooManyLocks", fields: [], index: 15, docs: ["The asset owner has too many locks on the asset."] }, Variant { name: "AccountNotSovereign", fields: [], index: 16, docs: ["The given account is not an identifiable sovereign account for any location."] }, Variant { name: "FeesNotMet", fields: [], index: 17, docs: ["The operation required fees to be paid which the initiator could not meet."] }, Variant { name: "LockNotFound", fields: [], index: 18, docs: ["A remote lock with the corresponding data could not be found."] }, Variant { name: "InUse", fields: [], index: 19, docs: ["The unlock operation cannot succeed because there are still consumers of the lock."] }, Variant { name: "InvalidAssetUnknownReserve", fields: [], index: 21, docs: ["Invalid asset, reserve chain could not be determined for it."] }, Variant { name: "InvalidAssetUnsupportedReserve", fields: [], index: 22, docs: ["Invalid asset, do not support remote asset reserves with different fees reserves."] }, Variant { name: "TooManyReserves", fields: [], index: 23, docs: ["Too many assets with different reserve locations have been attempted for transfer."] }, Variant { name: "LocalExecutionIncomplete", fields: [], index: 24, docs: ["Local XCM execution incomplete."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 842, ty: Type { path: Path { segments: ["bounded_collections", "bounded_vec", "BoundedVec"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "S", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 843, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 843, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 844, ty: Type { path: Path { segments: ["pallet_beefy", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "InvalidKeyOwnershipProof", fields: [], index: 0, docs: ["A key ownership proof provided as part of an equivocation report is invalid."] }, Variant { name: "InvalidDoubleVotingProof", fields: [], index: 1, docs: ["A double voting proof provided as part of an equivocation report is invalid."] }, Variant { name: "InvalidForkVotingProof", fields: [], index: 2, docs: ["A fork voting proof provided as part of an equivocation report is invalid."] }, Variant { name: "InvalidFutureBlockVotingProof", fields: [], index: 3, docs: ["A future block voting proof provided as part of an equivocation report is invalid."] }, Variant { name: "InvalidEquivocationProofSession", fields: [], index: 4, docs: ["The session of the equivocation proof is invalid"] }, Variant { name: "DuplicateOffenceReport", fields: [], index: 5, docs: ["A given equivocation report is valid but already previously reported."] }, Variant { name: "InvalidConfiguration", fields: [], index: 6, docs: ["Submitted configuration is invalid."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 845, ty: Type { path: Path { segments: ["sp_consensus_beefy", "mmr", "BeefyAuthoritySet"] }, type_params: [TypeParameter { name: "AuthoritySetCommitment", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("id"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("crate::ValidatorSetId"), docs: [] }, Field { name: Some("len"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("keyset_commitment"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AuthoritySetCommitment"), docs: [] }] }), docs: [] } }, PortableType { id: 846, ty: Type { path: Path { segments: ["polkadot_runtime_common", "paras_sudo_wrapper", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "ParaDoesntExist", fields: [], index: 0, docs: ["The specified parachain is not registered."] }, Variant { name: "ParaAlreadyExists", fields: [], index: 1, docs: ["The specified parachain is already registered."] }, Variant { name: "ExceedsMaxMessageSize", fields: [], index: 2, docs: ["A DMP message couldn't be sent because it exceeds the maximum size allowed for a", "downward message."] }, Variant { name: "Unroutable", fields: [], index: 3, docs: ["A DMP message couldn't be sent because the destination is unreachable."] }, Variant { name: "CouldntCleanup", fields: [], index: 4, docs: ["Could not schedule para cleanup."] }, Variant { name: "NotParathread", fields: [], index: 5, docs: ["Not a parathread (on-demand parachain)."] }, Variant { name: "NotParachain", fields: [], index: 6, docs: ["Not a lease holding parachain."] }, Variant { name: "CannotUpgrade", fields: [], index: 7, docs: ["Cannot upgrade on-demand parachain to lease holding parachain."] }, Variant { name: "CannotDowngrade", fields: [], index: 8, docs: ["Cannot downgrade lease holding parachain to on-demand."] }, Variant { name: "TooManyCores", fields: [], index: 9, docs: ["There are more cores than supported by the runtime."] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 847, ty: Type { path: Path { segments: ["polkadot_runtime_common", "assigned_slots", "ParachainTemporarySlot"] }, type_params: [TypeParameter { name: "AccountId", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "LeasePeriod", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("manager"), ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AccountId"), docs: [] }, Field { name: Some("period_begin"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("LeasePeriod"), docs: [] }, Field { name: Some("period_count"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("LeasePeriod"), docs: [] }, Field { name: Some("last_lease"), ty: UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<LeasePeriod>"), docs: [] }, Field { name: Some("lease_count"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 848, ty: Type { path: Path { segments: ["polkadot_runtime_common", "assigned_slots", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "ParaDoesntExist", fields: [], index: 0, docs: ["The specified parachain is not registered."] }, Variant { name: "NotParathread", fields: [], index: 1, docs: ["Not a parathread (on-demand parachain)."] }, Variant { name: "CannotUpgrade", fields: [], index: 2, docs: ["Cannot upgrade on-demand parachain to lease holding", "parachain."] }, Variant { name: "CannotDowngrade", fields: [], index: 3, docs: ["Cannot downgrade lease holding parachain to", "on-demand."] }, Variant { name: "SlotAlreadyAssigned", fields: [], index: 4, docs: ["Permanent or Temporary slot already assigned."] }, Variant { name: "SlotNotAssigned", fields: [], index: 5, docs: ["Permanent or Temporary slot has not been assigned."] }, Variant { name: "OngoingLeaseExists", fields: [], index: 6, docs: ["An ongoing lease already exists."] }, Variant { name: "MaxPermanentSlotsExceeded", fields: [], index: 7, docs: [] }, Variant { name: "MaxTemporarySlotsExceeded", fields: [], index: 8, docs: [] }] }), docs: ["The `Error` enum of this pallet."] } }, PortableType { id: 849, ty: Type { path: Path { segments: ["pallet_sudo", "pallet", "Error"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "RequireSudo", fields: [], index: 0, docs: ["Sender must be the Sudo account."] }] }), docs: ["Error for the Sudo pallet."] } }, PortableType { id: 850, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 851, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 852, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 853, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 854, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 855, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 857, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 858, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 859, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 860, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 862, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 851, ty: Type { path: Path { segments: ["frame_system", "extensions", "check_non_zero_sender", "CheckNonZeroSender"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 852, ty: Type { path: Path { segments: ["frame_system", "extensions", "check_spec_version", "CheckSpecVersion"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 853, ty: Type { path: Path { segments: ["frame_system", "extensions", "check_tx_version", "CheckTxVersion"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 854, ty: Type { path: Path { segments: ["frame_system", "extensions", "check_genesis", "CheckGenesis"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 855, ty: Type { path: Path { segments: ["frame_system", "extensions", "check_mortality", "CheckMortality"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 856, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Era"), docs: [] }] }), docs: [] } }, PortableType { id: 856, ty: Type { path: Path { segments: ["sp_runtime", "generic", "era", "Era"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Immortal", fields: [], index: 0, docs: [] }, Variant { name: "Mortal1", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }, Variant { name: "Mortal2", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 2, docs: [] }, Variant { name: "Mortal3", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 3, docs: [] }, Variant { name: "Mortal4", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 4, docs: [] }, Variant { name: "Mortal5", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 5, docs: [] }, Variant { name: "Mortal6", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 6, docs: [] }, Variant { name: "Mortal7", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 7, docs: [] }, Variant { name: "Mortal8", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 8, docs: [] }, Variant { name: "Mortal9", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 9, docs: [] }, Variant { name: "Mortal10", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 10, docs: [] }, Variant { name: "Mortal11", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 11, docs: [] }, Variant { name: "Mortal12", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 12, docs: [] }, Variant { name: "Mortal13", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 13, docs: [] }, Variant { name: "Mortal14", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 14, docs: [] }, Variant { name: "Mortal15", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 15, docs: [] }, Variant { name: "Mortal16", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 16, docs: [] }, Variant { name: "Mortal17", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 17, docs: [] }, Variant { name: "Mortal18", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 18, docs: [] }, Variant { name: "Mortal19", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 19, docs: [] }, Variant { name: "Mortal20", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 20, docs: [] }, Variant { name: "Mortal21", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 21, docs: [] }, Variant { name: "Mortal22", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 22, docs: [] }, Variant { name: "Mortal23", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 23, docs: [] }, Variant { name: "Mortal24", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 24, docs: [] }, Variant { name: "Mortal25", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 25, docs: [] }, Variant { name: "Mortal26", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 26, docs: [] }, Variant { name: "Mortal27", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 27, docs: [] }, Variant { name: "Mortal28", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 28, docs: [] }, Variant { name: "Mortal29", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 29, docs: [] }, Variant { name: "Mortal30", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 30, docs: [] }, Variant { name: "Mortal31", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 31, docs: [] }, Variant { name: "Mortal32", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 32, docs: [] }, Variant { name: "Mortal33", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 33, docs: [] }, Variant { name: "Mortal34", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 34, docs: [] }, Variant { name: "Mortal35", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 35, docs: [] }, Variant { name: "Mortal36", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 36, docs: [] }, Variant { name: "Mortal37", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 37, docs: [] }, Variant { name: "Mortal38", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 38, docs: [] }, Variant { name: "Mortal39", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 39, docs: [] }, Variant { name: "Mortal40", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 40, docs: [] }, Variant { name: "Mortal41", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 41, docs: [] }, Variant { name: "Mortal42", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 42, docs: [] }, Variant { name: "Mortal43", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 43, docs: [] }, Variant { name: "Mortal44", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 44, docs: [] }, Variant { name: "Mortal45", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 45, docs: [] }, Variant { name: "Mortal46", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 46, docs: [] }, Variant { name: "Mortal47", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 47, docs: [] }, Variant { name: "Mortal48", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 48, docs: [] }, Variant { name: "Mortal49", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 49, docs: [] }, Variant { name: "Mortal50", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 50, docs: [] }, Variant { name: "Mortal51", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 51, docs: [] }, Variant { name: "Mortal52", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 52, docs: [] }, Variant { name: "Mortal53", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 53, docs: [] }, Variant { name: "Mortal54", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 54, docs: [] }, Variant { name: "Mortal55", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 55, docs: [] }, Variant { name: "Mortal56", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 56, docs: [] }, Variant { name: "Mortal57", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 57, docs: [] }, Variant { name: "Mortal58", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 58, docs: [] }, Variant { name: "Mortal59", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 59, docs: [] }, Variant { name: "Mortal60", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 60, docs: [] }, Variant { name: "Mortal61", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 61, docs: [] }, Variant { name: "Mortal62", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 62, docs: [] }, Variant { name: "Mortal63", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 63, docs: [] }, Variant { name: "Mortal64", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 64, docs: [] }, Variant { name: "Mortal65", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 65, docs: [] }, Variant { name: "Mortal66", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 66, docs: [] }, Variant { name: "Mortal67", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 67, docs: [] }, Variant { name: "Mortal68", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 68, docs: [] }, Variant { name: "Mortal69", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 69, docs: [] }, Variant { name: "Mortal70", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 70, docs: [] }, Variant { name: "Mortal71", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 71, docs: [] }, Variant { name: "Mortal72", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 72, docs: [] }, Variant { name: "Mortal73", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 73, docs: [] }, Variant { name: "Mortal74", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 74, docs: [] }, Variant { name: "Mortal75", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 75, docs: [] }, Variant { name: "Mortal76", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 76, docs: [] }, Variant { name: "Mortal77", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 77, docs: [] }, Variant { name: "Mortal78", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 78, docs: [] }, Variant { name: "Mortal79", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 79, docs: [] }, Variant { name: "Mortal80", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 80, docs: [] }, Variant { name: "Mortal81", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 81, docs: [] }, Variant { name: "Mortal82", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 82, docs: [] }, Variant { name: "Mortal83", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 83, docs: [] }, Variant { name: "Mortal84", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 84, docs: [] }, Variant { name: "Mortal85", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 85, docs: [] }, Variant { name: "Mortal86", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 86, docs: [] }, Variant { name: "Mortal87", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 87, docs: [] }, Variant { name: "Mortal88", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 88, docs: [] }, Variant { name: "Mortal89", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 89, docs: [] }, Variant { name: "Mortal90", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 90, docs: [] }, Variant { name: "Mortal91", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 91, docs: [] }, Variant { name: "Mortal92", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 92, docs: [] }, Variant { name: "Mortal93", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 93, docs: [] }, Variant { name: "Mortal94", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 94, docs: [] }, Variant { name: "Mortal95", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 95, docs: [] }, Variant { name: "Mortal96", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 96, docs: [] }, Variant { name: "Mortal97", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 97, docs: [] }, Variant { name: "Mortal98", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 98, docs: [] }, Variant { name: "Mortal99", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 99, docs: [] }, Variant { name: "Mortal100", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 100, docs: [] }, Variant { name: "Mortal101", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 101, docs: [] }, Variant { name: "Mortal102", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 102, docs: [] }, Variant { name: "Mortal103", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 103, docs: [] }, Variant { name: "Mortal104", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 104, docs: [] }, Variant { name: "Mortal105", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 105, docs: [] }, Variant { name: "Mortal106", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 106, docs: [] }, Variant { name: "Mortal107", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 107, docs: [] }, Variant { name: "Mortal108", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 108, docs: [] }, Variant { name: "Mortal109", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 109, docs: [] }, Variant { name: "Mortal110", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 110, docs: [] }, Variant { name: "Mortal111", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 111, docs: [] }, Variant { name: "Mortal112", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 112, docs: [] }, Variant { name: "Mortal113", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 113, docs: [] }, Variant { name: "Mortal114", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 114, docs: [] }, Variant { name: "Mortal115", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 115, docs: [] }, Variant { name: "Mortal116", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 116, docs: [] }, Variant { name: "Mortal117", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 117, docs: [] }, Variant { name: "Mortal118", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 118, docs: [] }, Variant { name: "Mortal119", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 119, docs: [] }, Variant { name: "Mortal120", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 120, docs: [] }, Variant { name: "Mortal121", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 121, docs: [] }, Variant { name: "Mortal122", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 122, docs: [] }, Variant { name: "Mortal123", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 123, docs: [] }, Variant { name: "Mortal124", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 124, docs: [] }, Variant { name: "Mortal125", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 125, docs: [] }, Variant { name: "Mortal126", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 126, docs: [] }, Variant { name: "Mortal127", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 127, docs: [] }, Variant { name: "Mortal128", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 128, docs: [] }, Variant { name: "Mortal129", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 129, docs: [] }, Variant { name: "Mortal130", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 130, docs: [] }, Variant { name: "Mortal131", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 131, docs: [] }, Variant { name: "Mortal132", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 132, docs: [] }, Variant { name: "Mortal133", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 133, docs: [] }, Variant { name: "Mortal134", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 134, docs: [] }, Variant { name: "Mortal135", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 135, docs: [] }, Variant { name: "Mortal136", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 136, docs: [] }, Variant { name: "Mortal137", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 137, docs: [] }, Variant { name: "Mortal138", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 138, docs: [] }, Variant { name: "Mortal139", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 139, docs: [] }, Variant { name: "Mortal140", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 140, docs: [] }, Variant { name: "Mortal141", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 141, docs: [] }, Variant { name: "Mortal142", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 142, docs: [] }, Variant { name: "Mortal143", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 143, docs: [] }, Variant { name: "Mortal144", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 144, docs: [] }, Variant { name: "Mortal145", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 145, docs: [] }, Variant { name: "Mortal146", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 146, docs: [] }, Variant { name: "Mortal147", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 147, docs: [] }, Variant { name: "Mortal148", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 148, docs: [] }, Variant { name: "Mortal149", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 149, docs: [] }, Variant { name: "Mortal150", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 150, docs: [] }, Variant { name: "Mortal151", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 151, docs: [] }, Variant { name: "Mortal152", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 152, docs: [] }, Variant { name: "Mortal153", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 153, docs: [] }, Variant { name: "Mortal154", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 154, docs: [] }, Variant { name: "Mortal155", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 155, docs: [] }, Variant { name: "Mortal156", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 156, docs: [] }, Variant { name: "Mortal157", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 157, docs: [] }, Variant { name: "Mortal158", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 158, docs: [] }, Variant { name: "Mortal159", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 159, docs: [] }, Variant { name: "Mortal160", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 160, docs: [] }, Variant { name: "Mortal161", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 161, docs: [] }, Variant { name: "Mortal162", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 162, docs: [] }, Variant { name: "Mortal163", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 163, docs: [] }, Variant { name: "Mortal164", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 164, docs: [] }, Variant { name: "Mortal165", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 165, docs: [] }, Variant { name: "Mortal166", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 166, docs: [] }, Variant { name: "Mortal167", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 167, docs: [] }, Variant { name: "Mortal168", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 168, docs: [] }, Variant { name: "Mortal169", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 169, docs: [] }, Variant { name: "Mortal170", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 170, docs: [] }, Variant { name: "Mortal171", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 171, docs: [] }, Variant { name: "Mortal172", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 172, docs: [] }, Variant { name: "Mortal173", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 173, docs: [] }, Variant { name: "Mortal174", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 174, docs: [] }, Variant { name: "Mortal175", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 175, docs: [] }, Variant { name: "Mortal176", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 176, docs: [] }, Variant { name: "Mortal177", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 177, docs: [] }, Variant { name: "Mortal178", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 178, docs: [] }, Variant { name: "Mortal179", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 179, docs: [] }, Variant { name: "Mortal180", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 180, docs: [] }, Variant { name: "Mortal181", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 181, docs: [] }, Variant { name: "Mortal182", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 182, docs: [] }, Variant { name: "Mortal183", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 183, docs: [] }, Variant { name: "Mortal184", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 184, docs: [] }, Variant { name: "Mortal185", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 185, docs: [] }, Variant { name: "Mortal186", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 186, docs: [] }, Variant { name: "Mortal187", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 187, docs: [] }, Variant { name: "Mortal188", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 188, docs: [] }, Variant { name: "Mortal189", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 189, docs: [] }, Variant { name: "Mortal190", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 190, docs: [] }, Variant { name: "Mortal191", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 191, docs: [] }, Variant { name: "Mortal192", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 192, docs: [] }, Variant { name: "Mortal193", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 193, docs: [] }, Variant { name: "Mortal194", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 194, docs: [] }, Variant { name: "Mortal195", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 195, docs: [] }, Variant { name: "Mortal196", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 196, docs: [] }, Variant { name: "Mortal197", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 197, docs: [] }, Variant { name: "Mortal198", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 198, docs: [] }, Variant { name: "Mortal199", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 199, docs: [] }, Variant { name: "Mortal200", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 200, docs: [] }, Variant { name: "Mortal201", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 201, docs: [] }, Variant { name: "Mortal202", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 202, docs: [] }, Variant { name: "Mortal203", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 203, docs: [] }, Variant { name: "Mortal204", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 204, docs: [] }, Variant { name: "Mortal205", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 205, docs: [] }, Variant { name: "Mortal206", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 206, docs: [] }, Variant { name: "Mortal207", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 207, docs: [] }, Variant { name: "Mortal208", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 208, docs: [] }, Variant { name: "Mortal209", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 209, docs: [] }, Variant { name: "Mortal210", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 210, docs: [] }, Variant { name: "Mortal211", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 211, docs: [] }, Variant { name: "Mortal212", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 212, docs: [] }, Variant { name: "Mortal213", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 213, docs: [] }, Variant { name: "Mortal214", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 214, docs: [] }, Variant { name: "Mortal215", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 215, docs: [] }, Variant { name: "Mortal216", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 216, docs: [] }, Variant { name: "Mortal217", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 217, docs: [] }, Variant { name: "Mortal218", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 218, docs: [] }, Variant { name: "Mortal219", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 219, docs: [] }, Variant { name: "Mortal220", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 220, docs: [] }, Variant { name: "Mortal221", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 221, docs: [] }, Variant { name: "Mortal222", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 222, docs: [] }, Variant { name: "Mortal223", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 223, docs: [] }, Variant { name: "Mortal224", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 224, docs: [] }, Variant { name: "Mortal225", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 225, docs: [] }, Variant { name: "Mortal226", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 226, docs: [] }, Variant { name: "Mortal227", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 227, docs: [] }, Variant { name: "Mortal228", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 228, docs: [] }, Variant { name: "Mortal229", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 229, docs: [] }, Variant { name: "Mortal230", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 230, docs: [] }, Variant { name: "Mortal231", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 231, docs: [] }, Variant { name: "Mortal232", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 232, docs: [] }, Variant { name: "Mortal233", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 233, docs: [] }, Variant { name: "Mortal234", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 234, docs: [] }, Variant { name: "Mortal235", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 235, docs: [] }, Variant { name: "Mortal236", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 236, docs: [] }, Variant { name: "Mortal237", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 237, docs: [] }, Variant { name: "Mortal238", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 238, docs: [] }, Variant { name: "Mortal239", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 239, docs: [] }, Variant { name: "Mortal240", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 240, docs: [] }, Variant { name: "Mortal241", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 241, docs: [] }, Variant { name: "Mortal242", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 242, docs: [] }, Variant { name: "Mortal243", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 243, docs: [] }, Variant { name: "Mortal244", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 244, docs: [] }, Variant { name: "Mortal245", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 245, docs: [] }, Variant { name: "Mortal246", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 246, docs: [] }, Variant { name: "Mortal247", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 247, docs: [] }, Variant { name: "Mortal248", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 248, docs: [] }, Variant { name: "Mortal249", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 249, docs: [] }, Variant { name: "Mortal250", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 250, docs: [] }, Variant { name: "Mortal251", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 251, docs: [] }, Variant { name: "Mortal252", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 252, docs: [] }, Variant { name: "Mortal253", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 253, docs: [] }, Variant { name: "Mortal254", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 254, docs: [] }, Variant { name: "Mortal255", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 255, docs: [] }] }), docs: [] } }, PortableType { id: 857, ty: Type { path: Path { segments: ["frame_system", "extensions", "check_nonce", "CheckNonce"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 61, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("T::Nonce"), docs: [] }] }), docs: [] } }, PortableType { id: 858, ty: Type { path: Path { segments: ["frame_system", "extensions", "check_weight", "CheckWeight"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 859, ty: Type { path: Path { segments: ["pallet_transaction_payment", "ChargeTransactionPayment"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 65, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BalanceOf<T>"), docs: [] }] }), docs: [] } }, PortableType { id: 860, ty: Type { path: Path { segments: ["frame_metadata_hash_extension", "CheckMetadataHash"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("mode"), ty: UntrackedSymbol { id: 861, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Mode"), docs: [] }] }), docs: [] } }, PortableType { id: 861, ty: Type { path: Path { segments: ["frame_metadata_hash_extension", "Mode"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Disabled", fields: [], index: 0, docs: [] }, Variant { name: "Enabled", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 862, ty: Type { path: Path { segments: ["frame_system", "extensions", "weight_reclaim", "WeightReclaim"] }, type_params: [TypeParameter { name: "T", ty: None }], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 863, ty: Type { path: Path { segments: ["rococo_runtime", "Runtime"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [] }), docs: [] } }, PortableType { id: 864, ty: Type { path: Path { segments: ["sp_runtime", "generic", "block", "Block"] }, type_params: [TypeParameter { name: "Header", ty: Some(UntrackedSymbol { id: 111, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Extrinsic", ty: Some(UntrackedSymbol { id: 865, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("header"), ty: UntrackedSymbol { id: 111, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Header"), docs: [] }, Field { name: Some("extrinsics"), ty: UntrackedSymbol { id: 866, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Extrinsic>"), docs: [] }] }), docs: [] } }, PortableType { id: 865, ty: Type { path: Path { segments: ["sp_runtime", "generic", "unchecked_extrinsic", "UncheckedExtrinsic"] }, type_params: [TypeParameter { name: "Address", ty: Some(UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Call", ty: Some(UntrackedSymbol { id: 104, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Signature", ty: Some(UntrackedSymbol { id: 218, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Extra", ty: Some(UntrackedSymbol { id: 850, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }] }), docs: [] } }, PortableType { id: 866, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 865, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 867, ty: Type { path: Path { segments: ["sp_runtime", "ExtrinsicInclusionMode"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "AllExtrinsics", fields: [], index: 0, docs: [] }, Variant { name: "OnlyInherents", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 868, ty: Type { path: Path { segments: ["Result"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 869, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 870, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ok", fields: [Field { name: None, ty: UntrackedSymbol { id: 869, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 0, docs: [] }, Variant { name: "Err", fields: [Field { name: None, ty: UntrackedSymbol { id: 870, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 869, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 411, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 870, ty: Type { path: Path { segments: ["xcm_runtime_apis", "fees", "Error"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Unimplemented", fields: [], index: 0, docs: [] }, Variant { name: "VersionedConversionFailed", fields: [], index: 1, docs: [] }, Variant { name: "WeightNotComputable", fields: [], index: 2, docs: [] }, Variant { name: "UnhandledXcmVersion", fields: [], index: 3, docs: [] }, Variant { name: "AssetNotFound", fields: [], index: 4, docs: [] }, Variant { name: "Unroutable", fields: [], index: 5, docs: [] }] }), docs: [] } }, PortableType { id: 871, ty: Type { path: Path { segments: ["Result"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 870, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ok", fields: [Field { name: None, ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 0, docs: [] }, Variant { name: "Err", fields: [Field { name: None, ty: UntrackedSymbol { id: 870, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 872, ty: Type { path: Path { segments: ["Result"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 870, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ok", fields: [Field { name: None, ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 0, docs: [] }, Variant { name: "Err", fields: [Field { name: None, ty: UntrackedSymbol { id: 870, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 873, ty: Type { path: Path { segments: ["Result"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 398, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 870, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ok", fields: [Field { name: None, ty: UntrackedSymbol { id: 398, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 0, docs: [] }, Variant { name: "Err", fields: [Field { name: None, ty: UntrackedSymbol { id: 870, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 874, ty: Type { path: Path { segments: ["Result"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 875, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 881, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ok", fields: [Field { name: None, ty: UntrackedSymbol { id: 875, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 0, docs: [] }, Variant { name: "Err", fields: [Field { name: None, ty: UntrackedSymbol { id: 881, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 875, ty: Type { path: Path { segments: ["xcm_runtime_apis", "dry_run", "CallDryRunEffects"] }, type_params: [TypeParameter { name: "Event", ty: Some(UntrackedSymbol { id: 21, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("execution_result"), ty: UntrackedSymbol { id: 447, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchResultWithPostInfo"), docs: [] }, Field { name: Some("emitted_events"), ty: UntrackedSymbol { id: 876, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Event>"), docs: [] }, Field { name: Some("local_xcm"), ty: UntrackedSymbol { id: 877, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<VersionedXcm<()>>"), docs: [] }, Field { name: Some("forwarded_xcms"), ty: UntrackedSymbol { id: 878, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<(VersionedLocation, Vec<VersionedXcm<()>>)>"), docs: [] }] }), docs: [] } }, PortableType { id: 876, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 21, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 877, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 324, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 324, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 878, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 879, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 879, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 880, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 880, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 324, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 881, ty: Type { path: Path { segments: ["xcm_runtime_apis", "dry_run", "Error"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Unimplemented", fields: [], index: 0, docs: [] }, Variant { name: "VersionedConversionFailed", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 882, ty: Type { path: Path { segments: ["Result"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 883, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 881, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ok", fields: [Field { name: None, ty: UntrackedSymbol { id: 883, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 0, docs: [] }, Variant { name: "Err", fields: [Field { name: None, ty: UntrackedSymbol { id: 881, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 883, ty: Type { path: Path { segments: ["xcm_runtime_apis", "dry_run", "XcmDryRunEffects"] }, type_params: [TypeParameter { name: "Event", ty: Some(UntrackedSymbol { id: 21, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("execution_result"), ty: UntrackedSymbol { id: 487, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Outcome"), docs: [] }, Field { name: Some("emitted_events"), ty: UntrackedSymbol { id: 876, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Event>"), docs: [] }, Field { name: Some("forwarded_xcms"), ty: UntrackedSymbol { id: 878, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<(VersionedLocation, Vec<VersionedXcm<()>>)>"), docs: [] }] }), docs: [] } }, PortableType { id: 884, ty: Type { path: Path { segments: ["Result"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 885, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ok", fields: [Field { name: None, ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 0, docs: [] }, Variant { name: "Err", fields: [Field { name: None, ty: UntrackedSymbol { id: 885, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 885, ty: Type { path: Path { segments: ["xcm_runtime_apis", "conversions", "Error"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Unsupported", fields: [], index: 0, docs: [] }, Variant { name: "VersionedConversionFailed", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 886, ty: Type { path: Path { segments: ["sp_core", "OpaqueMetadata"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }), docs: [] } }, PortableType { id: 887, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 886, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 886, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 888, ty: Type { path: Path { segments: ["Result"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 452, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 889, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ok", fields: [Field { name: None, ty: UntrackedSymbol { id: 452, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 0, docs: [] }, Variant { name: "Err", fields: [Field { name: None, ty: UntrackedSymbol { id: 889, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 889, ty: Type { path: Path { segments: ["sp_runtime", "transaction_validity", "TransactionValidityError"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Invalid", fields: [Field { name: None, ty: UntrackedSymbol { id: 890, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("InvalidTransaction"), docs: [] }], index: 0, docs: [] }, Variant { name: "Unknown", fields: [Field { name: None, ty: UntrackedSymbol { id: 891, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("UnknownTransaction"), docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 890, ty: Type { path: Path { segments: ["sp_runtime", "transaction_validity", "InvalidTransaction"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Call", fields: [], index: 0, docs: [] }, Variant { name: "Payment", fields: [], index: 1, docs: [] }, Variant { name: "Future", fields: [], index: 2, docs: [] }, Variant { name: "Stale", fields: [], index: 3, docs: [] }, Variant { name: "BadProof", fields: [], index: 4, docs: [] }, Variant { name: "AncientBirthBlock", fields: [], index: 5, docs: [] }, Variant { name: "ExhaustsResources", fields: [], index: 6, docs: [] }, Variant { name: "Custom", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }], index: 7, docs: [] }, Variant { name: "BadMandatory", fields: [], index: 8, docs: [] }, Variant { name: "MandatoryValidation", fields: [], index: 9, docs: [] }, Variant { name: "BadSigner", fields: [], index: 10, docs: [] }, Variant { name: "IndeterminateImplicit", fields: [], index: 11, docs: [] }, Variant { name: "UnknownOrigin", fields: [], index: 12, docs: [] }] }), docs: [] } }, PortableType { id: 891, ty: Type { path: Path { segments: ["sp_runtime", "transaction_validity", "UnknownTransaction"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "CannotLookup", fields: [], index: 0, docs: [] }, Variant { name: "NoUnsignedValidator", fields: [], index: 1, docs: [] }, Variant { name: "Custom", fields: [Field { name: None, ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u8"), docs: [] }], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 892, ty: Type { path: Path { segments: ["sp_inherents", "InherentData"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("data"), ty: UntrackedSymbol { id: 893, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BTreeMap<InherentIdentifier, Vec<u8>>"), docs: [] }] }), docs: [] } }, PortableType { id: 893, ty: Type { path: Path { segments: ["BTreeMap"] }, type_params: [TypeParameter { name: "K", ty: Some(UntrackedSymbol { id: 190, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "V", ty: Some(UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 894, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }] }), docs: [] } }, PortableType { id: 894, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 895, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 895, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 190, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 896, ty: Type { path: Path { segments: ["sp_inherents", "CheckInherentsResult"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("okay"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("fatal_error"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }, Field { name: Some("errors"), ty: UntrackedSymbol { id: 892, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("InherentData"), docs: [] }] }), docs: [] } }, PortableType { id: 897, ty: Type { path: Path { segments: ["sp_runtime", "transaction_validity", "TransactionSource"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "InBlock", fields: [], index: 0, docs: [] }, Variant { name: "Local", fields: [], index: 1, docs: [] }, Variant { name: "External", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 898, ty: Type { path: Path { segments: ["Result"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 899, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 889, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ok", fields: [Field { name: None, ty: UntrackedSymbol { id: 899, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 0, docs: [] }, Variant { name: "Err", fields: [Field { name: None, ty: UntrackedSymbol { id: 889, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 899, ty: Type { path: Path { segments: ["sp_runtime", "transaction_validity", "ValidTransaction"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("priority"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TransactionPriority"), docs: [] }, Field { name: Some("requires"), ty: UntrackedSymbol { id: 108, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<TransactionTag>"), docs: [] }, Field { name: Some("provides"), ty: UntrackedSymbol { id: 108, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<TransactionTag>"), docs: [] }, Field { name: Some("longevity"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("TransactionLongevity"), docs: [] }, Field { name: Some("propagate"), ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("bool"), docs: [] }] }), docs: [] } }, PortableType { id: 900, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 731, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 901, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 901, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "GroupRotationInfo"] }, type_params: [TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("session_start_block"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }, Field { name: Some("group_rotation_frequency"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }, Field { name: Some("now"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }] }), docs: [] } }, PortableType { id: 902, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 903, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 903, ty: Type { path: Path { segments: ["polkadot_primitives", "vstaging", "CoreState"] }, type_params: [TypeParameter { name: "H", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Occupied", fields: [Field { name: None, ty: UntrackedSymbol { id: 904, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("OccupiedCore<H, N>"), docs: [] }], index: 0, docs: [] }, Variant { name: "Scheduled", fields: [Field { name: None, ty: UntrackedSymbol { id: 906, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ScheduledCore"), docs: [] }], index: 1, docs: [] }, Variant { name: "Free", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 904, ty: Type { path: Path { segments: ["polkadot_primitives", "vstaging", "OccupiedCore"] }, type_params: [TypeParameter { name: "H", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("next_up_on_available"), ty: UntrackedSymbol { id: 905, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<ScheduledCore>"), docs: [] }, Field { name: Some("occupied_since"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }, Field { name: Some("time_out_at"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }, Field { name: Some("next_up_on_time_out"), ty: UntrackedSymbol { id: 905, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<ScheduledCore>"), docs: [] }, Field { name: Some("availability"), ty: UntrackedSymbol { id: 258, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BitVec<u8, bitvec::order::Lsb0>"), docs: [] }, Field { name: Some("group_responsible"), ty: UntrackedSymbol { id: 471, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("GroupIndex"), docs: [] }, Field { name: Some("candidate_hash"), ty: UntrackedSymbol { id: 280, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CandidateHash"), docs: [] }, Field { name: Some("candidate_descriptor"), ty: UntrackedSymbol { id: 265, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CandidateDescriptorV2<H>"), docs: [] }] }), docs: [] } }, PortableType { id: 905, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 906, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 906, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 906, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "ScheduledCore"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("para_id"), ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Id"), docs: [] }, Field { name: Some("collator"), ty: UntrackedSymbol { id: 907, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<CollatorId>"), docs: [] }] }), docs: [] } }, PortableType { id: 907, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 908, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 908, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 908, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "collator_app", "Public"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("sr25519::Public"), docs: [] }] }), docs: [] } }, PortableType { id: 909, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "OccupiedCoreAssumption"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Included", fields: [], index: 0, docs: [] }, Variant { name: "TimedOut", fields: [], index: 1, docs: [] }, Variant { name: "Free", fields: [], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 910, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 911, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 911, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 911, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "PersistedValidationData"] }, type_params: [TypeParameter { name: "H", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("parent_head"), ty: UntrackedSymbol { id: 275, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("HeadData"), docs: [] }, Field { name: Some("relay_parent_number"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }, Field { name: Some("relay_parent_storage_root"), ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("H"), docs: [] }, Field { name: Some("max_pov_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 912, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 913, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 913, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 913, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 911, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 267, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 914, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 264, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 264, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 915, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 916, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 916, ty: Type { path: Path { segments: ["polkadot_primitives", "vstaging", "CandidateEvent"] }, type_params: [TypeParameter { name: "H", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "CandidateBacked", fields: [Field { name: None, ty: UntrackedSymbol { id: 469, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CandidateReceiptV2<H>"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 275, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("HeadData"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 470, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CoreIndex"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 471, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("GroupIndex"), docs: [] }], index: 0, docs: [] }, Variant { name: "CandidateIncluded", fields: [Field { name: None, ty: UntrackedSymbol { id: 469, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CandidateReceiptV2<H>"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 275, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("HeadData"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 470, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CoreIndex"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 471, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("GroupIndex"), docs: [] }], index: 1, docs: [] }, Variant { name: "CandidateTimedOut", fields: [Field { name: None, ty: UntrackedSymbol { id: 469, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CandidateReceiptV2<H>"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 275, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("HeadData"), docs: [] }, Field { name: None, ty: UntrackedSymbol { id: 470, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CoreIndex"), docs: [] }], index: 2, docs: [] }] }), docs: [] } }, PortableType { id: 917, ty: Type { path: Path { segments: ["BTreeMap"] }, type_params: [TypeParameter { name: "K", ty: Some(UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "V", ty: Some(UntrackedSymbol { id: 759, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 918, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }] }), docs: [] } }, PortableType { id: 918, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 919, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 919, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 759, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 920, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 725, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 725, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 921, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 765, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 765, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 922, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 267, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 267, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 923, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 924, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 924, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 280, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 769, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 925, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 243, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 243, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 926, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 927, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 927, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 280, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 772, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 928, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 929, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 929, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 929, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "slashing", "OpaqueKeyOwnershipProof"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }), docs: [] } }, PortableType { id: 930, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 931, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 932, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 932, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 932, ty: Type { path: Path { segments: ["polkadot_primitives", "vstaging", "async_backing", "BackingState"] }, type_params: [TypeParameter { name: "H", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("constraints"), ty: UntrackedSymbol { id: 933, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("crate::async_backing::Constraints<N>"), docs: [] }, Field { name: Some("pending_availability"), ty: UntrackedSymbol { id: 941, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<CandidatePendingAvailability<H, N>>"), docs: [] }] }), docs: [] } }, PortableType { id: 933, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "async_backing", "Constraints"] }, type_params: [TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("min_relay_parent_number"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }, Field { name: Some("max_pov_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_code_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("ump_remaining"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("ump_remaining_bytes"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_ump_num_per_candidate"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("dmp_remaining_messages"), ty: UntrackedSymbol { id: 556, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<N>"), docs: [] }, Field { name: Some("hrmp_inbound"), ty: UntrackedSymbol { id: 934, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("InboundHrmpLimitations<N>"), docs: [] }, Field { name: Some("hrmp_channels_out"), ty: UntrackedSymbol { id: 935, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<(Id, OutboundHrmpChannelLimitations)>"), docs: [] }, Field { name: Some("max_hrmp_num_per_candidate"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("required_parent"), ty: UntrackedSymbol { id: 275, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("HeadData"), docs: [] }, Field { name: Some("validation_code_hash"), ty: UntrackedSymbol { id: 267, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidationCodeHash"), docs: [] }, Field { name: Some("upgrade_restriction"), ty: UntrackedSymbol { id: 938, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<UpgradeRestriction>"), docs: [] }, Field { name: Some("future_validation_code"), ty: UntrackedSymbol { id: 939, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<(N, ValidationCodeHash)>"), docs: [] }] }), docs: [] } }, PortableType { id: 934, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "async_backing", "InboundHrmpLimitations"] }, type_params: [TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("valid_watermarks"), ty: UntrackedSymbol { id: 556, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<N>"), docs: [] }] }), docs: [] } }, PortableType { id: 935, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 936, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 936, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 937, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 937, ty: Type { path: Path { segments: ["polkadot_primitives", "v8", "async_backing", "OutboundHrmpChannelLimitations"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("bytes_remaining"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("messages_remaining"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 938, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 750, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 750, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 939, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 940, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 940, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 940, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 267, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 941, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 942, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 942, ty: Type { path: Path { segments: ["polkadot_primitives", "vstaging", "async_backing", "CandidatePendingAvailability"] }, type_params: [TypeParameter { name: "H", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("candidate_hash"), ty: UntrackedSymbol { id: 280, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CandidateHash"), docs: [] }, Field { name: Some("descriptor"), ty: UntrackedSymbol { id: 265, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CandidateDescriptorV2<H>"), docs: [] }, Field { name: Some("commitments"), ty: UntrackedSymbol { id: 268, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("CandidateCommitments"), docs: [] }, Field { name: Some("relay_parent_number"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }, Field { name: Some("max_pov_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }] }), docs: [] } }, PortableType { id: 943, ty: Type { path: Path { segments: ["BTreeMap"] }, type_params: [TypeParameter { name: "K", ty: Some(UntrackedSymbol { id: 470, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "V", ty: Some(UntrackedSymbol { id: 742, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 944, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }] }), docs: [] } }, PortableType { id: 944, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 945, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 945, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 470, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 742, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 946, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 264, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 947, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 948, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 948, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 948, ty: Type { path: Path { segments: ["polkadot_primitives", "vstaging", "async_backing", "Constraints"] }, type_params: [TypeParameter { name: "N", ty: Some(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("min_relay_parent_number"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("N"), docs: [] }, Field { name: Some("max_pov_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_code_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_head_data_size"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("ump_remaining"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("ump_remaining_bytes"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("max_ump_num_per_candidate"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("dmp_remaining_messages"), ty: UntrackedSymbol { id: 556, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<N>"), docs: [] }, Field { name: Some("hrmp_inbound"), ty: UntrackedSymbol { id: 934, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("InboundHrmpLimitations<N>"), docs: [] }, Field { name: Some("hrmp_channels_out"), ty: UntrackedSymbol { id: 935, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<(Id, OutboundHrmpChannelLimitations)>"), docs: [] }, Field { name: Some("max_hrmp_num_per_candidate"), ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u32"), docs: [] }, Field { name: Some("required_parent"), ty: UntrackedSymbol { id: 275, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("HeadData"), docs: [] }, Field { name: Some("validation_code_hash"), ty: UntrackedSymbol { id: 267, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidationCodeHash"), docs: [] }, Field { name: Some("upgrade_restriction"), ty: UntrackedSymbol { id: 938, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<UpgradeRestriction>"), docs: [] }, Field { name: Some("future_validation_code"), ty: UntrackedSymbol { id: 939, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<(N, ValidationCodeHash)>"), docs: [] }] }), docs: [] } }, PortableType { id: 949, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 950, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 950, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 950, ty: Type { path: Path { segments: ["sp_consensus_beefy", "ValidatorSet"] }, type_params: [TypeParameter { name: "AuthorityId", ty: Some(UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("validators"), ty: UntrackedSymbol { id: 843, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<AuthorityId>"), docs: [] }, Field { name: Some("id"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("ValidatorSetId"), docs: [] }] }), docs: [] } }, PortableType { id: 951, ty: Type { path: Path { segments: ["sp_runtime", "OpaqueValue"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }), docs: [] } }, PortableType { id: 952, ty: Type { path: Path { segments: ["sp_consensus_beefy", "ForkVotingProof"] }, type_params: [TypeParameter { name: "Header", ty: Some(UntrackedSymbol { id: 111, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Id", ty: Some(UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "AncestryProof", ty: Some(UntrackedSymbol { id: 951, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("vote"), ty: UntrackedSymbol { id: 415, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("VoteMessage<Header::Number, Id, Id::Signature>"), docs: [] }, Field { name: Some("ancestry_proof"), ty: UntrackedSymbol { id: 951, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AncestryProof"), docs: [] }, Field { name: Some("header"), ty: UntrackedSymbol { id: 111, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Header"), docs: [] }] }), docs: [] } }, PortableType { id: 953, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 951, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 951, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 954, ty: Type { path: Path { segments: ["Result"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 955, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ok", fields: [Field { name: None, ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 0, docs: [] }, Variant { name: "Err", fields: [Field { name: None, ty: UntrackedSymbol { id: 955, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 955, ty: Type { path: Path { segments: ["sp_mmr_primitives", "Error"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "InvalidNumericOp", fields: [], index: 0, docs: [] }, Variant { name: "Push", fields: [], index: 1, docs: [] }, Variant { name: "GetRoot", fields: [], index: 2, docs: [] }, Variant { name: "Commit", fields: [], index: 3, docs: [] }, Variant { name: "GenerateProof", fields: [], index: 4, docs: [] }, Variant { name: "Verify", fields: [], index: 5, docs: [] }, Variant { name: "LeafNotFound", fields: [], index: 6, docs: [] }, Variant { name: "PalletNotIncluded", fields: [], index: 7, docs: [] }, Variant { name: "InvalidLeafIndex", fields: [], index: 8, docs: [] }, Variant { name: "InvalidBestKnownBlock", fields: [], index: 9, docs: [] }] }), docs: [] } }, PortableType { id: 956, ty: Type { path: Path { segments: ["Result"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 955, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ok", fields: [Field { name: None, ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 0, docs: [] }, Variant { name: "Err", fields: [Field { name: None, ty: UntrackedSymbol { id: 955, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 957, ty: Type { path: Path { segments: ["Result"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 958, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 955, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ok", fields: [Field { name: None, ty: UntrackedSymbol { id: 958, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 0, docs: [] }, Variant { name: "Err", fields: [Field { name: None, ty: UntrackedSymbol { id: 955, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 958, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 959, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 961, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 959, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 960, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 960, ty: Type { path: Path { segments: ["sp_mmr_primitives", "EncodableOpaqueLeaf"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }), docs: [] } }, PortableType { id: 961, ty: Type { path: Path { segments: ["sp_mmr_primitives", "LeafProof"] }, type_params: [TypeParameter { name: "Hash", ty: Some(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("leaf_indices"), ty: UntrackedSymbol { id: 962, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<LeafIndex>"), docs: [] }, Field { name: Some("leaf_count"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("NodeIndex"), docs: [] }, Field { name: Some("items"), ty: UntrackedSymbol { id: 234, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<Hash>"), docs: [] }] }), docs: [] } }, PortableType { id: 962, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 963, ty: Type { path: Path { segments: ["Result"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 955, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ok", fields: [Field { name: None, ty: UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 0, docs: [] }, Variant { name: "Err", fields: [Field { name: None, ty: UntrackedSymbol { id: 955, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 964, ty: Type { path: Path { segments: ["sp_consensus_babe", "BabeConfiguration"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("slot_duration"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("epoch_length"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("c"), ty: UntrackedSymbol { id: 116, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("(u64, u64)"), docs: [] }, Field { name: Some("authorities"), ty: UntrackedSymbol { id: 515, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<(AuthorityId, BabeAuthorityWeight)>"), docs: [] }, Field { name: Some("randomness"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Randomness"), docs: [] }, Field { name: Some("allowed_slots"), ty: UntrackedSymbol { id: 117, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("AllowedSlots"), docs: [] }] }), docs: [] } }, PortableType { id: 965, ty: Type { path: Path { segments: ["sp_consensus_babe", "Epoch"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("epoch_index"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("start_slot"), ty: UntrackedSymbol { id: 113, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Slot"), docs: [] }, Field { name: Some("duration"), ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("u64"), docs: [] }, Field { name: Some("authorities"), ty: UntrackedSymbol { id: 515, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<(AuthorityId, BabeAuthorityWeight)>"), docs: [] }, Field { name: Some("randomness"), ty: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Randomness"), docs: [] }, Field { name: Some("config"), ty: UntrackedSymbol { id: 524, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("BabeEpochConfiguration"), docs: [] }] }), docs: [] } }, PortableType { id: 966, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 967, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 967, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 967, ty: Type { path: Path { segments: ["sp_consensus_babe", "OpaqueKeyOwnershipProof"] }, type_params: [], type_def: Composite(TypeDefComposite { fields: [Field { name: None, ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Vec<u8>"), docs: [] }] }), docs: [] } }, PortableType { id: 968, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 969, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 969, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 969, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 970, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 970, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Tuple(TypeDefTuple { fields: [UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, UntrackedSymbol { id: 558, marker: PhantomData<fn() -> core::any::TypeId> }] }), docs: [] } }, PortableType { id: 971, ty: Type { path: Path { segments: ["pallet_transaction_payment", "types", "RuntimeDispatchInfo"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "Weight", ty: Some(UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("weight"), ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Weight"), docs: [] }, Field { name: Some("class"), ty: UntrackedSymbol { id: 24, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("DispatchClass"), docs: [] }, Field { name: Some("partial_fee"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 972, ty: Type { path: Path { segments: ["pallet_transaction_payment", "types", "FeeDetails"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("inclusion_fee"), ty: UntrackedSymbol { id: 973, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Option<InclusionFee<Balance>>"), docs: [] }, Field { name: Some("tip"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 973, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 974, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 974, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 974, ty: Type { path: Path { segments: ["pallet_transaction_payment", "types", "InclusionFee"] }, type_params: [TypeParameter { name: "Balance", ty: Some(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Composite(TypeDefComposite { fields: [Field { name: Some("base_fee"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("len_fee"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }, Field { name: Some("adjusted_weight_fee"), ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("Balance"), docs: [] }] }), docs: [] } }, PortableType { id: 975, ty: Type { path: Path { segments: ["Result"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 500, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ok", fields: [Field { name: None, ty: UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 0, docs: [] }, Variant { name: "Err", fields: [Field { name: None, ty: UntrackedSymbol { id: 500, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 976, ty: Type { path: Path { segments: ["Option"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 500, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "None", fields: [], index: 0, docs: [] }, Variant { name: "Some", fields: [Field { name: None, ty: UntrackedSymbol { id: 500, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 977, ty: Type { path: Path { segments: [] }, type_params: [], type_def: Sequence(TypeDefSequence { type_param: UntrackedSymbol { id: 500, marker: PhantomData<fn() -> core::any::TypeId> } }), docs: [] } }, PortableType { id: 978, ty: Type { path: Path { segments: ["xcm", "VersionedAsset"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "V3", fields: [Field { name: None, ty: UntrackedSymbol { id: 330, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("v3::MultiAsset"), docs: [] }], index: 3, docs: [] }, Variant { name: "V4", fields: [Field { name: None, ty: UntrackedSymbol { id: 356, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("v4::Asset"), docs: [] }], index: 4, docs: [] }, Variant { name: "V5", fields: [Field { name: None, ty: UntrackedSymbol { id: 374, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("v5::Asset"), docs: [] }], index: 5, docs: [] }] }), docs: [] } }, PortableType { id: 979, ty: Type { path: Path { segments: ["Result"] }, type_params: [TypeParameter { name: "T", ty: Some(UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }) }, TypeParameter { name: "E", ty: Some(UntrackedSymbol { id: 980, marker: PhantomData<fn() -> core::any::TypeId> }) }], type_def: Variant(TypeDefVariant { variants: [Variant { name: "Ok", fields: [Field { name: None, ty: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 0, docs: [] }, Variant { name: "Err", fields: [Field { name: None, ty: UntrackedSymbol { id: 980, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: None, docs: [] }], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 980, ty: Type { path: Path { segments: ["xcm_runtime_apis", "trusted_query", "Error"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "VersionedAssetConversionFailed", fields: [], index: 0, docs: [] }, Variant { name: "VersionedLocationConversionFailed", fields: [], index: 1, docs: [] }] }), docs: [] } }, PortableType { id: 981, ty: Type { path: Path { segments: ["rococo_runtime", "RuntimeError"] }, type_params: [], type_def: Variant(TypeDefVariant { variants: [Variant { name: "System", fields: [Field { name: None, ty: UntrackedSymbol { id: 512, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("frame_system::Error<Runtime>"), docs: [] }], index: 0, docs: [] }, Variant { name: "Babe", fields: [Field { name: None, ty: UntrackedSymbol { id: 528, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_babe::Error<Runtime>"), docs: [] }], index: 1, docs: [] }, Variant { name: "Indices", fields: [Field { name: None, ty: UntrackedSymbol { id: 530, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_indices::Error<Runtime>"), docs: [] }], index: 3, docs: [] }, Variant { name: "Balances", fields: [Field { name: None, ty: UntrackedSymbol { id: 548, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_balances::Error<Runtime>"), docs: [] }], index: 4, docs: [] }, Variant { name: "Session", fields: [Field { name: None, ty: UntrackedSymbol { id: 559, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_session::Error<Runtime>"), docs: [] }], index: 8, docs: [] }, Variant { name: "Grandpa", fields: [Field { name: None, ty: UntrackedSymbol { id: 563, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_grandpa::Error<Runtime>"), docs: [] }], index: 10, docs: [] }, Variant { name: "Treasury", fields: [Field { name: None, ty: UntrackedSymbol { id: 572, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_treasury::Error<Runtime>"), docs: [] }], index: 18, docs: [] }, Variant { name: "ConvictionVoting", fields: [Field { name: None, ty: UntrackedSymbol { id: 585, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_conviction_voting::Error<Runtime>"), docs: [] }], index: 20, docs: [] }, Variant { name: "Referenda", fields: [Field { name: None, ty: UntrackedSymbol { id: 603, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_referenda::Error<Runtime>"), docs: [] }], index: 21, docs: [] }, Variant { name: "FellowshipCollective", fields: [Field { name: None, ty: UntrackedSymbol { id: 609, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_ranked_collective::Error<Runtime, pallet_ranked_collective::\nInstance1>"), docs: [] }], index: 22, docs: [] }, Variant { name: "FellowshipReferenda", fields: [Field { name: None, ty: UntrackedSymbol { id: 613, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_referenda::Error<Runtime, pallet_referenda::Instance2>"), docs: [] }], index: 23, docs: [] }, Variant { name: "Whitelist", fields: [Field { name: None, ty: UntrackedSymbol { id: 614, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_whitelist::Error<Runtime>"), docs: [] }], index: 44, docs: [] }, Variant { name: "Claims", fields: [Field { name: None, ty: UntrackedSymbol { id: 615, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("claims::Error<Runtime>"), docs: [] }], index: 19, docs: [] }, Variant { name: "Utility", fields: [Field { name: None, ty: UntrackedSymbol { id: 616, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_utility::Error<Runtime>"), docs: [] }], index: 24, docs: [] }, Variant { name: "Identity", fields: [Field { name: None, ty: UntrackedSymbol { id: 632, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_identity::Error<Runtime>"), docs: [] }], index: 25, docs: [] }, Variant { name: "Society", fields: [Field { name: None, ty: UntrackedSymbol { id: 649, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_society::Error<Runtime>"), docs: [] }], index: 26, docs: [] }, Variant { name: "Recovery", fields: [Field { name: None, ty: UntrackedSymbol { id: 653, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_recovery::Error<Runtime>"), docs: [] }], index: 27, docs: [] }, Variant { name: "Vesting", fields: [Field { name: None, ty: UntrackedSymbol { id: 657, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_vesting::Error<Runtime>"), docs: [] }], index: 28, docs: [] }, Variant { name: "Scheduler", fields: [Field { name: None, ty: UntrackedSymbol { id: 663, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_scheduler::Error<Runtime>"), docs: [] }], index: 29, docs: [] }, Variant { name: "Proxy", fields: [Field { name: None, ty: UntrackedSymbol { id: 672, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_proxy::Error<Runtime>"), docs: [] }], index: 30, docs: [] }, Variant { name: "Multisig", fields: [Field { name: None, ty: UntrackedSymbol { id: 676, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_multisig::Error<Runtime>"), docs: [] }], index: 31, docs: [] }, Variant { name: "Preimage", fields: [Field { name: None, ty: UntrackedSymbol { id: 685, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_preimage::Error<Runtime>"), docs: [] }], index: 32, docs: [] }, Variant { name: "AssetRate", fields: [Field { name: None, ty: UntrackedSymbol { id: 686, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_asset_rate::Error<Runtime>"), docs: [] }], index: 39, docs: [] }, Variant { name: "Bounties", fields: [Field { name: None, ty: UntrackedSymbol { id: 690, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_bounties::Error<Runtime>"), docs: [] }], index: 35, docs: [] }, Variant { name: "ChildBounties", fields: [Field { name: None, ty: UntrackedSymbol { id: 693, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_child_bounties::Error<Runtime>"), docs: [] }], index: 40, docs: [] }, Variant { name: "Nis", fields: [Field { name: None, ty: UntrackedSymbol { id: 701, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_nis::Error<Runtime>"), docs: [] }], index: 38, docs: [] }, Variant { name: "NisCounterpartBalances", fields: [Field { name: None, ty: UntrackedSymbol { id: 704, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_balances::Error<Runtime, pallet_balances::Instance2>"), docs: [] }], index: 45, docs: [] }, Variant { name: "Configuration", fields: [Field { name: None, ty: UntrackedSymbol { id: 708, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("parachains_configuration::Error<Runtime>"), docs: [] }], index: 51, docs: [] }, Variant { name: "ParaInclusion", fields: [Field { name: None, ty: UntrackedSymbol { id: 724, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("parachains_inclusion::Error<Runtime>"), docs: [] }], index: 53, docs: [] }, Variant { name: "ParaInherent", fields: [Field { name: None, ty: UntrackedSymbol { id: 730, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("parachains_paras_inherent::Error<Runtime>"), docs: [] }], index: 54, docs: [] }, Variant { name: "Paras", fields: [Field { name: None, ty: UntrackedSymbol { id: 751, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("parachains_paras::Error<Runtime>"), docs: [] }], index: 56, docs: [] }, Variant { name: "Hrmp", fields: [Field { name: None, ty: UntrackedSymbol { id: 763, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("parachains_hrmp::Error<Runtime>"), docs: [] }], index: 60, docs: [] }, Variant { name: "ParasDisputes", fields: [Field { name: None, ty: UntrackedSymbol { id: 771, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("parachains_disputes::Error<Runtime>"), docs: [] }], index: 62, docs: [] }, Variant { name: "ParasSlashing", fields: [Field { name: None, ty: UntrackedSymbol { id: 776, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("parachains_slashing::Error<Runtime>"), docs: [] }], index: 63, docs: [] }, Variant { name: "MessageQueue", fields: [Field { name: None, ty: UntrackedSymbol { id: 783, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_message_queue::Error<Runtime>"), docs: [] }], index: 64, docs: [] }, Variant { name: "OnDemandAssignmentProvider", fields: [Field { name: None, ty: UntrackedSymbol { id: 795, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("parachains_on_demand::Error<Runtime>"), docs: [] }], index: 66, docs: [] }, Variant { name: "CoretimeAssignmentProvider", fields: [Field { name: None, ty: UntrackedSymbol { id: 806, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("parachains_assigner_coretime::Error<Runtime>"), docs: [] }], index: 68, docs: [] }, Variant { name: "Registrar", fields: [Field { name: None, ty: UntrackedSymbol { id: 809, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("paras_registrar::Error<Runtime>"), docs: [] }], index: 70, docs: [] }, Variant { name: "Slots", fields: [Field { name: None, ty: UntrackedSymbol { id: 811, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("slots::Error<Runtime>"), docs: [] }], index: 71, docs: [] }, Variant { name: "Auctions", fields: [Field { name: None, ty: UntrackedSymbol { id: 816, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("auctions::Error<Runtime>"), docs: [] }], index: 72, docs: [] }, Variant { name: "Crowdloan", fields: [Field { name: None, ty: UntrackedSymbol { id: 819, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("crowdloan::Error<Runtime>"), docs: [] }], index: 73, docs: [] }, Variant { name: "Coretime", fields: [Field { name: None, ty: UntrackedSymbol { id: 820, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("coretime::Error<Runtime>"), docs: [] }], index: 74, docs: [] }, Variant { name: "MultiBlockMigrations", fields: [Field { name: None, ty: UntrackedSymbol { id: 821, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_migrations::Error<Runtime>"), docs: [] }], index: 98, docs: [] }, Variant { name: "XcmPallet", fields: [Field { name: None, ty: UntrackedSymbol { id: 841, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_xcm::Error<Runtime>"), docs: [] }], index: 99, docs: [] }, Variant { name: "Beefy", fields: [Field { name: None, ty: UntrackedSymbol { id: 844, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_beefy::Error<Runtime>"), docs: [] }], index: 240, docs: [] }, Variant { name: "ParasSudoWrapper", fields: [Field { name: None, ty: UntrackedSymbol { id: 846, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("paras_sudo_wrapper::Error<Runtime>"), docs: [] }], index: 250, docs: [] }, Variant { name: "AssignedSlots", fields: [Field { name: None, ty: UntrackedSymbol { id: 848, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("assigned_slots::Error<Runtime>"), docs: [] }], index: 251, docs: [] }, Variant { name: "StateTrieMigration", fields: [Field { name: None, ty: UntrackedSymbol { id: 493, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_state_trie_migration::Error<Runtime>"), docs: [] }], index: 254, docs: [] }, Variant { name: "Sudo", fields: [Field { name: None, ty: UntrackedSymbol { id: 849, marker: PhantomData<fn() -> core::any::TypeId> }, type_name: Some("pallet_sudo::Error<Runtime>"), docs: [] }], index: 255, docs: [] }] }), docs: [] } }] }, pallets: [PalletMetadata { name: "System", storage: Some(PalletStorageMetadata { prefix: "System", entries: [StorageEntryMetadata { name: "Account", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 3, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128], docs: [" The full account information for a particular account ID."] }, StorageEntryMetadata { name: "ExtrinsicCount", modifier: Optional, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Total extrinsics count for the current block."] }, StorageEntryMetadata { name: "InherentsApplied", modifier: Default, ty: Plain(UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Whether all inherents have been applied."] }, StorageEntryMetadata { name: "BlockWeight", modifier: Default, ty: Plain(UntrackedSymbol { id: 9, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0], docs: [" The current weight for the block."] }, StorageEntryMetadata { name: "AllExtrinsicsLen", modifier: Optional, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Total length (in bytes) for all extrinsics put together, for the current block."] }, StorageEntryMetadata { name: "BlockHash", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Map of block numbers to block hashes."] }, StorageEntryMetadata { name: "ExtrinsicData", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Extrinsics data for the current block (maps an extrinsic's index to its data)."] }, StorageEntryMetadata { name: "Number", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The current block number being processed. Set by `execute_block`."] }, StorageEntryMetadata { name: "ParentHash", modifier: Default, ty: Plain(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Hash of the previous block."] }, StorageEntryMetadata { name: "Digest", modifier: Default, ty: Plain(UntrackedSymbol { id: 15, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Digest of the current block, also part of the block header."] }, StorageEntryMetadata { name: "Events", modifier: Default, ty: Plain(UntrackedSymbol { id: 19, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Events deposited for the current block.", "", " NOTE: The item is unbound and should therefore never be read on chain.", " It could otherwise inflate the PoV size of a block.", "", " Events have a large in-memory size. Box the events to not go out-of-memory", " just in case someone still reads them from within the runtime."] }, StorageEntryMetadata { name: "EventCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The number of events in the `Events<T>` list."] }, StorageEntryMetadata { name: "EventTopics", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 497, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Mapping between a topic (represented by T::Hash) and a vector of indexes", " of events in the `<Events<T>>` list.", "", " All topic vectors have deterministic storage locations depending on the topic. This", " allows light-clients to leverage the changes trie storage tracking mechanism and", " in case of changes fetch the list of events of interest.", "", " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just", " the `EventIndex` then in case if the topic has the same contents on the next block", " no notification will be triggered thus the event might be lost."] }, StorageEntryMetadata { name: "LastRuntimeUpgrade", modifier: Optional, ty: Plain(UntrackedSymbol { id: 498, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."] }, StorageEntryMetadata { name: "UpgradedToU32RefCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."] }, StorageEntryMetadata { name: "UpgradedToTripleRefCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" True if we have upgraded so that AccountInfo contains three types of `RefCount`. False", " (default) if not."] }, StorageEntryMetadata { name: "ExecutionPhase", modifier: Optional, ty: Plain(UntrackedSymbol { id: 496, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The execution phase of the block."] }, StorageEntryMetadata { name: "AuthorizedUpgrade", modifier: Optional, ty: Plain(UntrackedSymbol { id: 501, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" `Some` if a code upgrade has been authorized."] }, StorageEntryMetadata { name: "ExtrinsicWeightReclaimed", modifier: Default, ty: Plain(UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0], docs: [" The weight reclaimed for the extrinsic.", "", " This information is available until the end of the extrinsic execution.", " More precisely this information is removed in `note_applied_extrinsic`.", "", " Logic doing some post dispatch weight reduction must update this storage to avoid duplicate", " reduction."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 105, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 22, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "BlockWeights", ty: UntrackedSymbol { id: 502, marker: PhantomData<fn() -> core::any::TypeId> }, value: [2, 120, 88, 107, 0, 11, 0, 32, 74, 169, 209, 1, 19, 255, 255, 255, 255, 255, 255, 255, 255, 162, 202, 66, 22, 0, 1, 11, 88, 29, 79, 145, 88, 1, 19, 163, 112, 61, 10, 215, 163, 112, 189, 1, 11, 0, 152, 247, 62, 93, 1, 19, 255, 255, 255, 255, 255, 255, 255, 191, 1, 0, 0, 162, 202, 66, 22, 0, 1, 11, 88, 165, 161, 251, 204, 1, 19, 163, 112, 61, 10, 215, 163, 112, 253, 1, 11, 0, 32, 74, 169, 209, 1, 19, 255, 255, 255, 255, 255, 255, 255, 255, 1, 7, 0, 136, 82, 106, 116, 19, 0, 0, 0, 0, 0, 0, 0, 64, 162, 202, 66, 22, 0, 0, 0, 0], docs: [" Block & extrinsics weights: base values and limits."] }, PalletConstantMetadata { name: "BlockLength", ty: UntrackedSymbol { id: 505, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 0, 60, 0, 0, 0, 80, 0, 0, 0, 80, 0], docs: [" The maximum length of a block (in bytes)."] }, PalletConstantMetadata { name: "BlockHashCount", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 16, 0, 0], docs: [" Maximum number of block number to block hash mappings to keep (oldest pruned first)."] }, PalletConstantMetadata { name: "DbWeight", ty: UntrackedSymbol { id: 507, marker: PhantomData<fn() -> core::any::TypeId> }, value: [64, 120, 125, 1, 0, 0, 0, 0, 0, 225, 245, 5, 0, 0, 0, 0], docs: [" The weight of runtime database operations the runtime can invoke."] }, PalletConstantMetadata { name: "Version", ty: UntrackedSymbol { id: 508, marker: PhantomData<fn() -> core::any::TypeId> }, value: [24, 114, 111, 99, 111, 99, 111, 72, 112, 97, 114, 105, 116, 121, 45, 114, 111, 99, 111, 99, 111, 45, 118, 50, 46, 48, 0, 0, 0, 0, 169, 132, 15, 0, 0, 0, 0, 0, 80, 223, 106, 203, 104, 153, 7, 96, 155, 5, 0, 0, 0, 111, 245, 46, 232, 88, 230, 197, 189, 1, 0, 0, 0, 145, 177, 200, 177, 99, 40, 235, 146, 1, 0, 0, 0, 159, 251, 80, 90, 167, 56, 214, 156, 1, 0, 0, 0, 55, 227, 151, 252, 124, 145, 245, 228, 2, 0, 0, 0, 64, 254, 58, 212, 1, 248, 149, 154, 6, 0, 0, 0, 210, 188, 152, 151, 238, 208, 143, 21, 3, 0, 0, 0, 247, 139, 39, 139, 229, 63, 69, 76, 2, 0, 0, 0, 175, 44, 2, 151, 162, 62, 109, 61, 12, 0, 0, 0, 73, 234, 175, 27, 84, 138, 12, 176, 5, 0, 0, 0, 145, 213, 223, 24, 176, 210, 207, 88, 2, 0, 0, 0, 237, 153, 197, 172, 178, 94, 237, 245, 3, 0, 0, 0, 203, 202, 37, 227, 159, 20, 35, 135, 2, 0, 0, 0, 104, 122, 212, 74, 211, 127, 3, 194, 1, 0, 0, 0, 171, 60, 5, 114, 41, 31, 235, 139, 1, 0, 0, 0, 188, 157, 137, 144, 79, 91, 146, 63, 1, 0, 0, 0, 55, 200, 187, 19, 80, 169, 162, 168, 4, 0, 0, 0, 42, 94, 146, 70, 85, 57, 158, 96, 1, 0, 0, 0, 251, 197, 119, 185, 215, 71, 239, 214, 1, 0, 0, 0, 38, 9, 190, 131, 172, 68, 104, 220, 1, 0, 0, 0, 26, 0, 0, 0, 1], docs: [" Get the chain's in-code version."] }, PalletConstantMetadata { name: "SS58Prefix", ty: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, value: [42, 0], docs: [" The designated SS58 prefix of this chain.", "", " This replaces the \"ss58Format\" property declared in the chain spec. Reason is", " that the runtime should know about the prefix in order to make use of it as", " an identifier of the chain."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 512, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 0, docs: [] }, PalletMetadata { name: "Babe", storage: Some(PalletStorageMetadata { prefix: "Babe", entries: [StorageEntryMetadata { name: "EpochIndex", modifier: Default, ty: Plain(UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" Current epoch index."] }, StorageEntryMetadata { name: "Authorities", modifier: Default, ty: Plain(UntrackedSymbol { id: 513, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Current epoch authorities."] }, StorageEntryMetadata { name: "GenesisSlot", modifier: Default, ty: Plain(UntrackedSymbol { id: 113, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" The slot at which the first epoch actually started. This is 0", " until the first block of the chain."] }, StorageEntryMetadata { name: "CurrentSlot", modifier: Default, ty: Plain(UntrackedSymbol { id: 113, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" Current slot number."] }, StorageEntryMetadata { name: "Randomness", modifier: Default, ty: Plain(UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The epoch randomness for the *current* epoch.", "", " # Security", "", " This MUST NOT be used for gambling, as it can be influenced by a", " malicious validator in the short term. It MAY be used in many", " cryptographic protocols, however, so long as one remembers that this", " (like everything else on-chain) it is public. For example, it can be", " used where a number is needed that cannot have been chosen by an", " adversary, for purposes such as public-coin zero-knowledge proofs."] }, StorageEntryMetadata { name: "PendingEpochConfigChange", modifier: Optional, ty: Plain(UntrackedSymbol { id: 115, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Pending epoch configuration change that will be applied when the next epoch is enacted."] }, StorageEntryMetadata { name: "NextRandomness", modifier: Default, ty: Plain(UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Next epoch randomness."] }, StorageEntryMetadata { name: "NextAuthorities", modifier: Default, ty: Plain(UntrackedSymbol { id: 513, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Next epoch authorities."] }, StorageEntryMetadata { name: "SegmentIndex", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" Randomness under construction.", "", " We make a trade-off between storage accesses and list length.", " We store the under-construction randomness in segments of up to", " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.", "", " Once a segment reaches this length, we begin the next one.", " We reset all segments and return to `0` at the beginning of every", " epoch."] }, StorageEntryMetadata { name: "UnderConstruction", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 516, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."] }, StorageEntryMetadata { name: "Initialized", modifier: Optional, ty: Plain(UntrackedSymbol { id: 518, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Temporary value (cleared at block finalization) which is `Some`", " if per-block initialization has already been called for current block."] }, StorageEntryMetadata { name: "AuthorVrfRandomness", modifier: Default, ty: Plain(UntrackedSymbol { id: 459, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" This field should always be populated during block processing unless", " secondary plain slots are enabled (which don't contain a VRF output).", "", " It is set in `on_finalize`, before it will contain the value from the last block."] }, StorageEntryMetadata { name: "EpochStart", modifier: Default, ty: Plain(UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" The block numbers when the last and current epoch have started, respectively `N-1` and", " `N`.", " NOTE: We track this is in order to annotate the block number when a given pool of", " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in", " slots, which may be skipped, the block numbers may not line up with the slot numbers."] }, StorageEntryMetadata { name: "Lateness", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" How late the current block is compared to its parent.", "", " This entry is populated as part of block execution and is cleaned up", " on block finalization. Querying this storage entry outside of block", " execution context should always yield zero."] }, StorageEntryMetadata { name: "EpochConfig", modifier: Optional, ty: Plain(UntrackedSymbol { id: 524, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The configuration for the current epoch. Should never be `None` as it is initialized in", " genesis."] }, StorageEntryMetadata { name: "NextEpochConfig", modifier: Optional, ty: Plain(UntrackedSymbol { id: 524, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The configuration for the next epoch, `None` if the config will not change", " (you can fallback to `EpochConfig` instead in that case)."] }, StorageEntryMetadata { name: "SkippedEpochs", modifier: Default, ty: Plain(UntrackedSymbol { id: 525, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" A list of the last 100 skipped epochs and the corresponding session index", " when the epoch was skipped.", "", " This is only used for validating equivocation proofs. An equivocation proof", " must contains a key-ownership proof for a given session, therefore we need a", " way to tie together sessions and epoch indices, i.e. we need to validate that", " a validator was the owner of a given key on a given session, and what the", " active epoch index was during that session."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 109, marker: PhantomData<fn() -> core::any::TypeId> } }), event: None, constants: [PalletConstantMetadata { name: "EpochDuration", ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, value: [88, 2, 0, 0, 0, 0, 0, 0], docs: [" The amount of time, in slots, that each epoch should last.", " NOTE: Currently it is not possible to change the epoch duration after", " the chain has started. Attempting to do so will brick block production."] }, PalletConstantMetadata { name: "ExpectedBlockTime", ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, value: [112, 23, 0, 0, 0, 0, 0, 0], docs: [" The expected average block time at which BABE should be creating", " blocks. Since BABE is probabilistic it is not trivial to figure out", " what the expected average block time should be based on the slot", " duration and the security parameter `c` (where `1 - c` represents", " the probability of a slot being empty)."] }, PalletConstantMetadata { name: "MaxAuthorities", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [160, 134, 1, 0], docs: [" Max number of authorities allowed"] }, PalletConstantMetadata { name: "MaxNominators", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 0, 0, 0], docs: [" The maximum number of nominators for each validator."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 528, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 1, docs: [] }, PalletMetadata { name: "Timestamp", storage: Some(PalletStorageMetadata { prefix: "Timestamp", entries: [StorageEntryMetadata { name: "Now", modifier: Default, ty: Plain(UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" The current time for the current block."] }, StorageEntryMetadata { name: "DidUpdate", modifier: Default, ty: Plain(UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Whether the timestamp has been updated in this block.", "", " This value is updated to `true` upon successful submission of a timestamp by a node.", " It is then checked at the end of each block execution in the `on_finalize` hook."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 118, marker: PhantomData<fn() -> core::any::TypeId> } }), event: None, constants: [PalletConstantMetadata { name: "MinimumPeriod", ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, value: [184, 11, 0, 0, 0, 0, 0, 0], docs: [" The minimum period between blocks.", "", " Be aware that this is different to the *expected* period that the block production", " apparatus provides. Your chosen consensus system will generally work with this to", " determine a sensible block time. For example, in the Aura pallet it will be double this", " period on default settings."] }], error: None, index: 2, docs: [] }, PalletMetadata { name: "Indices", storage: Some(PalletStorageMetadata { prefix: "Indices", entries: [StorageEntryMetadata { name: "Accounts", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 529, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The lookup from index to account."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 119, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 32, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "Deposit", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [52, 161, 174, 198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The deposit needed for reserving an index."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 530, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 3, docs: [] }, PalletMetadata { name: "Balances", storage: Some(PalletStorageMetadata { prefix: "Balances", entries: [StorageEntryMetadata { name: "TotalIssuance", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The total units issued in the system."] }, StorageEntryMetadata { name: "InactiveIssuance", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The total units of outstanding deactivated balance in the system."] }, StorageEntryMetadata { name: "Account", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 5, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128], docs: [" The Balances pallet example of storing the balance of an account.", "", " # Example", "", " ```nocompile", "  impl pallet_balances::Config for Runtime {", "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>", "  }", " ```", "", " You can also store the balance of an account in the `System` pallet.", "", " # Example", "", " ```nocompile", "  impl pallet_balances::Config for Runtime {", "   type AccountStore = System", "  }", " ```", "", " But this comes with tradeoffs, storing account balances in the system pallet stores", " `frame_system` data alongside the account data contrary to storing account balances in the", " `Balances` pallet, which uses a `StorageMap` to store balances data only.", " NOTE: This is only used in the case that this pallet is used to store balances."] }, StorageEntryMetadata { name: "Locks", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 531, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Any liquidity locks on some account balances.", " NOTE: Should only be accessed when setting, changing and freeing a lock.", "", " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"] }, StorageEntryMetadata { name: "Reserves", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 535, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Named reserves on some account balances.", "", " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"] }, StorageEntryMetadata { name: "Holds", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 538, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Holds on account balances."] }, StorageEntryMetadata { name: "Freezes", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 545, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Freeze locks on account balances."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 123, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 33, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "ExistentialDeposit", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [85, 160, 252, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!", "", " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for", " this pallet. However, you do so at your own risk: this will open up a major DoS vector.", " In case you have multiple sources of provider references, you may also get unexpected", " behaviour if you set this to zero.", "", " Bottom line: Do yourself a favour and make it at least one!"] }, PalletConstantMetadata { name: "MaxLocks", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [50, 0, 0, 0], docs: [" The maximum number of locks that should exist on an account.", " Not strictly enforced, but used for weight estimation.", "", " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"] }, PalletConstantMetadata { name: "MaxReserves", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [50, 0, 0, 0], docs: [" The maximum number of named reserves that can exist on an account.", "", " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"] }, PalletConstantMetadata { name: "MaxFreezes", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [1, 0, 0, 0], docs: [" The maximum number of individual freeze locks that can exist on an account at any time."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 548, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 4, docs: [] }, PalletMetadata { name: "Parameters", storage: Some(PalletStorageMetadata { prefix: "Parameters", entries: [StorageEntryMetadata { name: "Parameters", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 36, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 44, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Stored parameters."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 126, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 35, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: None, index: 6, docs: [] }, PalletMetadata { name: "TransactionPayment", storage: Some(PalletStorageMetadata { prefix: "TransactionPayment", entries: [StorageEntryMetadata { name: "NextFeeMultiplier", modifier: Default, ty: Plain(UntrackedSymbol { id: 236, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 100, 167, 179, 182, 224, 13, 0, 0, 0, 0, 0, 0, 0, 0], docs: [] }, StorageEntryMetadata { name: "StorageVersion", modifier: Default, ty: Plain(UntrackedSymbol { id: 549, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }] }), calls: None, event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 48, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "OperationalFeeMultiplier", ty: UntrackedSymbol { id: 2, marker: PhantomData<fn() -> core::any::TypeId> }, value: [5], docs: [" A fee multiplier for `Operational` extrinsics to compute \"virtual tip\" to boost their", " `priority`", "", " This value is multiplied by the `final_fee` to obtain a \"virtual tip\" that is later", " added to a tip component in regular `priority` calculations.", " It means that a `Normal` transaction can front-run a similarly-sized `Operational`", " extrinsic (with no tip), by including a tip value greater than the virtual tip.", "", " ```rust,ignore", " // For `Normal`", " let priority = priority_calc(tip);", "", " // For `Operational`", " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;", " let priority = priority_calc(tip + virtual_tip);", " ```", "", " Note that since we use `final_fee` the multiplier applies also to the regular `tip`", " sent with the transaction. So, not only does the transaction get a priority bump based", " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`", " transactions."] }], error: None, index: 33, docs: [] }, PalletMetadata { name: "Authorship", storage: Some(PalletStorageMetadata { prefix: "Authorship", entries: [StorageEntryMetadata { name: "Author", modifier: Optional, ty: Plain(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Author of current block."] }] }), calls: None, event: None, constants: [], error: None, index: 5, docs: [] }, PalletMetadata { name: "Offences", storage: Some(PalletStorageMetadata { prefix: "Offences", entries: [StorageEntryMetadata { name: "Reports", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 550, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The primary structure that holds all offence records keyed by report identifiers."] }, StorageEntryMetadata { name: "ConcurrentReportsIndex", modifier: Default, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 552, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 234, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" A vector of reports of the same kind that happened at the same time slot."] }] }), calls: None, event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 49, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: None, index: 7, docs: [] }, PalletMetadata { name: "Historical", storage: Some(PalletStorageMetadata { prefix: "Historical", entries: [StorageEntryMetadata { name: "HistoricalSessions", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 553, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Mapping from historical session indices to session-data root hash and validator count."] }, StorageEntryMetadata { name: "StoredRange", modifier: Optional, ty: Plain(UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The range of historical sessions we store. [first, last)"] }] }), calls: None, event: None, constants: [], error: None, index: 34, docs: [] }, PalletMetadata { name: "Session", storage: Some(PalletStorageMetadata { prefix: "Session", entries: [StorageEntryMetadata { name: "Validators", modifier: Default, ty: Plain(UntrackedSymbol { id: 124, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current set of validators."] }, StorageEntryMetadata { name: "CurrentIndex", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" Current index of the session."] }, StorageEntryMetadata { name: "QueuedChanged", modifier: Default, ty: Plain(UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" True if the underlying economic identities or weighting behind the validators", " has changed in the queued validator set."] }, StorageEntryMetadata { name: "QueuedKeys", modifier: Default, ty: Plain(UntrackedSymbol { id: 554, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The queued keys for the next session. When the next session begins, these keys", " will be used to determine the validator's session keys."] }, StorageEntryMetadata { name: "DisabledValidators", modifier: Default, ty: Plain(UntrackedSymbol { id: 556, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Indices of disabled validators.", "", " The vec is always kept sorted so that we can find whether a given validator is", " disabled using binary search. It gets cleared when `on_session_ending` returns", " a new set of identities."] }, StorageEntryMetadata { name: "NextKeys", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 133, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The next session keys for a validator."] }, StorageEntryMetadata { name: "KeyOwner", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 557, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The owner of a key. The key is the `KeyTypeId` + the encoded key."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 132, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 51, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 559, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 8, docs: [] }, PalletMetadata { name: "Grandpa", storage: Some(PalletStorageMetadata { prefix: "Grandpa", entries: [StorageEntryMetadata { name: "State", modifier: Default, ty: Plain(UntrackedSymbol { id: 560, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" State of the current authority set."] }, StorageEntryMetadata { name: "PendingChange", modifier: Optional, ty: Plain(UntrackedSymbol { id: 561, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Pending change: (signaled at, scheduled change)."] }, StorageEntryMetadata { name: "NextForced", modifier: Optional, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" next block number where we can force a change."] }, StorageEntryMetadata { name: "Stalled", modifier: Optional, ty: Plain(UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" `true` if we are currently stalled."] }, StorageEntryMetadata { name: "CurrentSetId", modifier: Default, ty: Plain(UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" The number of changes (both in terms of keys and underlying economic responsibilities)", " in the \"set\" of Grandpa validators from genesis."] }, StorageEntryMetadata { name: "SetIdSession", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" A mapping from grandpa set ID to the index of the *most recent* session for which its", " members were responsible.", "", " This is only used for validating equivocation proofs. An equivocation proof must", " contains a key-ownership proof for a given session, therefore we need a way to tie", " together sessions and GRANDPA set ids, i.e. we need to validate that a validator", " was the owner of a given key on a given session, and what the active set ID was", " during that session.", "", " TWOX-NOTE: `SetId` is not under user control."] }, StorageEntryMetadata { name: "Authorities", modifier: Default, ty: Plain(UntrackedSymbol { id: 562, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current list of authorities."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 139, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 52, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "MaxAuthorities", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [160, 134, 1, 0], docs: [" Max Authorities in use"] }, PalletConstantMetadata { name: "MaxNominators", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 0, 0, 0], docs: [" The maximum number of nominators for each validator."] }, PalletConstantMetadata { name: "MaxSetIdSessionEntries", ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, value: [168, 0, 0, 0, 0, 0, 0, 0], docs: [" The maximum number of entries to keep in the set id to session index mapping.", "", " Since the `SetIdSession` map is only used for validating equivocations this", " value should relate to the bonding duration of whatever staking system is", " being used (if any). If equivocation handling is not enabled then this value", " can be zero."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 563, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 10, docs: [] }, PalletMetadata { name: "AuthorityDiscovery", storage: Some(PalletStorageMetadata { prefix: "AuthorityDiscovery", entries: [StorageEntryMetadata { name: "Keys", modifier: Default, ty: Plain(UntrackedSymbol { id: 564, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Keys of the current authority set."] }, StorageEntryMetadata { name: "NextKeys", modifier: Default, ty: Plain(UntrackedSymbol { id: 564, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Keys of the next authority set."] }] }), calls: None, event: None, constants: [], error: None, index: 12, docs: [] }, PalletMetadata { name: "Treasury", storage: Some(PalletStorageMetadata { prefix: "Treasury", entries: [StorageEntryMetadata { name: "ProposalCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" DEPRECATED: associated with `spend_local` call and will be removed in May 2025.", " Refer to <https://github.com/paritytech/polkadot-sdk/pull/5961> for migration to `spend`.", "", " Number of proposals that have been made."] }, StorageEntryMetadata { name: "Proposals", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 566, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" DEPRECATED: associated with `spend_local` call and will be removed in May 2025.", " Refer to <https://github.com/paritytech/polkadot-sdk/pull/5961> for migration to `spend`.", "", " Proposals that have been made."] }, StorageEntryMetadata { name: "Deactivated", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount which has been reported as inactive to Currency."] }, StorageEntryMetadata { name: "Approvals", modifier: Default, ty: Plain(UntrackedSymbol { id: 567, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" DEPRECATED: associated with `spend_local` call and will be removed in May 2025.", " Refer to <https://github.com/paritytech/polkadot-sdk/pull/5961> for migration to `spend`.", "", " Proposal indices that have been approved but not yet awarded."] }, StorageEntryMetadata { name: "SpendCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The count of spends that have been made."] }, StorageEntryMetadata { name: "Spends", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 568, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Spends that have been approved and being processed."] }, StorageEntryMetadata { name: "LastSpendPeriod", modifier: Optional, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The blocknumber for the last triggered spend period."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 150, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 56, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "SpendPeriod", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [128, 81, 1, 0], docs: [" Period between successive spends."] }, PalletConstantMetadata { name: "Burn", ty: UntrackedSymbol { id: 570, marker: PhantomData<fn() -> core::any::TypeId> }, value: [208, 7, 0, 0], docs: [" Percentage of spare funds (if any) that are burnt per spend period."] }, PalletConstantMetadata { name: "PalletId", ty: UntrackedSymbol { id: 571, marker: PhantomData<fn() -> core::any::TypeId> }, value: [112, 121, 47, 116, 114, 115, 114, 121], docs: [" The treasury's pallet id, used for deriving its sovereign account ID."] }, PalletConstantMetadata { name: "MaxApprovals", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [100, 0, 0, 0], docs: [" DEPRECATED: associated with `spend_local` call and will be removed in May 2025.", " Refer to <https://github.com/paritytech/polkadot-sdk/pull/5961> for migration to `spend`.", "", " The maximum number of approvals that can wait in the spending queue.", "", " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."] }, PalletConstantMetadata { name: "PayoutPeriod", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [128, 151, 6, 0], docs: [" The period during which an approved treasury spend has to be claimed."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 572, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 18, docs: [] }, PalletMetadata { name: "ConvictionVoting", storage: Some(PalletStorageMetadata { prefix: "ConvictionVoting", entries: [StorageEntryMetadata { name: "VotingFor", modifier: Default, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 573, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 574, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" All voting for a particular voter in a particular voting class. We store the balance for the", " number of votes that we have recorded."] }, StorageEntryMetadata { name: "ClassLocksFor", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 582, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The voting classes which have a non-zero lock requirement and the lock amounts which they", " require. The actual amount locked on behalf of this pallet should always be the maximum of", " this list."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 152, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 98, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "MaxVotes", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 2, 0, 0], docs: [" The maximum number of concurrent votes an account may have.", "", " Also used to compute weight, an overly large value can lead to extrinsics with large", " weight estimation: see `delegate` for instance."] }, PalletConstantMetadata { name: "VoteLockingPeriod", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [192, 137, 1, 0], docs: [" The minimum period of vote locking.", "", " It should be no shorter than enactment period to ensure that in the case of an approval,", " those successful voters are locked into the consequences that their votes entail."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 585, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 20, docs: [] }, PalletMetadata { name: "Referenda", storage: Some(PalletStorageMetadata { prefix: "Referenda", entries: [StorageEntryMetadata { name: "ReferendumCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The next free referendum index, aka the number of referenda started so far."] }, StorageEntryMetadata { name: "ReferendumInfoFor", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 586, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Information concerning any given referendum."] }, StorageEntryMetadata { name: "TrackQueue", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 594, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The sorted list of referenda ready to be decided but not yet being decided, ordered by", " conviction-weighted approvals.", "", " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."] }, StorageEntryMetadata { name: "DecidingCount", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0], docs: [" The number of referenda being decided currently."] }, StorageEntryMetadata { name: "MetadataOf", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The metadata is a general information concerning the referendum.", " The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON", " dump or IPFS hash of a JSON file.", "", " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)", " large preimages."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 155, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 102, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "SubmissionDeposit", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [255, 224, 245, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The minimum amount to be used as a deposit for a public referendum proposal."] }, PalletConstantMetadata { name: "MaxQueued", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [100, 0, 0, 0], docs: [" Maximum size of the referendum queue for a single track."] }, PalletConstantMetadata { name: "UndecidingTimeout", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [128, 19, 3, 0], docs: [" The number of blocks after submission that a referendum must begin being decided by.", " Once this passes, then anyone may cancel the referendum."] }, PalletConstantMetadata { name: "AlarmInterval", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [1, 0, 0, 0], docs: [" Quantization level for the referendum wakeup scheduler. A higher number will result in", " fewer storage reads/writes needed for smaller voters, but also result in delays to the", " automatic referendum status changes. Explicit servicing instructions are unaffected."] }, PalletConstantMetadata { name: "Tracks", ty: UntrackedSymbol { id: 597, marker: PhantomData<fn() -> core::any::TypeId> }, value: [60, 0, 0, 16, 114, 111, 111, 116, 1, 0, 0, 0, 128, 248, 185, 54, 42, 47, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 200, 0, 0, 0, 120, 0, 0, 0, 50, 0, 0, 0, 2, 144, 215, 62, 13, 0, 0, 0, 0, 87, 67, 222, 19, 0, 0, 0, 0, 84, 67, 222, 19, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 101, 205, 29, 1, 0, 72, 119, 104, 105, 116, 101, 108, 105, 115, 116, 101, 100, 95, 99, 97, 108, 108, 101, 114, 100, 0, 0, 0, 64, 255, 120, 5, 81, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 200, 0, 0, 0, 40, 0, 0, 0, 30, 0, 0, 0, 2, 236, 151, 37, 16, 0, 0, 0, 0, 123, 87, 60, 23, 0, 0, 0, 0, 66, 57, 47, 18, 0, 0, 0, 0, 2, 14, 0, 132, 0, 0, 0, 0, 0, 214, 230, 31, 1, 0, 0, 0, 0, 57, 98, 121, 2, 0, 0, 0, 0, 10, 0, 52, 115, 116, 97, 107, 105, 110, 103, 95, 97, 100, 109, 105, 110, 10, 0, 0, 0, 160, 127, 188, 130, 40, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 200, 0, 0, 0, 80, 0, 0, 0, 30, 0, 0, 0, 0, 201, 67, 48, 36, 0, 101, 205, 29, 0, 202, 154, 59, 2, 93, 111, 120, 0, 0, 0, 0, 0, 232, 46, 237, 0, 0, 0, 0, 0, 140, 104, 137, 255, 255, 255, 255, 255, 11, 0, 36, 116, 114, 101, 97, 115, 117, 114, 101, 114, 10, 0, 0, 0, 32, 179, 37, 26, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 200, 0, 0, 0, 80, 0, 0, 0, 50, 0, 0, 0, 2, 144, 215, 62, 13, 0, 0, 0, 0, 87, 67, 222, 19, 0, 0, 0, 0, 84, 67, 222, 19, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 101, 205, 29, 12, 0, 44, 108, 101, 97, 115, 101, 95, 97, 100, 109, 105, 110, 10, 0, 0, 0, 160, 127, 188, 130, 40, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 200, 0, 0, 0, 80, 0, 0, 0, 30, 0, 0, 0, 0, 201, 67, 48, 36, 0, 101, 205, 29, 0, 202, 154, 59, 2, 93, 111, 120, 0, 0, 0, 0, 0, 232, 46, 237, 0, 0, 0, 0, 0, 140, 104, 137, 255, 255, 255, 255, 255, 13, 0, 64, 102, 101, 108, 108, 111, 119, 115, 104, 105, 112, 95, 97, 100, 109, 105, 110, 10, 0, 0, 0, 160, 127, 188, 130, 40, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 200, 0, 0, 0, 80, 0, 0, 0, 30, 0, 0, 0, 0, 201, 67, 48, 36, 0, 101, 205, 29, 0, 202, 154, 59, 2, 93, 111, 120, 0, 0, 0, 0, 0, 232, 46, 237, 0, 0, 0, 0, 0, 140, 104, 137, 255, 255, 255, 255, 255, 14, 0, 52, 103, 101, 110, 101, 114, 97, 108, 95, 97, 100, 109, 105, 110, 10, 0, 0, 0, 160, 127, 188, 130, 40, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 200, 0, 0, 0, 80, 0, 0, 0, 30, 0, 0, 0, 2, 144, 215, 62, 13, 0, 0, 0, 0, 87, 67, 222, 19, 0, 0, 0, 0, 84, 67, 222, 19, 0, 0, 0, 0, 2, 89, 162, 244, 2, 0, 0, 0, 0, 163, 41, 107, 5, 0, 0, 0, 0, 46, 107, 74, 253, 255, 255, 255, 255, 15, 0, 52, 97, 117, 99, 116, 105, 111, 110, 95, 97, 100, 109, 105, 110, 10, 0, 0, 0, 160, 127, 188, 130, 40, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 200, 0, 0, 0, 80, 0, 0, 0, 30, 0, 0, 0, 2, 144, 215, 62, 13, 0, 0, 0, 0, 87, 67, 222, 19, 0, 0, 0, 0, 84, 67, 222, 19, 0, 0, 0, 0, 2, 89, 162, 244, 2, 0, 0, 0, 0, 163, 41, 107, 5, 0, 0, 0, 0, 46, 107, 74, 253, 255, 255, 255, 255, 20, 0, 80, 114, 101, 102, 101, 114, 101, 110, 100, 117, 109, 95, 99, 97, 110, 99, 101, 108, 108, 101, 114, 232, 3, 0, 0, 64, 255, 120, 5, 81, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 140, 0, 0, 0, 80, 0, 0, 0, 30, 0, 0, 0, 0, 201, 67, 48, 36, 0, 101, 205, 29, 0, 202, 154, 59, 2, 93, 111, 120, 0, 0, 0, 0, 0, 232, 46, 237, 0, 0, 0, 0, 0, 140, 104, 137, 255, 255, 255, 255, 255, 21, 0, 68, 114, 101, 102, 101, 114, 101, 110, 100, 117, 109, 95, 107, 105, 108, 108, 101, 114, 232, 3, 0, 0, 64, 252, 92, 27, 149, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 200, 0, 0, 0, 80, 0, 0, 0, 30, 0, 0, 0, 0, 201, 67, 48, 36, 0, 101, 205, 29, 0, 202, 154, 59, 2, 93, 111, 120, 0, 0, 0, 0, 0, 232, 46, 237, 0, 0, 0, 0, 0, 140, 104, 137, 255, 255, 255, 255, 255, 30, 0, 48, 115, 109, 97, 108, 108, 95, 116, 105, 112, 112, 101, 114, 200, 0, 0, 0, 255, 224, 245, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 140, 0, 0, 0, 40, 0, 0, 0, 10, 0, 0, 0, 0, 73, 145, 73, 21, 0, 101, 205, 29, 0, 202, 154, 59, 2, 249, 186, 24, 0, 0, 0, 0, 0, 42, 77, 49, 0, 0, 0, 0, 0, 107, 89, 231, 255, 255, 255, 255, 255, 31, 0, 40, 98, 105, 103, 95, 116, 105, 112, 112, 101, 114, 100, 0, 0, 0, 246, 201, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 140, 0, 0, 0, 120, 0, 0, 0, 30, 0, 0, 0, 0, 73, 145, 73, 21, 0, 101, 205, 29, 0, 202, 154, 59, 2, 105, 79, 63, 0, 0, 0, 0, 0, 53, 150, 125, 0, 0, 0, 0, 0, 229, 52, 193, 255, 255, 255, 255, 255, 32, 0, 52, 115, 109, 97, 108, 108, 95, 115, 112, 101, 110, 100, 101, 114, 50, 0, 0, 0, 156, 227, 11, 84, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 200, 0, 0, 0, 100, 0, 0, 0, 50, 0, 0, 0, 0, 201, 67, 48, 36, 0, 101, 205, 29, 0, 202, 154, 59, 2, 93, 111, 120, 0, 0, 0, 0, 0, 232, 46, 237, 0, 0, 0, 0, 0, 140, 104, 137, 255, 255, 255, 255, 255, 33, 0, 56, 109, 101, 100, 105, 117, 109, 95, 115, 112, 101, 110, 100, 101, 114, 50, 0, 0, 0, 56, 199, 23, 168, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 200, 0, 0, 0, 120, 0, 0, 0, 50, 0, 0, 0, 0, 91, 1, 246, 48, 0, 101, 205, 29, 0, 202, 154, 59, 2, 17, 97, 219, 0, 0, 0, 0, 0, 191, 209, 170, 1, 0, 0, 0, 0, 32, 151, 42, 255, 255, 255, 255, 255, 34, 0, 44, 98, 105, 103, 95, 115, 112, 101, 110, 100, 101, 114, 50, 0, 0, 0, 112, 142, 47, 80, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 200, 0, 0, 0, 140, 0, 0, 0, 50, 0, 0, 0, 0, 0, 202, 154, 59, 0, 101, 205, 29, 0, 202, 154, 59, 2, 65, 60, 176, 1, 0, 0, 0, 0, 117, 93, 52, 3, 0, 0, 0, 0, 69, 209, 101, 254, 255, 255, 255, 255], docs: [" Information concerning the different referendum tracks."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 603, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 21, docs: [] }, PalletMetadata { name: "FellowshipCollective", storage: Some(PalletStorageMetadata { prefix: "FellowshipCollective", entries: [StorageEntryMetadata { name: "MemberCount", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0], docs: [" The number of members in the collective who have at least the rank according to the index", " of the vec."] }, StorageEntryMetadata { name: "Members", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 604, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The current members of the collective."] }, StorageEntryMetadata { name: "IdToIndex", modifier: Optional, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 605, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The index of each ranks's member into the group of members who have at least that rank."] }, StorageEntryMetadata { name: "IndexToId", modifier: Optional, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 606, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The members in the collective by index. All indices in the range `0..MemberCount` will", " return `Some`, however a member's index is not guaranteed to remain unchanged over time."] }, StorageEntryMetadata { name: "Voting", modifier: Optional, ty: Map { hashers: [Blake2_128Concat, Twox64Concat], key: UntrackedSymbol { id: 607, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 443, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Votes on a given proposal, if it is ongoing."] }, StorageEntryMetadata { name: "VotingCleanup", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 608, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 164, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 442, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 609, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 22, docs: [] }, PalletMetadata { name: "FellowshipReferenda", storage: Some(PalletStorageMetadata { prefix: "FellowshipReferenda", entries: [StorageEntryMetadata { name: "ReferendumCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The next free referendum index, aka the number of referenda started so far."] }, StorageEntryMetadata { name: "ReferendumInfoFor", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 610, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Information concerning any given referendum."] }, StorageEntryMetadata { name: "TrackQueue", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 612, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The sorted list of referenda ready to be decided but not yet being decided, ordered by", " conviction-weighted approvals.", "", " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."] }, StorageEntryMetadata { name: "DecidingCount", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 101, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0], docs: [" The number of referenda being decided currently."] }, StorageEntryMetadata { name: "MetadataOf", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The metadata is a general information concerning the referendum.", " The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON", " dump or IPFS hash of a JSON file.", "", " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)", " large preimages."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 165, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 445, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "SubmissionDeposit", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The minimum amount to be used as a deposit for a public referendum proposal."] }, PalletConstantMetadata { name: "MaxQueued", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [100, 0, 0, 0], docs: [" Maximum size of the referendum queue for a single track."] }, PalletConstantMetadata { name: "UndecidingTimeout", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [192, 137, 1, 0], docs: [" The number of blocks after submission that a referendum must begin being decided by.", " Once this passes, then anyone may cancel the referendum."] }, PalletConstantMetadata { name: "AlarmInterval", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [1, 0, 0, 0], docs: [" Quantization level for the referendum wakeup scheduler. A higher number will result in", " fewer storage reads/writes needed for smaller voters, but also result in delays to the", " automatic referendum status changes. Explicit servicing instructions are unaffected."] }, PalletConstantMetadata { name: "Tracks", ty: UntrackedSymbol { id: 597, marker: PhantomData<fn() -> core::any::TypeId> }, value: [40, 0, 0, 40, 99, 97, 110, 100, 105, 100, 97, 116, 101, 115, 10, 0, 0, 0, 156, 227, 11, 84, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 192, 137, 1, 0, 44, 1, 0, 0, 10, 0, 0, 0, 0, 0, 202, 154, 59, 0, 101, 205, 29, 0, 202, 154, 59, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 101, 205, 29, 1, 0, 28, 109, 101, 109, 98, 101, 114, 115, 10, 0, 0, 0, 246, 201, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 192, 137, 1, 0, 44, 1, 0, 0, 10, 0, 0, 0, 0, 0, 202, 154, 59, 0, 101, 205, 29, 0, 202, 154, 59, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 101, 205, 29, 2, 0, 44, 112, 114, 111, 102, 105, 99, 105, 101, 110, 116, 115, 10, 0, 0, 0, 246, 201, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 192, 137, 1, 0, 44, 1, 0, 0, 10, 0, 0, 0, 0, 0, 202, 154, 59, 0, 101, 205, 29, 0, 202, 154, 59, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 101, 205, 29, 3, 0, 28, 102, 101, 108, 108, 111, 119, 115, 10, 0, 0, 0, 246, 201, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 192, 137, 1, 0, 44, 1, 0, 0, 10, 0, 0, 0, 0, 0, 202, 154, 59, 0, 101, 205, 29, 0, 202, 154, 59, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 101, 205, 29, 4, 0, 56, 115, 101, 110, 105, 111, 114, 32, 102, 101, 108, 108, 111, 119, 115, 10, 0, 0, 0, 246, 201, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 192, 137, 1, 0, 44, 1, 0, 0, 10, 0, 0, 0, 0, 0, 202, 154, 59, 0, 101, 205, 29, 0, 202, 154, 59, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 101, 205, 29, 5, 0, 28, 101, 120, 112, 101, 114, 116, 115, 10, 0, 0, 0, 255, 224, 245, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 192, 137, 1, 0, 44, 1, 0, 0, 10, 0, 0, 0, 0, 0, 202, 154, 59, 0, 101, 205, 29, 0, 202, 154, 59, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 101, 205, 29, 6, 0, 56, 115, 101, 110, 105, 111, 114, 32, 101, 120, 112, 101, 114, 116, 115, 10, 0, 0, 0, 255, 224, 245, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 192, 137, 1, 0, 44, 1, 0, 0, 10, 0, 0, 0, 0, 0, 202, 154, 59, 0, 101, 205, 29, 0, 202, 154, 59, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 101, 205, 29, 7, 0, 28, 109, 97, 115, 116, 101, 114, 115, 10, 0, 0, 0, 255, 224, 245, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 192, 137, 1, 0, 44, 1, 0, 0, 10, 0, 0, 0, 0, 0, 202, 154, 59, 0, 101, 205, 29, 0, 202, 154, 59, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 101, 205, 29, 8, 0, 56, 115, 101, 110, 105, 111, 114, 32, 109, 97, 115, 116, 101, 114, 115, 10, 0, 0, 0, 255, 224, 245, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 192, 137, 1, 0, 44, 1, 0, 0, 10, 0, 0, 0, 0, 0, 202, 154, 59, 0, 101, 205, 29, 0, 202, 154, 59, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 101, 205, 29, 9, 0, 52, 103, 114, 97, 110, 100, 32, 109, 97, 115, 116, 101, 114, 115, 10, 0, 0, 0, 255, 224, 245, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 192, 137, 1, 0, 44, 1, 0, 0, 10, 0, 0, 0, 0, 0, 202, 154, 59, 0, 101, 205, 29, 0, 202, 154, 59, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 101, 205, 29], docs: [" Information concerning the different referendum tracks."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 613, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 23, docs: [] }, PalletMetadata { name: "Origins", storage: None, calls: None, event: None, constants: [], error: None, index: 43, docs: [] }, PalletMetadata { name: "Whitelist", storage: Some(PalletStorageMetadata { prefix: "Whitelist", entries: [StorageEntryMetadata { name: "WhitelistedCall", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 166, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 446, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 614, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 44, docs: [] }, PalletMetadata { name: "Claims", storage: Some(PalletStorageMetadata { prefix: "Claims", entries: [StorageEntryMetadata { name: "Claims", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 170, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, StorageEntryMetadata { name: "Total", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [] }, StorageEntryMetadata { name: "Vesting", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 170, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 172, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Vesting schedule for a claim.", " First balance is the total amount that should be held for vesting.", " Second balance is how much should be unlocked per block.", " The block number is when the vesting should start."] }, StorageEntryMetadata { name: "Signing", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 170, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 174, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The statement kind that must be signed, if any."] }, StorageEntryMetadata { name: "Preclaims", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 170, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Pre-claimed Ethereum accounts, by the Account ID that they are claimed to."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 167, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 450, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "Prefix", ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, value: [124, 80, 97, 121, 32, 82, 79, 67, 115, 32, 116, 111, 32, 116, 104, 101, 32, 82, 111, 99, 111, 99, 111, 32, 97, 99, 99, 111, 117, 110, 116, 58], docs: [] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 615, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 19, docs: [] }, PalletMetadata { name: "Utility", storage: None, calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 176, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 451, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "batched_calls_limit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [170, 42, 0, 0], docs: [" The limit on the number of batched calls."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 616, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 24, docs: [] }, PalletMetadata { name: "Identity", storage: Some(PalletStorageMetadata { prefix: "Identity", entries: [StorageEntryMetadata { name: "IdentityOf", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 617, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Information that is pertinent to identify the entity behind an account. First item is the", " registration, second is the account's primary username.", "", " TWOX-NOTE: OK ― `AccountId` is a secure hash."] }, StorageEntryMetadata { name: "UsernameOf", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 219, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Identifies the primary username of an account."] }, StorageEntryMetadata { name: "SuperOf", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 215, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The super-identity of an alternative \"sub\" identity together with its name, within that", " context. If the account is not some other account's sub-identity, then just `None`."] }, StorageEntryMetadata { name: "SubsOf", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 621, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Alternative \"sub\" identities of this account.", "", " The first item is the deposit, the second is a vector of the accounts.", "", " TWOX-NOTE: OK ― `AccountId` is a secure hash."] }, StorageEntryMetadata { name: "Registrars", modifier: Default, ty: Plain(UntrackedSymbol { id: 623, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The set of registrars. Not expected to get very big as can only be added through a", " special origin (likely a council motion).", "", " The index into this can be cast to `RegistrarIndex` to get a valid value."] }, StorageEntryMetadata { name: "AuthorityOf", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 627, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 628, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" A map of the accounts who are authorized to grant usernames."] }, StorageEntryMetadata { name: "UsernameInfoOf", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 219, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 629, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Reverse lookup from `username` to the `AccountId` that has registered it and the provider of", " the username. The `owner` value should be a key in the `UsernameOf` map, but it may not if", " the user has cleared their username or it has been removed.", "", " Multiple usernames may map to the same `AccountId`, but `UsernameOf` will only map to one", " primary username."] }, StorageEntryMetadata { name: "PendingUsernames", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 219, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 631, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Usernames that an authority has granted, but that the account controller has not confirmed", " that they want it. Used primarily in cases where the `AccountId` cannot provide a signature", " because they are a pure proxy, multisig, etc. In order to confirm it, they should call", " [accept_username](`Call::accept_username`).", "", " First tuple item is the account and second is the acceptance deadline."] }, StorageEntryMetadata { name: "UnbindingUsernames", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 219, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Usernames for which the authority that granted them has started the removal process by", " unbinding them. Each unbinding username maps to its grace period expiry, which is the first", " block in which the username could be deleted through a", " [remove_username](`Call::remove_username`) call."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 178, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 453, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "BasicDeposit", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [8, 76, 210, 194, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount held on deposit for a registered identity."] }, PalletConstantMetadata { name: "ByteDeposit", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [180, 220, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount held on deposit per encoded byte for a registered identity."] }, PalletConstantMetadata { name: "UsernameDeposit", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [128, 150, 91, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount held on deposit per registered username. This value should change only in", " runtime upgrades with proper migration of existing deposits."] }, PalletConstantMetadata { name: "SubAccountDeposit", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [104, 66, 93, 141, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount held on deposit for a registered subaccount. This should account for the fact", " that one storage item's value will increase by the size of an account ID, and there will", " be another trie item whose value is the size of an account ID plus 32 bytes."] }, PalletConstantMetadata { name: "MaxSubAccounts", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [100, 0, 0, 0], docs: [" The maximum number of sub-accounts allowed per identified account."] }, PalletConstantMetadata { name: "MaxRegistrars", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [20, 0, 0, 0], docs: [" Maximum number of registrars allowed in the system. Needed to bound the complexity", " of, e.g., updating judgements."] }, PalletConstantMetadata { name: "PendingUsernameExpiration", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [192, 137, 1, 0], docs: [" The number of blocks within which a username grant must be accepted."] }, PalletConstantMetadata { name: "UsernameGracePeriod", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [128, 151, 6, 0], docs: [" The number of blocks that must pass to enable the permanent deletion of a username by", " its respective authority."] }, PalletConstantMetadata { name: "MaxSuffixLength", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [7, 0, 0, 0], docs: [" The maximum length of a suffix."] }, PalletConstantMetadata { name: "MaxUsernameLength", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [32, 0, 0, 0], docs: [" The maximum length of a username, including its suffix and any system-added delimiters."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 632, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 25, docs: [] }, PalletMetadata { name: "Society", storage: Some(PalletStorageMetadata { prefix: "Society", entries: [StorageEntryMetadata { name: "Parameters", modifier: Optional, ty: Plain(UntrackedSymbol { id: 455, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The max number of members for the society at one time."] }, StorageEntryMetadata { name: "Pot", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Amount of our account balance that is specifically for the next round's bid(s)."] }, StorageEntryMetadata { name: "Founder", modifier: Optional, ty: Plain(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The first member."] }, StorageEntryMetadata { name: "Head", modifier: Optional, ty: Plain(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The most primary from the most recently approved rank 0 members in the society."] }, StorageEntryMetadata { name: "Rules", modifier: Optional, ty: Plain(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" A hash of the rules of this society concerning membership. Can only be set once and", " only by the founder."] }, StorageEntryMetadata { name: "Members", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 633, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The current members and their rank. Doesn't include `SuspendedMembers`."] }, StorageEntryMetadata { name: "Payouts", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 636, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Information regarding rank-0 payouts, past and future."] }, StorageEntryMetadata { name: "MemberCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The number of items in `Members` currently. (Doesn't include `SuspendedMembers`.)"] }, StorageEntryMetadata { name: "MemberByIndex", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The current items in `Members` keyed by their unique index. Keys are densely populated", " `0..MemberCount` (does not include `MemberCount`)."] }, StorageEntryMetadata { name: "SuspendedMembers", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 633, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The set of suspended members, with their old membership record."] }, StorageEntryMetadata { name: "RoundCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The number of rounds which have passed."] }, StorageEntryMetadata { name: "Bids", modifier: Default, ty: Plain(UntrackedSymbol { id: 638, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current bids, stored ordered by the value of the bid."] }, StorageEntryMetadata { name: "Candidates", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 642, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, StorageEntryMetadata { name: "Skeptic", modifier: Optional, ty: Plain(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current skeptic."] }, StorageEntryMetadata { name: "Votes", modifier: Optional, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 644, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 645, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Double map from Candidate -> Voter -> (Maybe) Vote."] }, StorageEntryMetadata { name: "VoteClearCursor", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 646, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Clear-cursor for Vote, map from Candidate -> (Maybe) Cursor."] }, StorageEntryMetadata { name: "NextHead", modifier: Optional, ty: Plain(UntrackedSymbol { id: 647, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" At the end of the claim period, this contains the most recently approved members (along with", " their bid and round ID) who is from the most recent round with the lowest bid. They will", " become the new `Head`."] }, StorageEntryMetadata { name: "ChallengeRoundCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The number of challenge rounds there have been. Used to identify stale DefenderVotes."] }, StorageEntryMetadata { name: "Defending", modifier: Optional, ty: Plain(UntrackedSymbol { id: 648, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The defending member currently being challenged, along with a running tally of votes."] }, StorageEntryMetadata { name: "DefenderVotes", modifier: Optional, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 607, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 645, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Votes for the defender, keyed by challenge round."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 220, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 454, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "PalletId", ty: UntrackedSymbol { id: 571, marker: PhantomData<fn() -> core::any::TypeId> }, value: [112, 121, 47, 115, 111, 99, 105, 101], docs: [" The societies's pallet id"] }, PalletConstantMetadata { name: "GraceStrikes", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [1, 0, 0, 0], docs: [" The maximum number of strikes before a member gets funds slashed."] }, PalletConstantMetadata { name: "PeriodSpend", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [144, 217, 18, 13, 132, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount of incentive paid within each period. Doesn't include VoterTip."] }, PalletConstantMetadata { name: "VotingPeriod", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [64, 25, 1, 0], docs: [" The number of blocks on which new candidates should be voted on. Together with", " `ClaimPeriod`, this sums to the number of blocks between candidate intake periods."] }, PalletConstantMetadata { name: "ClaimPeriod", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [128, 112, 0, 0], docs: [" The number of blocks on which new candidates can claim their membership and be the", " named head."] }, PalletConstantMetadata { name: "MaxLockDuration", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 78, 237, 0], docs: [" The maximum duration of the payout lock."] }, PalletConstantMetadata { name: "ChallengePeriod", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [192, 137, 1, 0], docs: [" The number of blocks between membership challenges."] }, PalletConstantMetadata { name: "MaxPayouts", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [8, 0, 0, 0], docs: [" The maximum number of payouts a member may have waiting unclaimed."] }, PalletConstantMetadata { name: "MaxBids", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 2, 0, 0], docs: [" The maximum number of bids at once."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 649, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 26, docs: [] }, PalletMetadata { name: "Recovery", storage: Some(PalletStorageMetadata { prefix: "Recovery", entries: [StorageEntryMetadata { name: "Recoverable", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 650, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The set of recoverable accounts and their recovery configuration."] }, StorageEntryMetadata { name: "ActiveRecoveries", modifier: Optional, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 644, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 652, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Active recovery attempts.", "", " First account is the account to be recovered, and the second account", " is the user trying to recover the account."] }, StorageEntryMetadata { name: "Proxy", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The list of allowed proxy accounts.", "", " Map from the user who can access it to the recovered account."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 221, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 456, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "ConfigDepositBase", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [4, 38, 105, 225, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The base amount of currency needed to reserve for creating a recovery configuration.", "", " This is held for an additional storage item whose value size is", " `2 + sizeof(BlockNumber, Balance)` bytes."] }, PalletConstantMetadata { name: "FriendDepositFactor", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [154, 80, 87, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount of currency needed per additional user when creating a recovery", " configuration.", "", " This is held for adding `sizeof(AccountId)` bytes more into a pre-existing storage", " value."] }, PalletConstantMetadata { name: "MaxFriends", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [9, 0, 0, 0], docs: [" The maximum amount of friends allowed in a recovery configuration.", "", " NOTE: The threshold programmed in this Pallet uses u16, so it does", " not really make sense to have a limit here greater than u16::MAX.", " But also, that is a lot more than you should probably set this value", " to anyway..."] }, PalletConstantMetadata { name: "RecoveryDeposit", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [4, 38, 105, 225, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The base amount of currency needed to reserve for starting a recovery.", "", " This is primarily held for deterring malicious recovery attempts, and should", " have a value large enough that a bad actor would choose not to place this", " deposit. It also acts to fund additional storage item whose value size is", " `sizeof(BlockNumber, Balance + T * AccountId)` bytes. Where T is a configurable", " threshold."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 653, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 27, docs: [] }, PalletMetadata { name: "Vesting", storage: Some(PalletStorageMetadata { prefix: "Vesting", entries: [StorageEntryMetadata { name: "Vesting", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 654, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Information regarding the vesting of a given account."] }, StorageEntryMetadata { name: "StorageVersion", modifier: Default, ty: Plain(UntrackedSymbol { id: 656, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Storage version of the pallet.", "", " New networks start with latest version, as determined by the genesis build."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 222, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 457, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "MinVestedTransfer", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [52, 161, 174, 198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The minimum amount transferred to call `vested_transfer`."] }, PalletConstantMetadata { name: "MaxVestingSchedules", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [28, 0, 0, 0], docs: [] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 657, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 28, docs: [] }, PalletMetadata { name: "Scheduler", storage: Some(PalletStorageMetadata { prefix: "Scheduler", entries: [StorageEntryMetadata { name: "IncompleteSince", modifier: Optional, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }, StorageEntryMetadata { name: "Agenda", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 658, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Items to be executed, indexed by the block number that they should be executed on."] }, StorageEntryMetadata { name: "Retries", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 662, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Retry configurations for items to be executed, indexed by task address."] }, StorageEntryMetadata { name: "Lookup", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 1, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Lookup from a name to the block number and index of the task.", "", " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4", " identities."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 224, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 458, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "MaximumWeight", ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, value: [11, 0, 128, 110, 135, 116, 1, 19, 204, 204, 204, 204, 204, 204, 204, 204], docs: [" The maximum weight that may be scheduled per block for any dispatchables."] }, PalletConstantMetadata { name: "MaxScheduledPerBlock", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [50, 0, 0, 0], docs: [" The maximum number of scheduled calls in the queue for a single block.", "", " NOTE:", " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a", " higher limit under `runtime-benchmarks` feature."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 663, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 29, docs: [] }, PalletMetadata { name: "Proxy", storage: Some(PalletStorageMetadata { prefix: "Proxy", entries: [StorageEntryMetadata { name: "Proxies", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 664, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The set of account proxies. Maps the account which has delegated to the accounts", " which are being delegated to, together with the amount held on deposit."] }, StorageEntryMetadata { name: "Announcements", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 668, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The announcements made by the proxy (key)."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 227, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 460, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "ProxyDepositBase", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [176, 125, 59, 135, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The base amount of currency needed to reserve for creating a proxy.", "", " This is held for an additional storage item whose value size is", " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."] }, PalletConstantMetadata { name: "ProxyDepositFactor", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [52, 115, 142, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount of currency needed per proxy added.", "", " This is held for adding 32 bytes plus an instance of `ProxyType` more into a", " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take", " into account `32 + proxy_type.encode().len()` bytes of data."] }, PalletConstantMetadata { name: "MaxProxies", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [32, 0, 0, 0], docs: [" The maximum amount of proxies allowed for a single account."] }, PalletConstantMetadata { name: "MaxPending", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [32, 0, 0, 0], docs: [" The maximum amount of time-delayed announcements that are allowed to be pending."] }, PalletConstantMetadata { name: "AnnouncementDepositBase", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [176, 125, 59, 135, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The base amount of currency needed to reserve for creating an announcement.", "", " This is held when a new storage item holding a `Balance` is created (typically 16", " bytes)."] }, PalletConstantMetadata { name: "AnnouncementDepositFactor", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [104, 230, 28, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount of currency needed per announcement made.", "", " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)", " into a pre-existing storage value."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 672, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 30, docs: [] }, PalletMetadata { name: "Multisig", storage: Some(PalletStorageMetadata { prefix: "Multisig", entries: [StorageEntryMetadata { name: "Multisigs", modifier: Optional, ty: Map { hashers: [Twox64Concat, Blake2_128Concat], key: UntrackedSymbol { id: 673, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 674, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The set of open multisig operations."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 230, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 461, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "DepositBase", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [240, 117, 32, 151, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The base amount of currency needed to reserve for creating a multisig execution or to", " store a dispatch call for later.", "", " This is held for an additional storage item whose value size is", " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is", " `32 + sizeof(AccountId)` bytes."] }, PalletConstantMetadata { name: "DepositFactor", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [128, 150, 91, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount of currency needed per unit threshold when creating a multisig execution.", "", " This is held for adding 32 bytes more into a pre-existing storage value."] }, PalletConstantMetadata { name: "MaxSignatories", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [100, 0, 0, 0], docs: [" The maximum amount of signatories allowed in the multisig."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 676, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 31, docs: [] }, PalletMetadata { name: "Preimage", storage: Some(PalletStorageMetadata { prefix: "Preimage", entries: [StorageEntryMetadata { name: "StatusFor", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 677, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The request status of a given hash."] }, StorageEntryMetadata { name: "RequestStatusFor", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 680, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The request status of a given hash."] }, StorageEntryMetadata { name: "PreimageFor", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 553, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 684, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 233, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 462, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 685, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 32, docs: [] }, PalletMetadata { name: "AssetRate", storage: Some(PalletStorageMetadata { prefix: "AssetRate", entries: [StorageEntryMetadata { name: "ConversionRateToNative", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 57, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 236, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Maps an asset to its fixed point representation in the native balance.", "", " E.g. `native_amount = asset_amount * ConversionRateToNative::<T>::get(asset_kind)`"] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 235, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 463, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 686, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 39, docs: [] }, PalletMetadata { name: "Bounties", storage: Some(PalletStorageMetadata { prefix: "Bounties", entries: [StorageEntryMetadata { name: "BountyCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" Number of bounty proposals that have been made."] }, StorageEntryMetadata { name: "Bounties", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 687, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Bounties that have been made."] }, StorageEntryMetadata { name: "BountyDescriptions", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 689, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The description of each bounty."] }, StorageEntryMetadata { name: "BountyApprovals", modifier: Default, ty: Plain(UntrackedSymbol { id: 567, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Bounty indices that have been approved but not yet funded."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 237, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 464, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "BountyDepositBase", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [52, 161, 174, 198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount held on deposit for placing a bounty proposal."] }, PalletConstantMetadata { name: "BountyDepositPayoutDelay", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 225, 0, 0], docs: [" The delay period for which a bounty beneficiary need to wait before claim the payout."] }, PalletConstantMetadata { name: "BountyUpdatePeriod", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [128, 198, 19, 0], docs: [" Bounty duration in blocks."] }, PalletConstantMetadata { name: "CuratorDepositMultiplier", ty: UntrackedSymbol { id: 570, marker: PhantomData<fn() -> core::any::TypeId> }, value: [32, 161, 7, 0], docs: [" The curator deposit is calculated as a percentage of the curator fee.", "", " This deposit has optional upper and lower bounds with `CuratorDepositMax` and", " `CuratorDepositMin`."] }, PalletConstantMetadata { name: "CuratorDepositMax", ty: UntrackedSymbol { id: 130, marker: PhantomData<fn() -> core::any::TypeId> }, value: [1, 4, 38, 105, 225, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Maximum amount of funds that should be placed in a deposit for making a proposal."] }, PalletConstantMetadata { name: "CuratorDepositMin", ty: UntrackedSymbol { id: 130, marker: PhantomData<fn() -> core::any::TypeId> }, value: [1, 82, 67, 222, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Minimum amount of funds that should be placed in a deposit for making a proposal."] }, PalletConstantMetadata { name: "BountyValueMinimum", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [104, 66, 93, 141, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Minimum value for a bounty."] }, PalletConstantMetadata { name: "DataDepositPerByte", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [85, 160, 252, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The amount held on deposit per byte within the tip report reason or bounty description."] }, PalletConstantMetadata { name: "MaximumReasonLength", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 64, 0, 0], docs: [" Maximum acceptable reason length.", "", " Benchmarks depend on this value, be sure to update weights file when changing this value"] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 690, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 35, docs: [] }, PalletMetadata { name: "ChildBounties", storage: Some(PalletStorageMetadata { prefix: "ChildBounties", entries: [StorageEntryMetadata { name: "ChildBountyCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" DEPRECATED: Replaced with `ParentTotalChildBounties` storage item keeping dedicated counts", " for each parent bounty. Number of total child bounties. Will be removed in May 2025."] }, StorageEntryMetadata { name: "ParentChildBounties", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0], docs: [" Number of active child bounties per parent bounty.", " Map of parent bounty index to number of child bounties."] }, StorageEntryMetadata { name: "ParentTotalChildBounties", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0], docs: [" Number of total child bounties per parent bounty, including completed bounties."] }, StorageEntryMetadata { name: "ChildBounties", modifier: Optional, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 691, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Child bounties that have been added."] }, StorageEntryMetadata { name: "ChildBountyDescriptionsV1", modifier: Optional, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 689, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The description of each child-bounty. Indexed by `(parent_id, child_id)`.", "", " This item replaces the `ChildBountyDescriptions` storage item from the V0 storage version."] }, StorageEntryMetadata { name: "V0ToV1ChildBountyIds", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The mapping of the child bounty ids from storage version `V0` to the new `V1` version.", "", " The `V0` ids based on total child bounty count [`ChildBountyCount`]`. The `V1` version ids", " based on the child bounty count per parent bounty [`ParentTotalChildBounties`].", " The item intended solely for client convenience and not used in the pallet's core logic."] }, StorageEntryMetadata { name: "ChildrenCuratorFees", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The cumulative child-bounty curator fee for each parent bounty."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 238, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 465, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "MaxActiveChildBountyCount", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [100, 0, 0, 0], docs: [" Maximum number of child bounties that can be added to a parent bounty."] }, PalletConstantMetadata { name: "ChildBountyValueMinimum", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [164, 134, 188, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Minimum value for a child-bounty."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 693, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 40, docs: [] }, PalletMetadata { name: "Nis", storage: Some(PalletStorageMetadata { prefix: "Nis", entries: [StorageEntryMetadata { name: "QueueTotals", modifier: Default, ty: Plain(UntrackedSymbol { id: 694, marker: PhantomData<fn() -> core::any::TypeId> }), default: [177, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The totals of items and balances within each queue. Saves a lot of storage reads in the", " case of sparsely packed queues.", "", " The vector is indexed by duration in `Period`s, offset by one, so information on the queue", " whose duration is one `Period` would be storage `0`."] }, StorageEntryMetadata { name: "Queues", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 695, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The queues of bids. Indexed by duration (in `Period`s)."] }, StorageEntryMetadata { name: "Summary", modifier: Default, ty: Plain(UntrackedSymbol { id: 698, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Summary information over the general state."] }, StorageEntryMetadata { name: "Receipts", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 699, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The currently outstanding receipts, indexed according to the order of creation."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 239, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 466, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "PalletId", ty: UntrackedSymbol { id: 571, marker: PhantomData<fn() -> core::any::TypeId> }, value: [112, 121, 47, 110, 105, 115, 32, 32], docs: [" The treasury's pallet id, used for deriving its sovereign account ID."] }, PalletConstantMetadata { name: "QueueCount", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [44, 1, 0, 0], docs: [" Number of duration queues in total. This sets the maximum duration supported, which is", " this value multiplied by `Period`."] }, PalletConstantMetadata { name: "MaxQueueLen", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [232, 3, 0, 0], docs: [" Maximum number of items that may be in each duration queue.", "", " Must be larger than zero."] }, PalletConstantMetadata { name: "FifoQueueLen", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [250, 0, 0, 0], docs: [" Portion of the queue which is free from ordering and just a FIFO.", "", " Must be no greater than `MaxQueueLen`."] }, PalletConstantMetadata { name: "BasePeriod", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [128, 151, 6, 0], docs: [" The base period for the duration queues. This is the common multiple across all", " supported freezing durations that can be bid upon."] }, PalletConstantMetadata { name: "MinBid", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 64, 122, 16, 243, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The minimum amount of funds that may be placed in a bid. Note that this", " does not actually limit the amount which may be represented in a receipt since bids may", " be split up by the system.", "", " It should be at least big enough to ensure that there is no possible storage spam attack", " or queue-filling attack."] }, PalletConstantMetadata { name: "MinReceipt", ty: UntrackedSymbol { id: 46, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 232, 118, 72, 23, 0, 0, 0], docs: [" The minimum amount of funds which may intentionally be left remaining under a single", " receipt."] }, PalletConstantMetadata { name: "IntakePeriod", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [50, 0, 0, 0], docs: [" The number of blocks between consecutive attempts to dequeue bids and create receipts.", "", " A larger value results in fewer storage hits each block, but a slower period to get to", " the target."] }, PalletConstantMetadata { name: "MaxIntakeWeight", ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> }, value: [7, 0, 208, 237, 144, 46, 19, 153, 153, 153, 153, 153, 153, 153, 25], docs: [" The maximum amount of bids that can consolidated into receipts in a single intake. A", " larger value here means less of the block available for transactions should there be a", " glut of bids."] }, PalletConstantMetadata { name: "ThawThrottle", ty: UntrackedSymbol { id: 700, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 0, 217, 233, 172, 45, 120, 3, 5, 0, 0, 0], docs: [" The maximum proportion which may be thawed and the period over which it is reset."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 701, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 38, docs: [] }, PalletMetadata { name: "NisCounterpartBalances", storage: Some(PalletStorageMetadata { prefix: "NisCounterpartBalances", entries: [StorageEntryMetadata { name: "TotalIssuance", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The total units issued in the system."] }, StorageEntryMetadata { name: "InactiveIssuance", modifier: Default, ty: Plain(UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The total units of outstanding deactivated balance in the system."] }, StorageEntryMetadata { name: "Account", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 5, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128], docs: [" The Balances pallet example of storing the balance of an account.", "", " # Example", "", " ```nocompile", "  impl pallet_balances::Config for Runtime {", "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>", "  }", " ```", "", " You can also store the balance of an account in the `System` pallet.", "", " # Example", "", " ```nocompile", "  impl pallet_balances::Config for Runtime {", "   type AccountStore = System", "  }", " ```", "", " But this comes with tradeoffs, storing account balances in the system pallet stores", " `frame_system` data alongside the account data contrary to storing account balances in the", " `Balances` pallet, which uses a `StorageMap` to store balances data only.", " NOTE: This is only used in the case that this pallet is used to store balances."] }, StorageEntryMetadata { name: "Locks", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 702, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Any liquidity locks on some account balances.", " NOTE: Should only be accessed when setting, changing and freeing a lock.", "", " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"] }, StorageEntryMetadata { name: "Reserves", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 703, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Named reserves on some account balances.", "", " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"] }, StorageEntryMetadata { name: "Holds", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 538, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Holds on account balances."] }, StorageEntryMetadata { name: "Freezes", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 545, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Freeze locks on account balances."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 240, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 467, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "ExistentialDeposit", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 228, 11, 84, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!", "", " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for", " this pallet. However, you do so at your own risk: this will open up a major DoS vector.", " In case you have multiple sources of provider references, you may also get unexpected", " behaviour if you set this to zero.", "", " Bottom line: Do yourself a favour and make it at least one!"] }, PalletConstantMetadata { name: "MaxLocks", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [4, 0, 0, 0], docs: [" The maximum number of locks that should exist on an account.", " Not strictly enforced, but used for weight estimation.", "", " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"] }, PalletConstantMetadata { name: "MaxReserves", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [4, 0, 0, 0], docs: [" The maximum number of named reserves that can exist on an account.", "", " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"] }, PalletConstantMetadata { name: "MaxFreezes", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [1, 0, 0, 0], docs: [" The maximum number of individual freeze locks that can exist on an account at any time."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 704, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 45, docs: [] }, PalletMetadata { name: "ParachainsOrigin", storage: None, calls: None, event: None, constants: [], error: None, index: 50, docs: [" There is no way to register an origin type in `construct_runtime` without a pallet the origin", " belongs to.", "", " This module fulfills only the single purpose of housing the `Origin` in `construct_runtime`."] }, PalletMetadata { name: "Configuration", storage: Some(PalletStorageMetadata { prefix: "Configuration", entries: [StorageEntryMetadata { name: "ActiveConfig", modifier: Default, ty: Plain(UntrackedSymbol { id: 705, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 100, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 39, 0, 0, 128, 178, 230, 14, 128, 195, 201, 1, 128, 150, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], docs: [" The active configuration for the current session."] }, StorageEntryMetadata { name: "PendingConfigs", modifier: Default, ty: Plain(UntrackedSymbol { id: 706, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Pending configuration changes.", "", " This is a list of configuration changes, each with a session index at which it should", " be applied.", "", " The list is sorted ascending by session index. Also, this list can only contain at most", " 2 items: for the next session and for the `scheduled_session`."] }, StorageEntryMetadata { name: "BypassConsistencyCheck", modifier: Default, ty: Plain(UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" If this is set, then the configuration setters will bypass the consistency checks. This", " is meant to be used only as the last resort."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 241, marker: PhantomData<fn() -> core::any::TypeId> } }), event: None, constants: [], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 708, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 51, docs: [] }, PalletMetadata { name: "ParasShared", storage: Some(PalletStorageMetadata { prefix: "ParasShared", entries: [StorageEntryMetadata { name: "CurrentSessionIndex", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The current session index."] }, StorageEntryMetadata { name: "ActiveValidatorIndices", modifier: Default, ty: Plain(UntrackedSymbol { id: 709, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" All the validators actively participating in parachain consensus.", " Indices are into the broader validator set."] }, StorageEntryMetadata { name: "ActiveValidatorKeys", modifier: Default, ty: Plain(UntrackedSymbol { id: 710, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The parachain attestation keys of the validators actively participating in parachain", " consensus. This should be the same length as `ActiveValidatorIndices`."] }, StorageEntryMetadata { name: "AllowedRelayParents", modifier: Default, ty: Plain(UntrackedSymbol { id: 711, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0], docs: [" All allowed relay-parents."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 251, marker: PhantomData<fn() -> core::any::TypeId> } }), event: None, constants: [], error: None, index: 52, docs: [] }, PalletMetadata { name: "ParaInclusion", storage: Some(PalletStorageMetadata { prefix: "ParaInclusion", entries: [StorageEntryMetadata { name: "V1", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 722, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Candidates pending availability by `ParaId`. They form a chain starting from the latest", " included head of the para.", " Use a different prefix post-migration to v1, since the v0 `PendingAvailability` storage", " would otherwise have the exact same prefix which could cause undefined behaviour when doing", " the migration."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 252, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 468, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 724, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 53, docs: [] }, PalletMetadata { name: "ParaInherent", storage: Some(PalletStorageMetadata { prefix: "ParaInherent", entries: [StorageEntryMetadata { name: "Included", modifier: Optional, ty: Plain(UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Whether the paras inherent was included within this block.", "", " The `Option<()>` is effectively a `bool`, but it never hits storage in the `None` variant", " due to the guarantees of FRAME's storage APIs.", "", " If this is `None` at the end of the block, we panic and render the block invalid."] }, StorageEntryMetadata { name: "OnChainVotes", modifier: Optional, ty: Plain(UntrackedSymbol { id: 725, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Scraped on chain data for extracting resolved disputes as well as backing votes."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 253, marker: PhantomData<fn() -> core::any::TypeId> } }), event: None, constants: [], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 730, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 54, docs: [] }, PalletMetadata { name: "ParaScheduler", storage: Some(PalletStorageMetadata { prefix: "ParaScheduler", entries: [StorageEntryMetadata { name: "ValidatorGroups", modifier: Default, ty: Plain(UntrackedSymbol { id: 731, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" All the validator groups. One for each core. Indices are into `ActiveValidators` - not the", " broader set of Polkadot validators, but instead just the subset used for parachains during", " this session.", "", " Bound: The number of cores is the sum of the numbers of parachains and parathread", " multiplexers. Reasonably, 100-1000. The dominant factor is the number of validators: safe", " upper bound at 10k."] }, StorageEntryMetadata { name: "SessionStartBlock", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The block number where the session start occurred. Used to track how many group rotations", " have occurred.", "", " Note that in the context of parachains modules the session change is signaled during", " the block and enacted at the end of the block (at the finalization stage, to be exact).", " Thus for all intents and purposes the effect of the session change is observed at the", " block following the session change, block number of which we save in this storage value."] }, StorageEntryMetadata { name: "ClaimQueue", modifier: Default, ty: Plain(UntrackedSymbol { id: 732, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" One entry for each availability core. The `VecDeque` represents the assignments to be", " scheduled on that core."] }] }), calls: None, event: None, constants: [], error: None, index: 55, docs: [] }, PalletMetadata { name: "Paras", storage: Some(PalletStorageMetadata { prefix: "Paras", entries: [StorageEntryMetadata { name: "PvfActiveVoteMap", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 267, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 737, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" All currently active PVF pre-checking votes.", "", " Invariant:", " - There are no PVF pre-checking votes that exists in list but not in the set and vice versa."] }, StorageEntryMetadata { name: "PvfActiveVoteList", modifier: Default, ty: Plain(UntrackedSymbol { id: 741, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The list of all currently active PVF votes. Auxiliary to `PvfActiveVoteMap`."] }, StorageEntryMetadata { name: "Parachains", modifier: Default, ty: Plain(UntrackedSymbol { id: 742, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" All lease holding parachains. Ordered ascending by `ParaId`. On demand parachains are not", " included.", "", " Consider using the [`ParachainsCache`] type of modifying."] }, StorageEntryMetadata { name: "ParaLifecycles", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 743, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The current lifecycle of a all known Para IDs."] }, StorageEntryMetadata { name: "Heads", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 275, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The head-data of every registered para."] }, StorageEntryMetadata { name: "MostRecentContext", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The context (relay-chain block number) of the most recent parachain head."] }, StorageEntryMetadata { name: "CurrentCodeHash", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 267, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The validation code hash of every live para.", "", " Corresponding code can be retrieved with [`CodeByHash`]."] }, StorageEntryMetadata { name: "PastCodeHash", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 744, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 267, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Actual past code hash, indicated by the para id as well as the block number at which it", " became outdated.", "", " Corresponding code can be retrieved with [`CodeByHash`]."] }, StorageEntryMetadata { name: "PastCodeMeta", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 745, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0], docs: [" Past code of parachains. The parachains themselves may not be registered anymore,", " but we also keep their code on-chain for the same amount of time as outdated code", " to keep it available for approval checkers."] }, StorageEntryMetadata { name: "PastCodePruning", modifier: Default, ty: Plain(UntrackedSymbol { id: 748, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Which paras have past code that needs pruning and the relay-chain block at which the code", " was replaced. Note that this is the actual height of the included block, not the expected", " height at which the code upgrade would be applied, although they may be equal.", " This is to ensure the entire acceptance period is covered, not an offset acceptance period", " starting from the time at which the parachain perceives a code upgrade as having occurred.", " Multiple entries for a single para are permitted. Ordered ascending by block number."] }, StorageEntryMetadata { name: "FutureCodeUpgrades", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The block number at which the planned code change is expected for a parachain.", "", " The change will be applied after the first parablock for this ID included which executes", " in the context of a relay chain block with a number >= `expected_at`."] }, StorageEntryMetadata { name: "FutureCodeUpgradesAt", modifier: Default, ty: Plain(UntrackedSymbol { id: 748, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The list of upcoming future code upgrades.", "", " Each item is a pair of the parachain and the expected block at which the upgrade should be", " applied. The upgrade will be applied at the given relay chain block. In contrast to", " [`FutureCodeUpgrades`] this code upgrade will be applied regardless the parachain making any", " progress or not.", "", " Ordered ascending by block number."] }, StorageEntryMetadata { name: "FutureCodeHash", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 267, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The actual future code hash of a para.", "", " Corresponding code can be retrieved with [`CodeByHash`]."] }, StorageEntryMetadata { name: "UpgradeGoAheadSignal", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 749, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" This is used by the relay-chain to communicate to a parachain a go-ahead with in the upgrade", " procedure.", "", " This value is absent when there are no upgrades scheduled or during the time the relay chain", " performs the checks. It is set at the first relay-chain block when the corresponding", " parachain can switch its upgrade function. As soon as the parachain's block is included, the", " value gets reset to `None`.", "", " NOTE that this field is used by parachains via merkle storage proofs, therefore changing", " the format will require migration of parachains."] }, StorageEntryMetadata { name: "UpgradeRestrictionSignal", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 750, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" This is used by the relay-chain to communicate that there are restrictions for performing", " an upgrade for this parachain.", "", " This may be a because the parachain waits for the upgrade cooldown to expire. Another", " potential use case is when we want to perform some maintenance (such as storage migration)", " we could restrict upgrades to make the process simpler.", "", " NOTE that this field is used by parachains via merkle storage proofs, therefore changing", " the format will require migration of parachains."] }, StorageEntryMetadata { name: "UpgradeCooldowns", modifier: Default, ty: Plain(UntrackedSymbol { id: 748, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The list of parachains that are awaiting for their upgrade restriction to cooldown.", "", " Ordered ascending by block number."] }, StorageEntryMetadata { name: "UpcomingUpgrades", modifier: Default, ty: Plain(UntrackedSymbol { id: 748, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The list of upcoming code upgrades.", "", " Each item is a pair of which para performs a code upgrade and at which relay-chain block it", " is expected at.", "", " Ordered ascending by block number."] }, StorageEntryMetadata { name: "ActionsQueue", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 742, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The actions to perform during the start of a specific session index."] }, StorageEntryMetadata { name: "UpcomingParasGenesis", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 427, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Upcoming paras instantiation arguments.", "", " NOTE that after PVF pre-checking is enabled the para genesis arg will have it's code set", " to empty. Instead, the code will be saved into the storage right away via `CodeByHash`."] }, StorageEntryMetadata { name: "CodeByHashRefs", modifier: Default, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 267, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0], docs: [" The number of reference on the validation code in [`CodeByHash`] storage."] }, StorageEntryMetadata { name: "CodeByHash", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 267, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 274, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Validation code stored by its hash.", "", " This storage is consistent with [`FutureCodeHash`], [`CurrentCodeHash`] and", " [`PastCodeHash`]."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 287, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 472, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "UnsignedPriority", ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, value: [255, 255, 255, 255, 255, 255, 255, 255], docs: [] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 751, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 56, docs: [] }, PalletMetadata { name: "Initializer", storage: Some(PalletStorageMetadata { prefix: "Initializer", entries: [StorageEntryMetadata { name: "HasInitialized", modifier: Optional, ty: Plain(UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Whether the parachains modules have been initialized within this block.", "", " Semantically a `bool`, but this guarantees it should never hit the trie,", " as this is cleared in `on_finalize` and Frame optimizes `None` values to be empty values.", "", " As a `bool`, `set(false)` and `remove()` both lead to the next `get()` being false, but one", " of them writes to the trie and one does not. This confusion makes `Option<()>` more suitable", " for the semantics of this variable."] }, StorageEntryMetadata { name: "BufferedSessionChanges", modifier: Default, ty: Plain(UntrackedSymbol { id: 752, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Buffered session changes.", "", " Typically this will be empty or one element long. Apart from that this item never hits", " the storage.", "", " However this is a `Vec` regardless to handle various edge cases that may occur at runtime", " upgrade boundaries or if governance intervenes."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 289, marker: PhantomData<fn() -> core::any::TypeId> } }), event: None, constants: [], error: None, index: 57, docs: [] }, PalletMetadata { name: "Dmp", storage: Some(PalletStorageMetadata { prefix: "Dmp", entries: [StorageEntryMetadata { name: "DownwardMessageQueues", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 754, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The downward messages addressed for a certain para."] }, StorageEntryMetadata { name: "DownwardMessageQueueHeads", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" A mapping that stores the downward message queue MQC head for each para.", "", " Each link in this chain has a form:", " `(prev_head, B, H(M))`, where", " - `prev_head`: is the previous head hash or zero if none.", " - `B`: is the relay-chain block number in which a message was appended.", " - `H(M)`: is the hash of the message being appended."] }, StorageEntryMetadata { name: "DeliveryFeeFactor", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 236, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 100, 167, 179, 182, 224, 13, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The factor to multiply the base delivery fee by."] }] }), calls: None, event: None, constants: [], error: None, index: 58, docs: [] }, PalletMetadata { name: "Hrmp", storage: Some(PalletStorageMetadata { prefix: "Hrmp", entries: [StorageEntryMetadata { name: "HrmpOpenChannelRequests", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 291, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 756, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The set of pending HRMP open channel requests.", "", " The set is accompanied by a list for iteration.", "", " Invariant:", " - There are no channels that exists in list but not in the set and vice versa."] }, StorageEntryMetadata { name: "HrmpOpenChannelRequestsList", modifier: Default, ty: Plain(UntrackedSymbol { id: 757, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }, StorageEntryMetadata { name: "HrmpOpenChannelRequestCount", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0], docs: [" This mapping tracks how many open channel requests are initiated by a given sender para.", " Invariant: `HrmpOpenChannelRequests` should contain the same number of items that has", " `(X, _)` as the number of `HrmpOpenChannelRequestCount` for `X`."] }, StorageEntryMetadata { name: "HrmpAcceptedChannelRequestCount", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0], docs: [" This mapping tracks how many open channel requests were accepted by a given recipient para.", " Invariant: `HrmpOpenChannelRequests` should contain the same number of items `(_, X)` with", " `confirmed` set to true, as the number of `HrmpAcceptedChannelRequestCount` for `X`."] }, StorageEntryMetadata { name: "HrmpCloseChannelRequests", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 291, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" A set of pending HRMP close channel requests that are going to be closed during the session", " change. Used for checking if a given channel is registered for closure.", "", " The set is accompanied by a list for iteration.", "", " Invariant:", " - There are no channels that exists in list but not in the set and vice versa."] }, StorageEntryMetadata { name: "HrmpCloseChannelRequestsList", modifier: Default, ty: Plain(UntrackedSymbol { id: 757, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [] }, StorageEntryMetadata { name: "HrmpWatermarks", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The HRMP watermark associated with each para.", " Invariant:", " - each para `P` used here as a key should satisfy `Paras::is_valid_para(P)` within a", "   session."] }, StorageEntryMetadata { name: "HrmpChannels", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 291, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 758, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" HRMP channel data associated with each para.", " Invariant:", " - each participant in the channel should satisfy `Paras::is_valid_para(P)` within a session."] }, StorageEntryMetadata { name: "HrmpIngressChannelsIndex", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 742, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Ingress/egress indexes allow to find all the senders and receivers given the opposite side.", " I.e.", "", " (a) ingress index allows to find all the senders for a given recipient.", " (b) egress index allows to find all the recipients for a given sender.", "", " Invariants:", " - for each ingress index entry for `P` each item `I` in the index should present in", "   `HrmpChannels` as `(I, P)`.", " - for each egress index entry for `P` each item `E` in the index should present in", "   `HrmpChannels` as `(P, E)`.", " - there should be no other dangling channels in `HrmpChannels`.", " - the vectors are sorted."] }, StorageEntryMetadata { name: "HrmpEgressChannelsIndex", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 742, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [] }, StorageEntryMetadata { name: "HrmpChannelContents", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 291, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 759, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Storage for the messages for each channel.", " Invariant: cannot be non-empty if the corresponding channel in `HrmpChannels` is `None`."] }, StorageEntryMetadata { name: "HrmpChannelDigests", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 761, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Maintains a mapping that can be used to answer the question: What paras sent a message at", " the given block number for a given receiver. Invariants:", " - The inner `Vec<ParaId>` is never empty.", " - The inner `Vec<ParaId>` cannot store two same `ParaId`.", " - The outer vector is sorted ascending by block number and cannot store two items with the", "   same block number."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 290, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 473, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 763, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 60, docs: [] }, PalletMetadata { name: "ParaSessionInfo", storage: Some(PalletStorageMetadata { prefix: "ParaSessionInfo", entries: [StorageEntryMetadata { name: "AssignmentKeysUnsafe", modifier: Default, ty: Plain(UntrackedSymbol { id: 764, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Assignment keys for the current session.", " Note that this API is private due to it being prone to 'off-by-one' at session boundaries.", " When in doubt, use `Sessions` API instead."] }, StorageEntryMetadata { name: "EarliestStoredSession", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The earliest session for which previous session info is stored."] }, StorageEntryMetadata { name: "Sessions", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 765, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Session information in a rolling window.", " Should have an entry in range `EarliestStoredSession..=CurrentSessionIndex`.", " Does not have any entries before the session index in the first session change notification."] }, StorageEntryMetadata { name: "AccountKeys", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 124, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The validator account keys of the validators actively participating in parachain consensus."] }, StorageEntryMetadata { name: "SessionExecutorParams", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 243, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Executor parameter set for a given session index"] }] }), calls: None, event: None, constants: [], error: None, index: 61, docs: [] }, PalletMetadata { name: "ParasDisputes", storage: Some(PalletStorageMetadata { prefix: "ParasDisputes", entries: [StorageEntryMetadata { name: "LastPrunedSession", modifier: Optional, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The last pruned session, if any. All data stored by this module", " references sessions."] }, StorageEntryMetadata { name: "Disputes", modifier: Optional, ty: Map { hashers: [Twox64Concat, Blake2_128Concat], key: UntrackedSymbol { id: 768, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 769, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" All ongoing or concluded disputes for the last several sessions."] }, StorageEntryMetadata { name: "BackersOnDisputes", modifier: Optional, ty: Map { hashers: [Twox64Concat, Blake2_128Concat], key: UntrackedSymbol { id: 768, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 770, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Backing votes stored for each dispute.", " This storage is used for slashing."] }, StorageEntryMetadata { name: "Included", modifier: Optional, ty: Map { hashers: [Twox64Concat, Blake2_128Concat], key: UntrackedSymbol { id: 768, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" All included blocks on the chain, as well as the block number in this chain that", " should be reverted back to if the candidate is disputed and determined to be invalid."] }, StorageEntryMetadata { name: "Frozen", modifier: Default, ty: Plain(UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Whether the chain is frozen. Starts as `None`. When this is `Some`,", " the chain will not accept any new parachain blocks for backing or inclusion,", " and its value indicates the last valid block number in the chain.", " It can only be set back to `None` by governance intervention."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 292, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 474, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 771, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 62, docs: [] }, PalletMetadata { name: "ParasSlashing", storage: Some(PalletStorageMetadata { prefix: "ParasSlashing", entries: [StorageEntryMetadata { name: "UnappliedSlashes", modifier: Optional, ty: Map { hashers: [Twox64Concat, Blake2_128Concat], key: UntrackedSymbol { id: 768, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 772, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Validators pending dispute slashes."] }, StorageEntryMetadata { name: "ValidatorSetCounts", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" `ValidatorSetCount` per session."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 293, marker: PhantomData<fn() -> core::any::TypeId> } }), event: None, constants: [], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 776, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 63, docs: [] }, PalletMetadata { name: "MessageQueue", storage: Some(PalletStorageMetadata { prefix: "MessageQueue", entries: [StorageEntryMetadata { name: "BookStateFor", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 298, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 777, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The index of the first and last (non-empty) pages."] }, StorageEntryMetadata { name: "ServiceHead", modifier: Optional, ty: Plain(UntrackedSymbol { id: 298, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The origin at which we should begin servicing."] }, StorageEntryMetadata { name: "Pages", modifier: Optional, ty: Map { hashers: [Twox64Concat, Twox64Concat], key: UntrackedSymbol { id: 780, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 781, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The map of page indices to pages."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 297, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 477, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "HeapSize", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 128, 0, 0], docs: [" The size of the page; this implies the maximum message size which can be sent.", "", " A good value depends on the expected message sizes, their weights, the weight that is", " available for processing them and the maximal needed message size. The maximal message", " size is slightly lower than this as defined by [`MaxMessageLenOf`]."] }, PalletConstantMetadata { name: "MaxStale", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [96, 0, 0, 0], docs: [" The maximum number of stale pages (i.e. of overweight messages) allowed before culling", " can happen. Once there are more stale pages than this, then historical pages may be", " dropped, even if they contain unprocessed overweight messages."] }, PalletConstantMetadata { name: "ServiceWeight", ty: UntrackedSymbol { id: 386, marker: PhantomData<fn() -> core::any::TypeId> }, value: [1, 7, 0, 160, 219, 33, 93, 19, 51, 51, 51, 51, 51, 51, 51, 51], docs: [" The amount of weight (if any) which should be provided to the message queue for", " servicing enqueued items `on_initialize`.", "", " This may be legitimately `None` in the case that you will call", " `ServiceQueues::service_queues` manually or set [`Self::IdleMaxServiceWeight`] to have", " it run in `on_idle`."] }, PalletConstantMetadata { name: "IdleMaxServiceWeight", ty: UntrackedSymbol { id: 386, marker: PhantomData<fn() -> core::any::TypeId> }, value: [1, 7, 0, 160, 219, 33, 93, 19, 51, 51, 51, 51, 51, 51, 51, 51], docs: [" The maximum amount of weight (if any) to be used from remaining weight `on_idle` which", " should be provided to the message queue for servicing enqueued items `on_idle`.", " Useful for parachains to process messages at the same block they are received.", "", " If `None`, it will not call `ServiceQueues::service_queues` in `on_idle`."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 783, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 64, docs: [] }, PalletMetadata { name: "OnDemandAssignmentProvider", storage: Some(PalletStorageMetadata { prefix: "OnDemandAssignmentProvider", entries: [StorageEntryMetadata { name: "ParaIdAffinity", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 784, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Maps a `ParaId` to `CoreIndex` and keeps track of how many assignments the scheduler has in", " it's lookahead. Keeping track of this affinity prevents parallel execution of the same", " `ParaId` on two or more `CoreIndex`es."] }, StorageEntryMetadata { name: "QueueStatus", modifier: Default, ty: Plain(UntrackedSymbol { id: 785, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 100, 167, 179, 182, 224, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Overall status of queue (both free + affinity entries)"] }, StorageEntryMetadata { name: "FreeEntries", modifier: Default, ty: Plain(UntrackedSymbol { id: 790, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Priority queue for all orders which don't yet (or not any more) have any core affinity."] }, StorageEntryMetadata { name: "AffinityEntries", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 470, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 790, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Queue entries that are currently bound to a particular core due to core affinity."] }, StorageEntryMetadata { name: "Revenue", modifier: Default, ty: Plain(UntrackedSymbol { id: 793, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Keeps track of accumulated revenue from on demand order sales."] }, StorageEntryMetadata { name: "Credits", modifier: Default, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Keeps track of credits owned by each account."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 300, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 479, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "TrafficDefaultValue", ty: UntrackedSymbol { id: 236, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 0, 100, 167, 179, 182, 224, 13, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The default value for the spot traffic multiplier."] }, PalletConstantMetadata { name: "MaxHistoricalRevenue", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [160, 0, 0, 0], docs: [" The maximum number of blocks some historical revenue", " information stored for."] }, PalletConstantMetadata { name: "PalletId", ty: UntrackedSymbol { id: 571, marker: PhantomData<fn() -> core::any::TypeId> }, value: [112, 121, 47, 111, 110, 100, 109, 100], docs: [" Identifier for the internal revenue balance."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 795, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 66, docs: [] }, PalletMetadata { name: "CoretimeAssignmentProvider", storage: Some(PalletStorageMetadata { prefix: "CoretimeAssignmentProvider", entries: [StorageEntryMetadata { name: "CoreSchedules", modifier: Optional, ty: Map { hashers: [Twox256], key: UntrackedSymbol { id: 796, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 797, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Scheduled assignment sets.", "", " Assignments as of the given block number. They will go into state once the block number is", " reached (and replace whatever was in there before)."] }, StorageEntryMetadata { name: "CoreDescriptors", modifier: Default, ty: Map { hashers: [Twox256], key: UntrackedSymbol { id: 470, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 798, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0], docs: [" Assignments which are currently active.", "", " They will be picked from `PendingAssignments` once we reach the scheduled block number in", " `PendingAssignments`."] }] }), calls: None, event: None, constants: [], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 806, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 68, docs: [] }, PalletMetadata { name: "Registrar", storage: Some(PalletStorageMetadata { prefix: "Registrar", entries: [StorageEntryMetadata { name: "PendingSwap", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Pending swap operations."] }, StorageEntryMetadata { name: "Paras", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 807, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Amount held on deposit for each para and the original depositor.", "", " The given account ID is responsible for registering the code and initial head data, but may", " only do so if it isn't yet registered. (After that, it's up to governance to do so.)"] }, StorageEntryMetadata { name: "NextFreeParaId", modifier: Default, ty: Plain(UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The next free `ParaId`."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 301, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 480, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "ParaDeposit", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 128, 202, 57, 97, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The deposit to be paid to run a on-demand parachain.", " This should include the cost for storing the genesis head and validation code."] }, PalletConstantMetadata { name: "DataDepositPerByte", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [85, 160, 252, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The deposit to be paid per byte stored on chain."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 809, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 70, docs: [] }, PalletMetadata { name: "Slots", storage: Some(PalletStorageMetadata { prefix: "Slots", entries: [StorageEntryMetadata { name: "Leases", modifier: Default, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 810, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Amounts held on deposit for each (possibly future) leased parachain.", "", " The actual amount locked on its behalf by any account at any time is the maximum of the", " second values of the items in this list whose first value is the account.", "", " The first item in the list is the amount locked for the current Lease Period. Following", " items are for the subsequent lease periods.", "", " The default value (an empty list) implies that the parachain no longer exists (or never", " existed) as far as this pallet is concerned.", "", " If a parachain doesn't exist *yet* but is scheduled to exist in the future, then it", " will be left-padded with one or more `None`s to denote the fact that nothing is held on", " deposit for the non-existent chain currently, but is held at some point in the future.", "", " It is illegal for a `None` value to trail in the list."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 302, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 481, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "LeasePeriod", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [64, 56, 0, 0], docs: [" The number of blocks over which a single period lasts."] }, PalletConstantMetadata { name: "LeaseOffset", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 0, 0, 0], docs: [" The number of blocks to offset each lease period by."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 811, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 71, docs: [] }, PalletMetadata { name: "Auctions", storage: Some(PalletStorageMetadata { prefix: "Auctions", entries: [StorageEntryMetadata { name: "AuctionCounter", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" Number of auctions started so far."] }, StorageEntryMetadata { name: "AuctionInfo", modifier: Optional, ty: Plain(UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Information relating to the current auction, if there is one.", "", " The first item in the tuple is the lease period index that the first of the four", " contiguous lease periods on auction is for. The second is the block number when the", " auction will \"begin to end\", i.e. the first block of the Ending Period of the auction."] }, StorageEntryMetadata { name: "ReservedAmounts", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 812, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Amounts currently reserved in the accounts of the bidders currently winning", " (sub-)ranges."] }, StorageEntryMetadata { name: "Winning", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 813, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The winning bids for each of the 10 ranges at each sample in the final Ending Period of", " the current auction. The map's key is the 0-based index into the Sample Size. The", " first sample of the ending period is 0; the last is `Sample Size - 1`."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 303, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 482, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "EndingPeriod", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [64, 25, 1, 0], docs: [" The number of blocks over which an auction may be retroactively ended."] }, PalletConstantMetadata { name: "SampleLength", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [20, 0, 0, 0], docs: [" The length of each sample to take during the ending period.", "", " `EndingPeriod` / `SampleLength` = Total # of Samples"] }, PalletConstantMetadata { name: "SlotRangeCount", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [36, 0, 0, 0], docs: [] }, PalletConstantMetadata { name: "LeasePeriodsPerSlot", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [8, 0, 0, 0], docs: [] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 816, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 72, docs: [] }, PalletMetadata { name: "Crowdloan", storage: Some(PalletStorageMetadata { prefix: "Crowdloan", entries: [StorageEntryMetadata { name: "Funds", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 817, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Info on all of the funds."] }, StorageEntryMetadata { name: "NewRaise", modifier: Default, ty: Plain(UntrackedSymbol { id: 742, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The funds that have had additional contributions during the last block. This is used", " in order to determine which funds should submit new or updated bids."] }, StorageEntryMetadata { name: "EndingsCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The number of auctions that have entered into their ending period so far."] }, StorageEntryMetadata { name: "NextFundIndex", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" Tracker for the next available fund index"] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 305, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 483, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "PalletId", ty: UntrackedSymbol { id: 571, marker: PhantomData<fn() -> core::any::TypeId> }, value: [112, 121, 47, 99, 102, 117, 110, 100], docs: [" `PalletId` for the crowdloan pallet. An appropriate value could be", " `PalletId(*b\"py/cfund\")`"] }, PalletConstantMetadata { name: "MinContribution", ty: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, value: [24, 228, 118, 72, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The minimum amount that may be contributed into a crowdloan. Should almost certainly be", " at least `ExistentialDeposit`."] }, PalletConstantMetadata { name: "RemoveKeysLimit", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [232, 3, 0, 0], docs: [" Max number of storage keys to remove per extrinsic call."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 819, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 73, docs: [] }, PalletMetadata { name: "Coretime", storage: None, calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 308, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 484, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "BrokerId", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [237, 3, 0, 0], docs: [" The ParaId of the coretime chain."] }, PalletConstantMetadata { name: "BrokerPotLocation", ty: UntrackedSymbol { id: 84, marker: PhantomData<fn() -> core::any::TypeId> }, value: [1, 1, 0, 109, 111, 100, 108, 112, 121, 47, 98, 114, 111, 107, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" The coretime chain pot location."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 820, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 74, docs: [] }, PalletMetadata { name: "MultiBlockMigrations", storage: Some(PalletStorageMetadata { prefix: "MultiBlockMigrations", entries: [StorageEntryMetadata { name: "Cursor", modifier: Optional, ty: Plain(UntrackedSymbol { id: 315, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The currently active migration to run and its cursor.", "", " `None` indicates that no migration is running."] }, StorageEntryMetadata { name: "Historic", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 320, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Set of all successfully executed migrations.", "", " This is used as blacklist, to not re-execute migrations that have not been removed from the", " codebase yet. Governance can regularly clear this out via `clear_historic`."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 313, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 485, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "CursorMaxLen", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 0, 1, 0], docs: [" The maximal length of an encoded cursor.", "", " A good default needs to selected such that no migration will ever have a cursor with MEL", " above this limit. This is statically checked in `integrity_test`."] }, PalletConstantMetadata { name: "IdentifierMaxLen", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 1, 0, 0], docs: [" The maximal length of an encoded identifier.", "", " A good default needs to selected such that no migration will ever have an identifier", " with MEL above this limit. This is statically checked in `integrity_test`."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 821, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 98, docs: [] }, PalletMetadata { name: "XcmPallet", storage: Some(PalletStorageMetadata { prefix: "XcmPallet", entries: [StorageEntryMetadata { name: "QueryCounter", modifier: Default, ty: Plain(UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" The latest available query index."] }, StorageEntryMetadata { name: "Queries", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 822, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The ongoing queries."] }, StorageEntryMetadata { name: "AssetTraps", modifier: Default, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0, 0, 0, 0], docs: [" The existing asset traps.", "", " Key is the blake2 256 hash of (origin, versioned `Assets`) pair. Value is the number of", " times this pair has been trapped (usually just 1 if it exists at all)."] }, StorageEntryMetadata { name: "SafeXcmVersion", modifier: Optional, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Default version to encode XCM when latest version of destination is unknown. If `None`,", " then the destinations whose XCM version is unknown are considered unreachable."] }, StorageEntryMetadata { name: "SupportedVersion", modifier: Optional, ty: Map { hashers: [Twox64Concat, Blake2_128Concat], key: UntrackedSymbol { id: 827, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The Latest versions that we know various locations support."] }, StorageEntryMetadata { name: "VersionNotifiers", modifier: Optional, ty: Map { hashers: [Twox64Concat, Blake2_128Concat], key: UntrackedSymbol { id: 827, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" All locations that we have requested version notifications from."] }, StorageEntryMetadata { name: "VersionNotifyTargets", modifier: Optional, ty: Map { hashers: [Twox64Concat, Blake2_128Concat], key: UntrackedSymbol { id: 827, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 828, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" The target locations that are subscribed to our version changes, as well as the most recent", " of our versions we informed them of."] }, StorageEntryMetadata { name: "VersionDiscoveryQueue", modifier: Default, ty: Plain(UntrackedSymbol { id: 829, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Destinations whose latest XCM version we would like to know. Duplicates not allowed, and", " the `u32` counter is the number of times that a send to the destination has been attempted,", " which is used as a prioritization."] }, StorageEntryMetadata { name: "CurrentMigration", modifier: Optional, ty: Plain(UntrackedSymbol { id: 832, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current migration's stage, if any."] }, StorageEntryMetadata { name: "RemoteLockedFungibles", modifier: Optional, ty: Map { hashers: [Twox64Concat, Blake2_128Concat, Blake2_128Concat], key: UntrackedSymbol { id: 833, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 834, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Fungible assets which we know are locked on a remote chain."] }, StorageEntryMetadata { name: "LockedFungibles", modifier: Optional, ty: Map { hashers: [Blake2_128Concat], key: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 838, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Fungible assets which we know are locked on this chain."] }, StorageEntryMetadata { name: "XcmExecutionSuspended", modifier: Default, ty: Plain(UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Global suspension state of the XCM executor."] }, StorageEntryMetadata { name: "ShouldRecordXcm", modifier: Default, ty: Plain(UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Whether or not incoming XCMs (both executed locally and received) should be recorded.", " Only one XCM program will be recorded at a time.", " This is meant to be used in runtime APIs, and it's advised it stays false", " for all other use cases, so as to not degrade regular performance.", "", " Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]", " implementation in the XCM executor configuration."] }, StorageEntryMetadata { name: "RecordedXcm", modifier: Optional, ty: Plain(UntrackedSymbol { id: 369, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" If [`ShouldRecordXcm`] is set to true, then the last XCM program executed locally", " will be stored here.", " Runtime APIs can fetch the XCM that was executed by accessing this value.", "", " Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]", " implementation in the XCM executor configuration."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 323, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 486, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 841, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 99, docs: [] }, PalletMetadata { name: "Beefy", storage: Some(PalletStorageMetadata { prefix: "Beefy", entries: [StorageEntryMetadata { name: "Authorities", modifier: Default, ty: Plain(UntrackedSymbol { id: 842, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The current authorities set"] }, StorageEntryMetadata { name: "ValidatorSetId", modifier: Default, ty: Plain(UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" The current validator set id"] }, StorageEntryMetadata { name: "NextAuthorities", modifier: Default, ty: Plain(UntrackedSymbol { id: 842, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Authorities set scheduled to be used with the next session"] }, StorageEntryMetadata { name: "SetIdSession", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" A mapping from BEEFY set ID to the index of the *most recent* session for which its", " members were responsible.", "", " This is only used for validating equivocation proofs. An equivocation proof must", " contains a key-ownership proof for a given session, therefore we need a way to tie", " together sessions and BEEFY set ids, i.e. we need to validate that a validator", " was the owner of a given key on a given session, and what the active set ID was", " during that session.", "", " TWOX-NOTE: `ValidatorSetId` is not under user control."] }, StorageEntryMetadata { name: "GenesisBlock", modifier: Default, ty: Plain(UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Block number where BEEFY consensus is enabled/started.", " By changing this (through privileged `set_new_genesis()`), BEEFY consensus is effectively", " restarted from the newly set block number."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 412, marker: PhantomData<fn() -> core::any::TypeId> } }), event: None, constants: [PalletConstantMetadata { name: "MaxAuthorities", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [160, 134, 1, 0], docs: [" The maximum number of authorities that can be added."] }, PalletConstantMetadata { name: "MaxNominators", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 0, 0, 0], docs: [" The maximum number of nominators for each validator."] }, PalletConstantMetadata { name: "MaxSetIdSessionEntries", ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, value: [168, 0, 0, 0, 0, 0, 0, 0], docs: [" The maximum number of entries to keep in the set id to session index mapping.", "", " Since the `SetIdSession` map is only used for validating equivocations this", " value should relate to the bonding duration of whatever staking system is", " being used (if any). If equivocation handling is not enabled then this value", " can be zero."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 844, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 240, docs: [] }, PalletMetadata { name: "Mmr", storage: Some(PalletStorageMetadata { prefix: "Mmr", entries: [StorageEntryMetadata { name: "RootHash", modifier: Default, ty: Plain(UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Latest MMR Root hash."] }, StorageEntryMetadata { name: "NumberOfLeaves", modifier: Default, ty: Plain(UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0], docs: [" Current size of the MMR (number of leaves)."] }, StorageEntryMetadata { name: "Nodes", modifier: Optional, ty: Map { hashers: [Identity], key: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Hashes of the nodes in the MMR.", "", " Note this collection only contains MMR peaks, the inner nodes (and leaves)", " are pruned and only stored in the Offchain DB."] }] }), calls: None, event: None, constants: [], error: None, index: 241, docs: [] }, PalletMetadata { name: "MmrLeaf", storage: Some(PalletStorageMetadata { prefix: "MmrLeaf", entries: [StorageEntryMetadata { name: "BeefyAuthorities", modifier: Default, ty: Plain(UntrackedSymbol { id: 845, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Details of current BEEFY authority set."] }, StorageEntryMetadata { name: "BeefyNextAuthorities", modifier: Default, ty: Plain(UntrackedSymbol { id: 845, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Details of next BEEFY authority set.", "", " This storage entry is used as cache for calls to `update_beefy_next_authority_set`."] }] }), calls: None, event: None, constants: [], error: None, index: 242, docs: [] }, PalletMetadata { name: "IdentityMigrator", storage: None, calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 425, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 488, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: None, index: 248, docs: [] }, PalletMetadata { name: "ParasSudoWrapper", storage: None, calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 426, marker: PhantomData<fn() -> core::any::TypeId> } }), event: None, constants: [], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 846, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 250, docs: [] }, PalletMetadata { name: "AssignedSlots", storage: Some(PalletStorageMetadata { prefix: "AssignedSlots", entries: [StorageEntryMetadata { name: "PermanentSlots", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 226, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Assigned permanent slots, with their start lease period, and duration."] }, StorageEntryMetadata { name: "PermanentSlotCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" Number of assigned (and active) permanent slots."] }, StorageEntryMetadata { name: "TemporarySlots", modifier: Optional, ty: Map { hashers: [Twox64Concat], key: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> }, value: UntrackedSymbol { id: 847, marker: PhantomData<fn() -> core::any::TypeId> } }, default: [0], docs: [" Assigned temporary slots."] }, StorageEntryMetadata { name: "TemporarySlotCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" Number of assigned temporary slots."] }, StorageEntryMetadata { name: "ActiveTemporarySlotCount", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" Number of active temporary slots in current slot lease period."] }, StorageEntryMetadata { name: "MaxTemporarySlots", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: ["  The max number of temporary slots that can be assigned."] }, StorageEntryMetadata { name: "MaxPermanentSlots", modifier: Default, ty: Plain(UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0], docs: [" The max number of permanent slots that can be assigned."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 428, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 489, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "PermanentSlotLeasePeriodLength", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [109, 1, 0, 0], docs: [" The number of lease periods a permanent parachain slot lasts."] }, PalletConstantMetadata { name: "TemporarySlotLeasePeriodLength", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [5, 0, 0, 0], docs: [" The number of lease periods a temporary parachain slot lasts."] }, PalletConstantMetadata { name: "MaxTemporarySlotPerLeasePeriod", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [5, 0, 0, 0], docs: [" The max number of temporary slots to be scheduled per lease periods."] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 848, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 251, docs: [] }, PalletMetadata { name: "ValidatorManager", storage: Some(PalletStorageMetadata { prefix: "ValidatorManager", entries: [StorageEntryMetadata { name: "ValidatorsToRetire", modifier: Default, ty: Plain(UntrackedSymbol { id: 124, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Validators that should be retired, because their Parachain was deregistered."] }, StorageEntryMetadata { name: "ValidatorsToAdd", modifier: Default, ty: Plain(UntrackedSymbol { id: 124, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" Validators that should be added."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 430, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 490, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: None, index: 252, docs: [] }, PalletMetadata { name: "StateTrieMigration", storage: Some(PalletStorageMetadata { prefix: "StateTrieMigration", entries: [StorageEntryMetadata { name: "MigrationProcess", modifier: Default, ty: Plain(UntrackedSymbol { id: 434, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], docs: [" Migration progress.", "", " This stores the snapshot of the last migrated keys. It can be set into motion and move", " forward by any of the means provided by this pallet."] }, StorageEntryMetadata { name: "AutoLimits", modifier: Default, ty: Plain(UntrackedSymbol { id: 432, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The limits that are imposed on automatic migrations.", "", " If set to None, then no automatic migration happens."] }, StorageEntryMetadata { name: "SignedMigrationMaxLimits", modifier: Optional, ty: Plain(UntrackedSymbol { id: 433, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The maximum limits that the signed migration could use.", "", " If not set, no signed submission is allowed."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 431, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 491, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [PalletConstantMetadata { name: "MaxKeyLen", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, value: [0, 2, 0, 0], docs: [" Maximal number of bytes that a key can have.", "", " FRAME itself does not limit the key length.", " The concrete value must therefore depend on your storage usage.", " A [`frame_support::storage::StorageNMap`] for example can have an arbitrary number of", " keys which are then hashed and concatenated, resulting in arbitrarily long keys.", "", " Use the *state migration RPC* to retrieve the length of the longest key in your", " storage: <https://github.com/paritytech/substrate/issues/11642>", "", " The migration will halt with a `Halted` event if this value is too small.", " Since there is no real penalty from over-estimating, it is advised to use a large", " value. The default is 512 byte.", "", " Some key lengths for reference:", " - [`frame_support::storage::StorageValue`]: 32 byte", " - [`frame_support::storage::StorageMap`]: 64 byte", " - [`frame_support::storage::StorageDoubleMap`]: 96 byte", "", " For more info see", " <https://www.shawntabrizi.com/blog/substrate/querying-substrate-storage-via-rpc/>"] }], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 493, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 254, docs: [] }, PalletMetadata { name: "RootTesting", storage: None, calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 437, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 494, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: None, index: 249, docs: [] }, PalletMetadata { name: "Sudo", storage: Some(PalletStorageMetadata { prefix: "Sudo", entries: [StorageEntryMetadata { name: "Key", modifier: Optional, ty: Plain(UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> }), default: [0], docs: [" The `AccountId` of the sudo key."] }] }), calls: Some(PalletCallMetadata { ty: UntrackedSymbol { id: 438, marker: PhantomData<fn() -> core::any::TypeId> } }), event: Some(PalletEventMetadata { ty: UntrackedSymbol { id: 495, marker: PhantomData<fn() -> core::any::TypeId> } }), constants: [], error: Some(PalletErrorMetadata { ty: UntrackedSymbol { id: 849, marker: PhantomData<fn() -> core::any::TypeId> } }), index: 255, docs: [] }], extrinsic: ExtrinsicMetadata { version: 4, address_ty: UntrackedSymbol { id: 120, marker: PhantomData<fn() -> core::any::TypeId> }, call_ty: UntrackedSymbol { id: 104, marker: PhantomData<fn() -> core::any::TypeId> }, signature_ty: UntrackedSymbol { id: 218, marker: PhantomData<fn() -> core::any::TypeId> }, extra_ty: UntrackedSymbol { id: 850, marker: PhantomData<fn() -> core::any::TypeId> }, signed_extensions: [SignedExtensionMetadata { identifier: "CheckNonZeroSender", ty: UntrackedSymbol { id: 851, marker: PhantomData<fn() -> core::any::TypeId> }, additional_signed: UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> } }, SignedExtensionMetadata { identifier: "CheckSpecVersion", ty: UntrackedSymbol { id: 852, marker: PhantomData<fn() -> core::any::TypeId> }, additional_signed: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, SignedExtensionMetadata { identifier: "CheckTxVersion", ty: UntrackedSymbol { id: 853, marker: PhantomData<fn() -> core::any::TypeId> }, additional_signed: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, SignedExtensionMetadata { identifier: "CheckGenesis", ty: UntrackedSymbol { id: 854, marker: PhantomData<fn() -> core::any::TypeId> }, additional_signed: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> } }, SignedExtensionMetadata { identifier: "CheckMortality", ty: UntrackedSymbol { id: 855, marker: PhantomData<fn() -> core::any::TypeId> }, additional_signed: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> } }, SignedExtensionMetadata { identifier: "CheckNonce", ty: UntrackedSymbol { id: 857, marker: PhantomData<fn() -> core::any::TypeId> }, additional_signed: UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> } }, SignedExtensionMetadata { identifier: "CheckWeight", ty: UntrackedSymbol { id: 858, marker: PhantomData<fn() -> core::any::TypeId> }, additional_signed: UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> } }, SignedExtensionMetadata { identifier: "ChargeTransactionPayment", ty: UntrackedSymbol { id: 859, marker: PhantomData<fn() -> core::any::TypeId> }, additional_signed: UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> } }, SignedExtensionMetadata { identifier: "CheckMetadataHash", ty: UntrackedSymbol { id: 860, marker: PhantomData<fn() -> core::any::TypeId> }, additional_signed: UntrackedSymbol { id: 459, marker: PhantomData<fn() -> core::any::TypeId> } }, SignedExtensionMetadata { identifier: "WeightReclaim", ty: UntrackedSymbol { id: 862, marker: PhantomData<fn() -> core::any::TypeId> }, additional_signed: UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> } }] }, ty: UntrackedSymbol { id: 863, marker: PhantomData<fn() -> core::any::TypeId> }, apis: [RuntimeApiMetadata { name: "Core", methods: [RuntimeApiMethodMetadata { name: "version", inputs: [], output: UntrackedSymbol { id: 508, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Returns the version of the runtime."] }, RuntimeApiMethodMetadata { name: "execute_block", inputs: [RuntimeApiMethodParamMetadata { name: "block", ty: UntrackedSymbol { id: 864, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Execute the given block."] }, RuntimeApiMethodMetadata { name: "initialize_block", inputs: [RuntimeApiMethodParamMetadata { name: "header", ty: UntrackedSymbol { id: 111, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 867, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Initialize a block with the given header and return the runtime executive mode."] }], docs: [" The `Core` runtime api that every Substrate runtime needs to implement."] }, RuntimeApiMetadata { name: "XcmPaymentApi", methods: [RuntimeApiMethodMetadata { name: "query_acceptable_payment_assets", inputs: [RuntimeApiMethodParamMetadata { name: "xcm_version", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 868, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Returns a list of acceptable payment assets.", "", " # Arguments", "", " * `xcm_version`: Version."] }, RuntimeApiMethodMetadata { name: "query_xcm_weight", inputs: [RuntimeApiMethodParamMetadata { name: "message", ty: UntrackedSymbol { id: 324, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 871, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Returns a weight needed to execute a XCM.", "", " # Arguments", "", " * `message`: `VersionedXcm`."] }, RuntimeApiMethodMetadata { name: "query_weight_to_asset_fee", inputs: [RuntimeApiMethodParamMetadata { name: "weight", ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "asset", ty: UntrackedSymbol { id: 411, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 872, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Converts a weight into a fee for the specified `AssetId`.", "", " # Arguments", "", " * `weight`: convertible `Weight`.", " * `asset`: `VersionedAssetId`."] }, RuntimeApiMethodMetadata { name: "query_delivery_fees", inputs: [RuntimeApiMethodParamMetadata { name: "destination", ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "message", ty: UntrackedSymbol { id: 324, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 873, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Get delivery fees for sending a specific `message` to a `destination`.", " These always come in a specific asset, defined by the chain.", "", " # Arguments", " * `message`: The message that'll be sent, necessary because most delivery fees are based on the", "   size of the message.", " * `destination`: The destination to send the message to. Different destinations may use", "   different senders that charge different fees."] }], docs: [" A trait of XCM payment API.", "", " API provides functionality for obtaining:", "", " * the weight required to execute an XCM message,", " * a list of acceptable `AssetId`s for message execution payment,", " * the cost of the weight in the specified acceptable `AssetId`.", " * the fees for an XCM message delivery.", "", " To determine the execution weight of the calls required for", " [`xcm::latest::Instruction::Transact`] instruction, `TransactionPaymentCallApi` can be used."] }, RuntimeApiMetadata { name: "DryRunApi", methods: [RuntimeApiMethodMetadata { name: "dry_run_call", inputs: [RuntimeApiMethodParamMetadata { name: "origin", ty: UntrackedSymbol { id: 156, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "call", ty: UntrackedSymbol { id: 104, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 874, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Dry run call."] }, RuntimeApiMethodMetadata { name: "dry_run_xcm", inputs: [RuntimeApiMethodParamMetadata { name: "origin_location", ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "xcm", ty: UntrackedSymbol { id: 399, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 882, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Dry run XCM program"] }], docs: [" API for dry-running extrinsics and XCM programs to get the programs that need to be passed to the fees API.", "", " All calls return a vector of tuples (location, xcm) where each \"xcm\" is executed in \"location\".", " If there's local execution, the location will be \"Here\".", " This vector can be used to calculate both execution and delivery fees.", "", " Calls or XCMs might fail when executed, this doesn't mean the result of these calls will be an `Err`.", " In those cases, there might still be a valid result, with the execution error inside it.", " The only reasons why these calls might return an error are listed in the [`Error`] enum."] }, RuntimeApiMetadata { name: "LocationToAccountApi", methods: [RuntimeApiMethodMetadata { name: "convert_location", inputs: [RuntimeApiMethodParamMetadata { name: "location", ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 884, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Converts `Location` to `AccountId`."] }], docs: [" API for useful conversions between XCM `Location` and `AccountId`."] }, RuntimeApiMetadata { name: "Metadata", methods: [RuntimeApiMethodMetadata { name: "metadata", inputs: [], output: UntrackedSymbol { id: 886, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Returns the metadata of a runtime."] }, RuntimeApiMethodMetadata { name: "metadata_at_version", inputs: [RuntimeApiMethodParamMetadata { name: "version", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 887, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Returns the metadata at a given version.", "", " If the given `version` isn't supported, this will return `None`.", " Use [`Self::metadata_versions`] to find out about supported metadata version of the runtime."] }, RuntimeApiMethodMetadata { name: "metadata_versions", inputs: [], output: UntrackedSymbol { id: 556, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Returns the supported metadata versions.", "", " This can be used to call `metadata_at_version`."] }], docs: [" The `Metadata` api trait that returns metadata for the runtime."] }, RuntimeApiMetadata { name: "BlockBuilder", methods: [RuntimeApiMethodMetadata { name: "apply_extrinsic", inputs: [RuntimeApiMethodParamMetadata { name: "extrinsic", ty: UntrackedSymbol { id: 865, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 888, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Apply the given extrinsic.", "", " Returns an inclusion outcome which specifies if this extrinsic is included in", " this block or not."] }, RuntimeApiMethodMetadata { name: "finalize_block", inputs: [], output: UntrackedSymbol { id: 111, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Finish the current block."] }, RuntimeApiMethodMetadata { name: "inherent_extrinsics", inputs: [RuntimeApiMethodParamMetadata { name: "inherent", ty: UntrackedSymbol { id: 892, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 866, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Generate inherent extrinsics. The inherent data will vary from chain to chain."] }, RuntimeApiMethodMetadata { name: "check_inherents", inputs: [RuntimeApiMethodParamMetadata { name: "block", ty: UntrackedSymbol { id: 864, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "data", ty: UntrackedSymbol { id: 892, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 896, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Check that the inherents are valid. The inherent data will vary from chain to chain."] }], docs: [" The `BlockBuilder` api trait that provides the required functionality for building a block."] }, RuntimeApiMetadata { name: "TaggedTransactionQueue", methods: [RuntimeApiMethodMetadata { name: "validate_transaction", inputs: [RuntimeApiMethodParamMetadata { name: "source", ty: UntrackedSymbol { id: 897, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "tx", ty: UntrackedSymbol { id: 865, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "block_hash", ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 898, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Validate the transaction.", "", " This method is invoked by the transaction pool to learn details about given transaction.", " The implementation should make sure to verify the correctness of the transaction", " against current state. The given `block_hash` corresponds to the hash of the block", " that is used as current state.", "", " Note that this call may be performed by the pool multiple times and transactions", " might be verified in any possible order."] }], docs: [" The `TaggedTransactionQueue` api trait for interfering with the transaction queue."] }, RuntimeApiMetadata { name: "OffchainWorkerApi", methods: [RuntimeApiMethodMetadata { name: "offchain_worker", inputs: [RuntimeApiMethodParamMetadata { name: "header", ty: UntrackedSymbol { id: 111, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Starts the off-chain task for given block header."] }], docs: [" The offchain worker api."] }, RuntimeApiMetadata { name: "ParachainHost", methods: [RuntimeApiMethodMetadata { name: "validators", inputs: [], output: UntrackedSymbol { id: 710, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Get the current validators."] }, RuntimeApiMethodMetadata { name: "validator_groups", inputs: [], output: UntrackedSymbol { id: 900, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Returns the validator groups and rotation info localized based on the hypothetical child", "  of a block whose state  this is invoked on. Note that `now` in the `GroupRotationInfo`", " should be the successor of the number of the block."] }, RuntimeApiMethodMetadata { name: "availability_cores", inputs: [], output: UntrackedSymbol { id: 902, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Yields information on all availability cores as relevant to the child block.", " Cores are either free or occupied. Free cores can have paras assigned to them."] }, RuntimeApiMethodMetadata { name: "persisted_validation_data", inputs: [RuntimeApiMethodParamMetadata { name: "para_id", ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "assumption", ty: UntrackedSymbol { id: 909, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 910, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Yields the persisted validation data for the given `ParaId` along with an assumption that", " should be used if the para currently occupies a core.", "", " Returns `None` if either the para is not registered or the assumption is `Freed`", " and the para already occupies a core."] }, RuntimeApiMethodMetadata { name: "assumed_validation_data", inputs: [RuntimeApiMethodParamMetadata { name: "para_id", ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "expected_persisted_validation_data_hash", ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 912, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Returns the persisted validation data for the given `ParaId` along with the corresponding", " validation code hash. Instead of accepting assumption about the para, matches the validation", " data hash against an expected one and yields `None` if they're not equal."] }, RuntimeApiMethodMetadata { name: "check_validation_outputs", inputs: [RuntimeApiMethodParamMetadata { name: "para_id", ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "outputs", ty: UntrackedSymbol { id: 268, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 8, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Checks if the given validation outputs pass the acceptance criteria."] }, RuntimeApiMethodMetadata { name: "session_index_for_child", inputs: [], output: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Returns the session index expected at a child of the block.", "", " This can be used to instantiate a `SigningContext`."] }, RuntimeApiMethodMetadata { name: "validation_code", inputs: [RuntimeApiMethodParamMetadata { name: "para_id", ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "assumption", ty: UntrackedSymbol { id: 909, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 273, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Fetch the validation code used by a para, making the given `OccupiedCoreAssumption`.", "", " Returns `None` if either the para is not registered or the assumption is `Freed`", " and the para already occupies a core."] }, RuntimeApiMethodMetadata { name: "candidate_pending_availability", inputs: [RuntimeApiMethodParamMetadata { name: "para_id", ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 914, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Get the receipt of a candidate pending availability. This returns `Some` for any paras", " assigned to occupied cores in `availability_cores` and `None` otherwise."] }, RuntimeApiMethodMetadata { name: "candidate_events", inputs: [], output: UntrackedSymbol { id: 915, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Get a vector of events concerning candidates that occurred within a block."] }, RuntimeApiMethodMetadata { name: "dmq_contents", inputs: [RuntimeApiMethodParamMetadata { name: "recipient", ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 754, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Get all the pending inbound messages in the downward message queue for a para."] }, RuntimeApiMethodMetadata { name: "inbound_hrmp_channels_contents", inputs: [RuntimeApiMethodParamMetadata { name: "recipient", ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 917, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Get the contents of all channels addressed to the given recipient. Channels that have no", " messages in them are also included."] }, RuntimeApiMethodMetadata { name: "validation_code_by_hash", inputs: [RuntimeApiMethodParamMetadata { name: "hash", ty: UntrackedSymbol { id: 267, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 273, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Get the validation code from its hash."] }, RuntimeApiMethodMetadata { name: "on_chain_votes", inputs: [], output: UntrackedSymbol { id: 920, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Scrape dispute relevant from on-chain, backing votes and resolved disputes."] }, RuntimeApiMethodMetadata { name: "session_info", inputs: [RuntimeApiMethodParamMetadata { name: "index", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 921, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Get the session info for the given session, if stored.", "", " NOTE: This function is only available since parachain host version 2."] }, RuntimeApiMethodMetadata { name: "submit_pvf_check_statement", inputs: [RuntimeApiMethodParamMetadata { name: "stmt", ty: UntrackedSymbol { id: 288, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "signature", ty: UntrackedSymbol { id: 261, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 121, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Submits a PVF pre-checking statement into the transaction pool.", "", " NOTE: This function is only available since parachain host version 2."] }, RuntimeApiMethodMetadata { name: "pvfs_require_precheck", inputs: [], output: UntrackedSymbol { id: 741, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Returns code hashes of PVFs that require pre-checking by validators in the active set.", "", " NOTE: This function is only available since parachain host version 2."] }, RuntimeApiMethodMetadata { name: "validation_code_hash", inputs: [RuntimeApiMethodParamMetadata { name: "para_id", ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "assumption", ty: UntrackedSymbol { id: 909, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 922, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Fetch the hash of the validation code used by a para, making the given `OccupiedCoreAssumption`.", "", " NOTE: This function is only available since parachain host version 2."] }, RuntimeApiMethodMetadata { name: "disputes", inputs: [], output: UntrackedSymbol { id: 923, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Returns all onchain disputes."] }, RuntimeApiMethodMetadata { name: "session_executor_params", inputs: [RuntimeApiMethodParamMetadata { name: "session_index", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 925, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Returns execution parameters for the session."] }, RuntimeApiMethodMetadata { name: "unapplied_slashes", inputs: [], output: UntrackedSymbol { id: 926, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Returns a list of validators that lost a past session dispute and need to be slashed.", " NOTE: This function is only available since parachain host version 5."] }, RuntimeApiMethodMetadata { name: "key_ownership_proof", inputs: [RuntimeApiMethodParamMetadata { name: "validator_id", ty: UntrackedSymbol { id: 134, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 928, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Returns a merkle proof of a validator session key.", " NOTE: This function is only available since parachain host version 5."] }, RuntimeApiMethodMetadata { name: "submit_report_dispute_lost", inputs: [RuntimeApiMethodParamMetadata { name: "dispute_proof", ty: UntrackedSymbol { id: 294, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "key_ownership_proof", ty: UntrackedSymbol { id: 929, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 930, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Submit an unsigned extrinsic to slash validators who lost a dispute about", " a candidate of a past session.", " NOTE: This function is only available since parachain host version 5."] }, RuntimeApiMethodMetadata { name: "minimum_backing_votes", inputs: [], output: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Get the minimum number of backing votes for a parachain candidate.", " This is a staging method! Do not use on production runtimes!"] }, RuntimeApiMethodMetadata { name: "para_backing_state", inputs: [RuntimeApiMethodParamMetadata { name: "__runtime_api_generated_name_0__", ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 931, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Returns the state of parachain backing for a given para."] }, RuntimeApiMethodMetadata { name: "async_backing_params", inputs: [], output: UntrackedSymbol { id: 242, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Returns candidate's acceptance limitations for asynchronous backing for a relay parent."] }, RuntimeApiMethodMetadata { name: "disabled_validators", inputs: [], output: UntrackedSymbol { id: 709, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Returns a list of all disabled validators at the given block."] }, RuntimeApiMethodMetadata { name: "node_features", inputs: [], output: UntrackedSymbol { id: 258, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Get node features.", " This is a staging method! Do not use on production runtimes!"] }, RuntimeApiMethodMetadata { name: "approval_voting_params", inputs: [], output: UntrackedSymbol { id: 249, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Approval voting configuration parameters"] }, RuntimeApiMethodMetadata { name: "claim_queue", inputs: [], output: UntrackedSymbol { id: 943, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Claim queue"] }, RuntimeApiMethodMetadata { name: "candidates_pending_availability", inputs: [RuntimeApiMethodParamMetadata { name: "para_id", ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 946, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Elastic scaling support"] }, RuntimeApiMethodMetadata { name: "backing_constraints", inputs: [RuntimeApiMethodParamMetadata { name: "para_id", ty: UntrackedSymbol { id: 160, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 947, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Returns the constraints on the actions that can be taken by a new parachain", " block."] }, RuntimeApiMethodMetadata { name: "scheduling_lookahead", inputs: [], output: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Retrieve the scheduling lookahead"] }], docs: [" The API for querying the state of parachains on-chain."] }, RuntimeApiMetadata { name: "BeefyApi", methods: [RuntimeApiMethodMetadata { name: "beefy_genesis", inputs: [], output: UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Return the block number where BEEFY consensus is enabled/started"] }, RuntimeApiMethodMetadata { name: "validator_set", inputs: [], output: UntrackedSymbol { id: 949, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Return the current active BEEFY validator set"] }, RuntimeApiMethodMetadata { name: "submit_report_double_voting_unsigned_extrinsic", inputs: [RuntimeApiMethodParamMetadata { name: "equivocation_proof", ty: UntrackedSymbol { id: 413, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "key_owner_proof", ty: UntrackedSymbol { id: 951, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 930, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Submits an unsigned extrinsic to report a double voting equivocation. The caller", " must provide the double voting proof and a key ownership proof", " (should be obtained using `generate_key_ownership_proof`). The", " extrinsic will be unsigned and should only be accepted for local", " authorship (not to be broadcast to the network). This method returns", " `None` when creation of the extrinsic fails, e.g. if equivocation", " reporting is disabled for the given runtime (i.e. this method is", " hardcoded to return `None`). Only useful in an offchain context."] }, RuntimeApiMethodMetadata { name: "submit_report_fork_voting_unsigned_extrinsic", inputs: [RuntimeApiMethodParamMetadata { name: "equivocation_proof", ty: UntrackedSymbol { id: 952, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "key_owner_proof", ty: UntrackedSymbol { id: 951, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 930, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Submits an unsigned extrinsic to report a fork voting equivocation. The caller", " must provide the fork voting proof (the ancestry proof should be obtained using", " `generate_ancestry_proof`) and a key ownership proof (should be obtained using", " `generate_key_ownership_proof`). The extrinsic will be unsigned and should only", " be accepted for local authorship (not to be broadcast to the network). This method", " returns `None` when creation of the extrinsic fails, e.g. if equivocation", " reporting is disabled for the given runtime (i.e. this method is", " hardcoded to return `None`). Only useful in an offchain context."] }, RuntimeApiMethodMetadata { name: "submit_report_future_block_voting_unsigned_extrinsic", inputs: [RuntimeApiMethodParamMetadata { name: "equivocation_proof", ty: UntrackedSymbol { id: 424, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "key_owner_proof", ty: UntrackedSymbol { id: 951, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 930, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Submits an unsigned extrinsic to report a future block voting equivocation. The caller", " must provide the future block voting proof and a key ownership proof", " (should be obtained using `generate_key_ownership_proof`).", " The extrinsic will be unsigned and should only be accepted for local", " authorship (not to be broadcast to the network). This method returns", " `None` when creation of the extrinsic fails, e.g. if equivocation", " reporting is disabled for the given runtime (i.e. this method is", " hardcoded to return `None`). Only useful in an offchain context."] }, RuntimeApiMethodMetadata { name: "generate_key_ownership_proof", inputs: [RuntimeApiMethodParamMetadata { name: "set_id", ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "authority_id", ty: UntrackedSymbol { id: 137, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 953, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Generates a proof of key ownership for the given authority in the", " given set. An example usage of this module is coupled with the", " session historical module to prove that a given authority key is", " tied to a given staking identity during a specific session. Proofs", " of key ownership are necessary for submitting equivocation reports.", " NOTE: even though the API takes a `set_id` as parameter the current", " implementations ignores this parameter and instead relies on this", " method being called at the correct block height, i.e. any point at", " which the given set id is live on-chain. Future implementations will", " instead use indexed data through an offchain worker, not requiring", " older states to be available."] }, RuntimeApiMethodMetadata { name: "generate_ancestry_proof", inputs: [RuntimeApiMethodParamMetadata { name: "prev_block_number", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "best_known_block_number", ty: UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 953, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Generates a proof that the `prev_block_number` is part of the canonical chain at", " `best_known_block_number`."] }], docs: [" API necessary for BEEFY voters."] }, RuntimeApiMetadata { name: "MmrApi", methods: [RuntimeApiMethodMetadata { name: "mmr_root", inputs: [], output: UntrackedSymbol { id: 954, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Return the on-chain MMR root hash."] }, RuntimeApiMethodMetadata { name: "mmr_leaf_count", inputs: [], output: UntrackedSymbol { id: 956, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Return the number of MMR blocks in the chain."] }, RuntimeApiMethodMetadata { name: "generate_proof", inputs: [RuntimeApiMethodParamMetadata { name: "block_numbers", ty: UntrackedSymbol { id: 556, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "best_known_block_number", ty: UntrackedSymbol { id: 151, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 957, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Generate MMR proof for a series of block numbers. If `best_known_block_number = Some(n)`,", " use historical MMR state at given block height `n`. Else, use current MMR state."] }, RuntimeApiMethodMetadata { name: "verify_proof", inputs: [RuntimeApiMethodParamMetadata { name: "leaves", ty: UntrackedSymbol { id: 959, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "proof", ty: UntrackedSymbol { id: 961, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 963, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Verify MMR proof against on-chain MMR for a batch of leaves.", "", " Note this function will use on-chain MMR root hash and check if the proof matches the hash.", " Note, the leaves should be sorted such that corresponding leaves and leaf indices have the", " same position in both the `leaves` vector and the `leaf_indices` vector contained in the [LeafProof]"] }, RuntimeApiMethodMetadata { name: "verify_proof_stateless", inputs: [RuntimeApiMethodParamMetadata { name: "root", ty: UntrackedSymbol { id: 13, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "leaves", ty: UntrackedSymbol { id: 959, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "proof", ty: UntrackedSymbol { id: 961, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 963, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Verify MMR proof against given root hash for a batch of leaves.", "", " Note this function does not require any on-chain storage - the", " proof is verified against given MMR root hash.", "", " Note, the leaves should be sorted such that corresponding leaves and leaf indices have the", " same position in both the `leaves` vector and the `leaf_indices` vector contained in the [LeafProof]"] }], docs: [" API to interact with MMR pallet."] }, RuntimeApiMetadata { name: "GrandpaApi", methods: [RuntimeApiMethodMetadata { name: "grandpa_authorities", inputs: [], output: UntrackedSymbol { id: 53, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Get the current GRANDPA authorities and weights. This should not change except", " for when changes are scheduled and the corresponding delay has passed.", "", " When called at block B, it will return the set of authorities that should be", " used to finalize descendants of this block (B+1, B+2, ...). The block B itself", " is finalized by the authorities from block B-1."] }, RuntimeApiMethodMetadata { name: "submit_report_equivocation_unsigned_extrinsic", inputs: [RuntimeApiMethodParamMetadata { name: "equivocation_proof", ty: UntrackedSymbol { id: 140, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "key_owner_proof", ty: UntrackedSymbol { id: 951, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 930, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Submits an unsigned extrinsic to report an equivocation. The caller", " must provide the equivocation proof and a key ownership proof", " (should be obtained using `generate_key_ownership_proof`). The", " extrinsic will be unsigned and should only be accepted for local", " authorship (not to be broadcast to the network). This method returns", " `None` when creation of the extrinsic fails, e.g. if equivocation", " reporting is disabled for the given runtime (i.e. this method is", " hardcoded to return `None`). Only useful in an offchain context."] }, RuntimeApiMethodMetadata { name: "generate_key_ownership_proof", inputs: [RuntimeApiMethodParamMetadata { name: "set_id", ty: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "authority_id", ty: UntrackedSymbol { id: 55, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 953, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Generates a proof of key ownership for the given authority in the", " given set. An example usage of this module is coupled with the", " session historical module to prove that a given authority key is", " tied to a given staking identity during a specific session. Proofs", " of key ownership are necessary for submitting equivocation reports.", " NOTE: even though the API takes a `set_id` as parameter the current", " implementations ignore this parameter and instead rely on this", " method being called at the correct block height, i.e. any point at", " which the given set id is live on-chain. Future implementations will", " instead use indexed data through an offchain worker, not requiring", " older states to be available."] }, RuntimeApiMethodMetadata { name: "current_set_id", inputs: [], output: UntrackedSymbol { id: 12, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Get current GRANDPA authority set id."] }], docs: [" APIs for integrating the GRANDPA finality gadget into runtimes.", " This should be implemented on the runtime side.", "", " This is primarily used for negotiating authority-set changes for the", " gadget. GRANDPA uses a signaling model of changing authority sets:", " changes should be signaled with a delay of N blocks, and then automatically", " applied in the runtime after those N blocks have passed.", "", " The consensus protocol will coordinate the handoff externally."] }, RuntimeApiMetadata { name: "BabeApi", methods: [RuntimeApiMethodMetadata { name: "configuration", inputs: [], output: UntrackedSymbol { id: 964, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Return the configuration for BABE."] }, RuntimeApiMethodMetadata { name: "current_epoch_start", inputs: [], output: UntrackedSymbol { id: 113, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Returns the slot that started the current epoch."] }, RuntimeApiMethodMetadata { name: "current_epoch", inputs: [], output: UntrackedSymbol { id: 965, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Returns information regarding the current epoch."] }, RuntimeApiMethodMetadata { name: "next_epoch", inputs: [], output: UntrackedSymbol { id: 965, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Returns information regarding the next epoch (which was already", " previously announced)."] }, RuntimeApiMethodMetadata { name: "generate_key_ownership_proof", inputs: [RuntimeApiMethodParamMetadata { name: "slot", ty: UntrackedSymbol { id: 113, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "authority_id", ty: UntrackedSymbol { id: 112, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 966, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Generates a proof of key ownership for the given authority in the", " current epoch. An example usage of this module is coupled with the", " session historical module to prove that a given authority key is", " tied to a given staking identity during a specific session. Proofs", " of key ownership are necessary for submitting equivocation reports.", " NOTE: even though the API takes a `slot` as parameter the current", " implementations ignores this parameter and instead relies on this", " method being called at the correct block height, i.e. any point at", " which the epoch for the given slot is live on-chain. Future", " implementations will instead use indexed data through an offchain", " worker, not requiring older states to be available."] }, RuntimeApiMethodMetadata { name: "submit_report_equivocation_unsigned_extrinsic", inputs: [RuntimeApiMethodParamMetadata { name: "equivocation_proof", ty: UntrackedSymbol { id: 110, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "key_owner_proof", ty: UntrackedSymbol { id: 967, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 930, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Submits an unsigned extrinsic to report an equivocation. The caller", " must provide the equivocation proof and a key ownership proof", " (should be obtained using `generate_key_ownership_proof`). The", " extrinsic will be unsigned and should only be accepted for local", " authorship (not to be broadcast to the network). This method returns", " `None` when creation of the extrinsic fails, e.g. if equivocation", " reporting is disabled for the given runtime (i.e. this method is", " hardcoded to return `None`). Only useful in an offchain context."] }], docs: [" API necessary for block authorship with BABE."] }, RuntimeApiMetadata { name: "AuthorityDiscoveryApi", methods: [RuntimeApiMethodMetadata { name: "authorities", inputs: [], output: UntrackedSymbol { id: 565, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Retrieve authority identifiers of the current and next authority set."] }], docs: [" The authority discovery api.", "", " This api is used by the `client/authority-discovery` module to retrieve identifiers", " of the current and next authority set."] }, RuntimeApiMetadata { name: "SessionKeys", methods: [RuntimeApiMethodMetadata { name: "generate_session_keys", inputs: [RuntimeApiMethodParamMetadata { name: "seed", ty: UntrackedSymbol { id: 322, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Generate a set of session keys with optionally using the given seed.", " The keys should be stored within the keystore exposed via runtime", " externalities.", "", " The seed needs to be a valid `utf8` string.", "", " Returns the concatenated SCALE encoded public keys."] }, RuntimeApiMethodMetadata { name: "decode_session_keys", inputs: [RuntimeApiMethodParamMetadata { name: "encoded", ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 968, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Decode the given public session keys.", "", " Returns the list of public raw public keys + key type."] }], docs: [" Session keys runtime api."] }, RuntimeApiMetadata { name: "AccountNonceApi", methods: [RuntimeApiMethodMetadata { name: "account_nonce", inputs: [RuntimeApiMethodParamMetadata { name: "account", ty: UntrackedSymbol { id: 0, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Get current account nonce of given `AccountId`."] }], docs: [" The API to query account nonce."] }, RuntimeApiMetadata { name: "TransactionPaymentApi", methods: [RuntimeApiMethodMetadata { name: "query_info", inputs: [RuntimeApiMethodParamMetadata { name: "uxt", ty: UntrackedSymbol { id: 865, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "len", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 971, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [] }, RuntimeApiMethodMetadata { name: "query_fee_details", inputs: [RuntimeApiMethodParamMetadata { name: "uxt", ty: UntrackedSymbol { id: 865, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "len", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 972, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [] }, RuntimeApiMethodMetadata { name: "query_weight_to_fee", inputs: [RuntimeApiMethodParamMetadata { name: "weight", ty: UntrackedSymbol { id: 10, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [] }, RuntimeApiMethodMetadata { name: "query_length_to_fee", inputs: [RuntimeApiMethodParamMetadata { name: "length", ty: UntrackedSymbol { id: 4, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 6, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [] }], docs: [] }, RuntimeApiMetadata { name: "BeefyMmrApi", methods: [RuntimeApiMethodMetadata { name: "authority_set_proof", inputs: [], output: UntrackedSymbol { id: 845, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Return the currently active BEEFY authority set proof."] }, RuntimeApiMethodMetadata { name: "next_authority_set_proof", inputs: [], output: UntrackedSymbol { id: 845, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Return the next/queued BEEFY authority set proof."] }], docs: [" API useful for BEEFY light clients."] }, RuntimeApiMetadata { name: "GenesisBuilder", methods: [RuntimeApiMethodMetadata { name: "build_state", inputs: [RuntimeApiMethodParamMetadata { name: "json", ty: UntrackedSymbol { id: 14, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 975, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Build `RuntimeGenesisConfig` from a JSON blob not using any defaults and store it in the", " storage.", "", " In the case of a FRAME-based runtime, this function deserializes the full", " `RuntimeGenesisConfig` from the given JSON blob and puts it into the storage. If the", " provided JSON blob is incorrect or incomplete or the deserialization fails, an error", " is returned.", "", " Please note that provided JSON blob must contain all `RuntimeGenesisConfig` fields, no", " defaults will be used."] }, RuntimeApiMethodMetadata { name: "get_preset", inputs: [RuntimeApiMethodParamMetadata { name: "id", ty: UntrackedSymbol { id: 976, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 322, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Returns a JSON blob representation of the built-in `RuntimeGenesisConfig` identified by", " `id`.", "", " If `id` is `None` the function should return JSON blob representation of the default", " `RuntimeGenesisConfig` struct of the runtime. Implementation must provide default", " `RuntimeGenesisConfig`.", "", " Otherwise function returns a JSON representation of the built-in, named", " `RuntimeGenesisConfig` preset identified by `id`, or `None` if such preset does not", " exist. Returned `Vec<u8>` contains bytes of JSON blob (patch) which comprises a list of", " (potentially nested) key-value pairs that are intended for customizing the default", " runtime genesis config. The patch shall be merged (rfc7386) with the JSON representation", " of the default `RuntimeGenesisConfig` to create a comprehensive genesis config that can", " be used in `build_state` method."] }, RuntimeApiMethodMetadata { name: "preset_names", inputs: [], output: UntrackedSymbol { id: 977, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Returns a list of identifiers for available builtin `RuntimeGenesisConfig` presets.", "", " The presets from the list can be queried with [`GenesisBuilder::get_preset`] method. If", " no named presets are provided by the runtime the list is empty."] }], docs: [" API to interact with `RuntimeGenesisConfig` for the runtime"] }, RuntimeApiMetadata { name: "TrustedQueryApi", methods: [RuntimeApiMethodMetadata { name: "is_trusted_reserve", inputs: [RuntimeApiMethodParamMetadata { name: "asset", ty: UntrackedSymbol { id: 978, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "location", ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 979, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Returns if the location is a trusted reserve for the asset.", "", " # Arguments", " * `asset`: `VersionedAsset`.", " * `location`: `VersionedLocation`."] }, RuntimeApiMethodMetadata { name: "is_trusted_teleporter", inputs: [RuntimeApiMethodParamMetadata { name: "asset", ty: UntrackedSymbol { id: 978, marker: PhantomData<fn() -> core::any::TypeId> } }, RuntimeApiMethodParamMetadata { name: "location", ty: UntrackedSymbol { id: 97, marker: PhantomData<fn() -> core::any::TypeId> } }], output: UntrackedSymbol { id: 979, marker: PhantomData<fn() -> core::any::TypeId> }, docs: [" Returns if the asset can be teleported to the location.", "", " # Arguments", " * `asset`: `VersionedAsset`.", " * `location`: `VersionedLocation`."] }], docs: [] }], outer_enums: OuterEnums { call_enum_ty: UntrackedSymbol { id: 104, marker: PhantomData<fn() -> core::any::TypeId> }, event_enum_ty: UntrackedSymbol { id: 21, marker: PhantomData<fn() -> core::any::TypeId> }, error_enum_ty: UntrackedSymbol { id: 981, marker: PhantomData<fn() -> core::any::TypeId> } }, custom: CustomMetadata { map: {} } }